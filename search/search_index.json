{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":""},{"location":"#accueil","title":"Accueil","text":""},{"location":"archi/","title":"Introduction","text":""},{"location":"archi/#introduction","title":"Introduction","text":"Logo g\u00e9n\u00e9r\u00e9 avec firefly.adobe.com"},{"location":"archi/#definitions","title":"D\u00e9finitions","text":"<p>L'architecture logicielle a une d\u00e9finition diff\u00e9rente selon l'entreprise, l'\u00e9quipe et m\u00eame le pays.</p> <p>Grady Booch</p> <p>Architecture represents the set of significant design decisions that shape the form and the function of a system , where significant is measured by cost of change.</p> <p>Architecture logicielle : l\u2019indispensable \u00e0 savoir</p> <p>L\u2019architecture logicielle c\u2019est simplement l\u2019organisation dans laquelle les diff\u00e9rents composants de ton application vont \u00eatre s\u00e9par\u00e9s et vont communiquer entre eux.</p> <p>Wikipedia</p> <p>L\u2019architecture logicielle d\u00e9crit d\u2019une mani\u00e8re symbolique et sch\u00e9matique les diff\u00e9rents \u00e9l\u00e9ments d\u2019un ou de plusieurs syst\u00e8mes informatiques, leurs interrelations et leurs interactions. Contrairement aux sp\u00e9cifications produites par l\u2019analyse fonctionnelle, le mod\u00e8le d'architecture, produit lors de la phase de conception, ne d\u00e9crit pas ce que doit r\u00e9aliser un syst\u00e8me informatique mais plut\u00f4t comment il doit \u00eatre con\u00e7u de mani\u00e8re \u00e0 r\u00e9pondre aux sp\u00e9cifications. L\u2019analyse d\u00e9crit le \u00ab quoi faire \u00bb alors que l\u2019architecture d\u00e9crit le \u00ab comment le faire \u00bb.</p>"},{"location":"archi/#but-de-larchitecture","title":"But de l'architecture","text":"<p>Architecture logicielle : l\u2019indispensable \u00e0 savoir</p> <p>Le but ultime de l\u2019architecture logicielle c\u2019est de faciliter le d\u00e9veloppement, l\u2019\u00e9volution, le d\u00e9ploiement et la maintenance d\u2019un syst\u00e8me. Une bonne architecture fait ressortir le c\u0153ur du probl\u00e8me \u00e0 r\u00e9soudre, pas les d\u00e9tails d\u2019impl\u00e9mentation.</p>"},{"location":"archi/#ressources","title":"Ressources","text":"<ul> <li>Mod\u00e8le de dossier d'architecture</li> <li>What Is Software Architecture?</li> <li>Quelle architecture logicielle pour son application ?</li> <li>Architecture des Syst\u00e8mes d\u2019Information - 03 \u2013 Architecture Logicielle et Technique</li> <li>Exemple de document d'architecture logicielle</li> <li>Conception d'architecture</li> <li>Architecture logicielle, une introduction</li> <li>architecture logicielle et conception avanc\u00e9e</li> <li>Am\u00e9liorer les comp\u00e9tences et les infrastructures avec les katas d'architecture (Alexandre Touret)</li> <li>Types de persistance pour les microservices</li> </ul>"},{"location":"archi/archi-doc/","title":"Document d'architecture","text":""},{"location":"archi/archi-doc/#document-darchitecture","title":"Document d'architecture","text":"<p>Permet de servir de r\u00e9f\u00e9rence pour l'architecture de l'application.</p> <ul> <li>Exemple GUI Modeler - SNIper</li> <li>Project architecture document template</li> <li>System Architecture Document Template</li> </ul>"},{"location":"archi/c4/","title":"Le mod\u00e8le C4","text":""},{"location":"archi/c4/#le-modele-c4","title":"Le mod\u00e8le C4","text":"<p>Le mod\u00e8le C4 est un mod\u00e8le de repr\u00e9sentation de l'architecture logicielle. Il est compos\u00e9 de 4 niveaux:</p> <ol> <li>Contexte syst\u00e8me<ul> <li>Consid\u00e9rer le syst\u00e8me comme une bo\u00eete entour\u00e9e d\u2019utilisateurs, API, services tiers, etc.</li> <li>But: comprendre qui/quoi interagit avec le syst\u00e8me (information utile pour le client, les chefs de projet et les devs).</li> </ul> </li> <li>Conteneurs<ul> <li>Ce qu\u2019il y a \u00e0 l\u2019int\u00e9rieur du syst\u00e8me: web apps, apps mobiles, bases de donn\u00e9es, API, services en arri\u00e8re-plan, bases de donn\u00e9es, etc.</li> <li>But: d\u00e9composer le syst\u00e8me en unit\u00e9s d\u00e9ployables.</li> </ul> </li> <li>Composants<ul> <li>D\u00e9finissez les blocs internes d\u2019un conteneur (ex. les contr\u00f4leurs, les services, les routes, etc.).</li> <li>But: montrer la structure interne (contr\u00f4leurs, services, utilitaires, etc.) utile pour les d\u00e9veloppeurs et pour d\u00e9finir l'architecture du code.</li> </ul> </li> <li>Code<ul> <li>Rarement utilis\u00e9, montrant la structure du code (classes, interfaces, fonctions, etc.).</li> <li>But: utile pour les d\u00e9veloppeurs pour comprendre les d\u00e9tails d'impl\u00e9mentation.</li> </ul> </li> </ol> <p>Voici une infographie r\u00e9sumant le mod\u00e8le C4 (source: icepanel.io):</p> <p></p> <p>Voici quelques ressources pour en savoir plus:</p> <ul> <li>Le site de online.visual-paradigm.com propose des exemples de diagrammes C4 sur diff\u00e9rents cas d'usage. Ils peuvent servir de base pour les katas.</li> <li>Making Sense of Software Architecture with the C4 Model, explique les diff\u00e9rents niveaux du mod\u00e8le C4.</li> <li>C4 model \u2014 a better way to visualise software architecture</li> <li>C4 Model. My experience + Example</li> </ul>"},{"location":"archi/code-archi/","title":"Architecture de code","text":""},{"location":"archi/code-archi/#architecture-de-code","title":"Architecture de code","text":"<p>MVVM, MVC, Clean Architecture, Hexagonal Architecture, Onion Architecture, CQRS, Event Sourcing, Microservices, SOA, etc.</p>"},{"location":"archi/code-archi/#clean-architecture","title":"Clean architecture","text":"<p>Propos\u00e9e en 2012 par Robert C. Martin (Uncle Bob) dans son article The Clean Architecture et d\u00e9velopp\u00e9e dans son livre Clean Architecture: A Craftsman's Guide to Software Structure and Design.</p>"},{"location":"archi/code-archi/#differentes-couches","title":"Diff\u00e9rentes couches","text":"<p>Diff\u00e9rentes repr\u00e9sentations de la Clean Architecture :</p> <p> </p>"},{"location":"archi/code-archi/#flot","title":"Flot","text":""},{"location":"archi/code-archi/#liens-utiles","title":"Liens utiles :","text":"<ul> <li>.Net 9 clean architecture template</li> <li>Understanding the difference between MVC architecture and Clean Architecture in ASP.NET</li> <li>Clean Architecture in .NET</li> <li>Clean Architecture example in Java</li> <li>Non mis \u00e0 jour depuis longtemps : Clean Architecture template</li> </ul>"},{"location":"archi/code-archi/#architecture-hexagonale","title":"Architecture hexagonale","text":"<p>Propos\u00e9e en 2005 par Alistair Cockburn. Elle porte aussi le nom d'architecture en \"Ports and Adapters\". Elle se compose de plusieurs couches organis\u00e9es autour du domaine m\u00e9tier.</p> <ul> <li>Le domaine m\u00e9tier (core) au centre, qui contient la logique m\u00e9tier et les r\u00e8gles de l'application.</li> <li>Les ports, qui d\u00e9finissent les interfaces pour interagir avec le domaine m\u00e9tier.</li> <li>Les adaptateurs, qui impl\u00e9mentent les ports pour interagir avec des syst\u00e8mes externes (bases de donn\u00e9es, interfaces utilisateur, services externes, etc.).</li> </ul> <p> </p>"},{"location":"archi/code-archi/#liens-utiles_1","title":"Liens utiles","text":"<ul> <li>Hexagonal Architecture with Java and Spring</li> <li>Hexagonal Architecture by Example</li> <li>A Detailed Guide to Hexagonal Architecture with Examples</li> </ul>"},{"location":"archi/kata-examples/","title":"Exemples de katas d'archi","text":""},{"location":"archi/kata-examples/#exemples-de-katas-darchi","title":"Exemples de katas d'archi","text":"<ul> <li>Quelques exemples de solutions</li> <li>Probl\u00e8me architecture Kata 2023 by O'Reilly</li> </ul>"},{"location":"archi/kata-examples/#whos-your-daddy","title":"Who's Your Daddy?","text":"<p>Description</p> <p>Organization wants to build the world's largest genealogical graph in history</p> <p>Requirements: data is graph-like, open-ended, and must be viewable and searchable over a variety of technology platforms (web, mobile, etc); API allowing third-party access to all of the data; Facebook integration; historical records (census, marriage, death, parish records, etc) are being added by teams of people in the field--each record must be viewed/transcribed and scanned twice and verified</p> <p>Users: millions of users, hundreds/thousands of third-party applications</p> Ouvrir pour voir le diagramme C4 <p></p> Geneo4all Level 1 - System context <p></p> <p></p> Geneo4all Level 2 - Container diagram <p></p>"},{"location":"archi/kata-examples/#talesofafourthgrade","title":"TalesOfAFourthGrade","text":"<p>TalesOfAFourthGrade propos\u00e9 par architecturalkatas.com</p> <p>An elementary school system comprehensive student management system</p> <p>Requirements: track absences, tardies and excuses (entered by parents, faculty or staff); generate reports on student activities; be accessible from the playground; track student grades and assignments (completed and due); parent-teacher forums; run as an SaaS system from a hosting center</p> <p>Users: faculty, staff and student parents</p> Ouvrir pour voir le diagramme C4 <p></p>"},{"location":"archi/kata-examples/#ill-have-the-blt","title":"I'll Have the BLT","text":"<p>Propos\u00e9 par architecturalkatas.com</p> <p>A national sandwich shop wants to enable \"fax in your order\" but over the Internet instead (in addition to their current fax-in service)</p> <p>Users: millions+</p> <p>Requirements: users will place their order, then be given a time to pick up their sandwich and directions to the shop (which must integrate with Google Maps); if the shop offers a delivery service, dispatch the driver with the sandwich to the user; mobile-device accessibility; offer national daily promotionals/specials; offer local daily promotionals/specials; accept payment online or in person/on delivery</p> Fonctionnalit\u00e9 Description Mise en place Commande de sandwich Estimation du temps de pr\u00e9paration + facturation PWA responsive Commande + code de r\u00e9cup\u00e9ration + heure de r\u00e9cup\u00e9ration + itin\u00e9raire + livraison si disponible Calcul de l'itin\u00e9raire Int\u00e9gration avec Google maps Paiement Sur place ou en ligne Livraison Envoi de notification au livreur (qui est un un interne) Promotions Informations renseign\u00e9es par l'\u00e9quipe marketing ou les managers et peuvent choisir au niveau local ou national +1 millions d'utilisateurs Syst\u00e8me r\u00e9actif et qui se met \u00e0 l'\u00e9chelle Synchro commandes internet / fax S'assure que le SI g\u00e8re bien les deux types de commandes Ouvrir pour voir le diagramme C4 <p></p>"},{"location":"archi/katas/","title":"Katas d'architecture","text":""},{"location":"archi/katas/#katas-darchitecture","title":"Katas d'architecture","text":"<p>Fred Brooks</p> <p>How do we get great designers? Great designers design, of course.</p> <p>Ted Neward</p> <p>So how are we supposed to get great architects, if they only get the chance to architect fewer than a half-dozen times in their career?</p> <p>Les katas (dans les arts martiaux): transmission des technique d'un combattant \u00e0 un autre source</p> <p>Katas d'architecture -&gt; Coding dojos pour architecte</p>"},{"location":"archi/katas/#etapes","title":"Etapes","text":"<ol> <li>Pr\u00e9paration (5 min)<ul> <li>Assembler une \u00e9quipe de 5 \u00e0 6 personnes avec des profiles vari\u00e9s</li> <li>Prendre de quoi noter. Pas besoin d'un ordinateur</li> <li>Choisir un formalisme. Par exemple, le C4</li> <li>Ensuite choisir un sujet de Kata</li> </ul> </li> <li>Conception (45m-1h)<ul> <li>On peut poser toutes les questions qu'on veut au mod\u00e9rateur</li> <li>Choix de technologie libre et on peut prendre des hypoth\u00e8ses sur les technos qu'on ne conna\u00eet pas</li> <li>Ne pas assumer le de comp\u00e9tence des d\u00e9veloppeurs</li> </ul> </li> <li>Revue des pairs (5 min)<ul> <li>Chaque \u00e9quipe pr\u00e9sente aux autres groupes \u00e0 tour de r\u00f4le sa vision</li> <li>Le mod\u00e9rateur \u00e9nonce les besoins du projet et jouera le r\u00f4le du client si besoin</li> <li>Chaque \u00e9quipe choisit un repr\u00e9sentant qui se charge de faire la pr\u00e9sentation</li> <li>Chaque \u00e9quipe r\u00e9pond aux questions des autres groupes</li> </ul> </li> <li>Vote<ul> <li>Chaque personne donne une note de 1 \u00e0 3 pour le projet en cours de pr\u00e9sentation</li> <li>1 (pouce lev\u00e9) signifie que l'\u00e9quipe ma\u00eetrise son projet et a r\u00e9pondu \u00e0 toutes les question</li> <li>3 (pouce bas) signifie que l'\u00e9quipe s'est compl\u00e8tement tromp\u00e9e</li> <li>2 signifie un entre deux ou il reste certains o\u00f9 le votant est inconfortable</li> <li>Exemple de crit\u00e8res d'\u00e9valuation (par exemple en axant sur la simplicit\u00e9, \u00e9volutivit\u00e9 et adaptabilit\u00e9)</li> </ul> </li> <li> <p>Changer les \u00e9quipes et refaire l'exercice.</p> </li> <li> <p>Il est aussi possible de contextualiser et d'adapter (par exemple en donnant des retours d'exp\u00e9rience d'autres projets)</p> </li> </ol>"},{"location":"archi/katas/#informations-utiles","title":"Informations utiles","text":"<p>Sites qui proposent des sujets de katas:</p> <ul> <li>architecturalkatas.com</li> <li>nealford.com</li> <li>fundamentalsofsoftwarearchitecture.com</li> <li>Exemple complet et exhaustif d'un kata d'architecture dans le contexte d'une comp\u00e9tition</li> </ul> <p>Exemples / astuces de r\u00e9alisation de Katas:</p> <ul> <li>Architecture Kata: Agile Dead Trees</li> <li>Learning with Architecture Kata: Introduction</li> <li>architectural katas solutions</li> </ul>"},{"location":"archi/katas/#ressources","title":"Ressources","text":"<ul> <li>Am\u00e9liorer les comp\u00e9tences et les infrastructures avec les katas d'architecture (Alexandre Touret)</li> </ul>"},{"location":"archi/sujets-2324/","title":"Expos\u00e9s 23 24","text":""},{"location":"archi/sujets-2324/#exposes-23-24","title":"Expos\u00e9s 23 24","text":""},{"location":"archi/sujets-2324/#graphql-par-tom","title":"GraphQL (par Tom)","text":"<p>Alternative au APIs REST et approche moderne de d\u00e9liverance des donn\u00e9es.</p>"},{"location":"archi/sujets-2324/#kesako","title":"Kesako ?","text":"<p>GraphQL est un langage de requ\u00eate pour votre API et un environnement d'ex\u00e9cution de requ\u00eates c\u00f4t\u00e9 serveur pour ex\u00e9cuter ces requ\u00eates en utilisant les donn\u00e9es existantes. GraphQL d\u00e9crit les donn\u00e9es de l'API et fourni un moyen d'acc\u00e8s \u00e0 ces donn\u00e9es. Il suffit de piocher ce dont vous avez besoin.</p>"},{"location":"archi/sujets-2324/#pourquoi-graphql","title":"Pourquoi GraphQL ?","text":"<ul> <li> <p>Demander ce dont vous avez besoin : GraphQL permet aux clients de demander des donn\u00e9es exactement comme ils en ont besoin. GraphQL est une alternative aux API REST.</p> </li> <li> <p>Un seul point d'entr\u00e9e : GraphQL fournit un seul point d'entr\u00e9e pour ex\u00e9cuter des requ\u00eates. Cela signifie que vous n'avez pas besoin de g\u00e9rer plusieurs points d'entr\u00e9e pour diff\u00e9rentes versions de votre API.</p> </li> <li> <p>Documentation automatique : GraphQL fournit une documentation automatique pour votre API. Cela signifie que vous n'avez pas besoin de maintenir une documentation s\u00e9par\u00e9e pour votre API.</p> </li> <li> <p>\u00c9volution de l'API : GraphQL permet d'\u00e9voluer l'API sans casser les clients existants. Cela signifie que vous pouvez ajouter de nouveaux champs \u00e0 votre API sans casser les clients existants.</p> </li> <li> <p>Outils de d\u00e9veloppement : GraphQL fournit des outils de d\u00e9veloppement puissants pour les d\u00e9veloppeurs. Cela signifie que vous pouvez, par exemple, utiliser des outils tels que GraphiQL pour tester vos requ\u00eates GraphQL.</p> </li> </ul>"},{"location":"archi/sujets-2324/#pourquoi-ne-pas-lutiliser","title":"Pourquoi ne pas l'utiliser ?","text":"<ul> <li>Cache : GraphQL a du mal \u00e0 cacher ses donn\u00e9es car contrairement aux API REST, les m\u00e9thodes de caching ne sont pas d\u00e9finis par les CDNs, Proxies, Serveurs Web, et navigateurs.</li> <li>Co\u00fbt de l'infrastructure : GraphQL n\u00e9cessite plus de ressources pour ex\u00e9cuter des requ\u00eates que les API REST.</li> <li>Client Integration Contrairement aux API REST, GraphQL n\u00e9cessite un client sp\u00e9cialis\u00e9 pour ex\u00e9cuter des requ\u00eates. Cela signifie que vous devez utiliser un client GraphQL pour ex\u00e9cuter des requ\u00eates GraphQL l\u00e0 o\u00f9 en REST, on utilise des outils simples comme cURL, int\u00e9gr\u00e9s dans la plupart des cas par d\u00e9faut.</li> </ul>"},{"location":"archi/sujets-2324/#comment-ca-marche","title":"Comment \u00e7a marche ?","text":"<p>GraphQL est compos\u00e9 de 5 parties principales :</p> <ol> <li> <p>Queries (requ\u00eates) : Les requ\u00eates GraphQL sont utilis\u00e9es pour demander des donn\u00e9es sp\u00e9cifiques au serveur. Elles permettent aux clients de sp\u00e9cifier exactement quelles donn\u00e9es ils ont besoin, et le serveur renvoie uniquement ces donn\u00e9es.</p> </li> <li> <p>Mutations (mutations) : Les mutations sont utilis\u00e9es pour modifier les donn\u00e9es du serveur. Contrairement aux requ\u00eates, qui sont utilis\u00e9es pour la lecture de donn\u00e9es, les mutations permettent d'effectuer des op\u00e9rations telles que la cr\u00e9ation, la mise \u00e0 jour ou la suppression de donn\u00e9es.</p> </li> <li> <p>Types (types) : GraphQL d\u00e9finit un syst\u00e8me de types pour d\u00e9crire la structure des donn\u00e9es disponibles. Les types sont utilis\u00e9s pour sp\u00e9cifier quels champs peuvent \u00eatre demand\u00e9s sur un objet et quels types de donn\u00e9es ils contiennent.</p> </li> <li> <p>Schemas (sch\u00e9mas) : Un sch\u00e9ma GraphQL est une description de tous les types de donn\u00e9es disponibles dans l'API, ainsi que des relations entre ces types. Il d\u00e9finit quels types de requ\u00eates et de mutations peuvent \u00eatre ex\u00e9cut\u00e9s.</p> </li> <li> <p>Resolvers (r\u00e9solveurs) : Les r\u00e9solveurs sont des fonctions qui d\u00e9finissent comment les donn\u00e9es doivent \u00eatre r\u00e9cup\u00e9r\u00e9es ou modifi\u00e9es pour chaque champ d'un type dans le sch\u00e9ma. Chaque champ d'un type peut avoir son propre r\u00e9solveur, ce qui permet une grande flexibilit\u00e9 dans la fa\u00e7on dont les donn\u00e9es sont obtenues ou manipul\u00e9es.</p> </li> </ol> <p></p>"},{"location":"archi/sujets-2324/#exemple","title":"Exemple","text":"<p>Voici un exemple de requ\u00eate GraphQL :</p> <pre><code>query {\n  user(id: 1) {\n    id\n    name\n    email\n  }\n}\n</code></pre>"},{"location":"archi/sujets-2324/#experimenter","title":"Experimenter","text":"<p>Dirigez-vous vers l'API GraphQL d'Atlassian</p>"},{"location":"archi/sujets-2324/#how-googleapple-pay-work-julian","title":"How Google/Apple Pay work (Julian)","text":""},{"location":"archi/sujets-2324/#fonctionnement-de-lapple-pay","title":"Fonctionnement de l'Apple Pay","text":"<p>Apple Pay est syst\u00e8me existant depuis 2013, permettant de pouvoir utiliser des cartes \u00e0 l'aide de son t\u00e9l\u00e9phone, notamment des cartes bancaires. Cela fonctionne en utilisant le concept de tokenization. Dans un premier temps, lorsque vous allez rentrer vos informations bancaire dans votre device Apple, dans ces informations ce qui va nous int\u00e9resser c'est le PAN (num\u00e9ro \u00e0 16 chiffres ou 19 suivant la carte, qui est au recto de votre carte bancaire). Apr\u00e8s avoir saisi ces informations, le PAN va \u00eatre enregistr\u00e9 sur un serveur s\u00e9curis\u00e9 de Apple. Ensuite ce PAN va \u00eatre v\u00e9rifier par la banque puis \u00e0 l'aide du TSP, un token va \u00eatre ressorti. Ce token va \u00eatre renvoyer au device Apple et va \u00eatre stock\u00e9 dans un \u00e9l\u00e9ment s\u00e9curis\u00e9 du device. Cet ensemble (\u00e9l\u00e9ment s\u00e9curis\u00e9 + token) s'appelle DAN.</p> <p>Apr\u00e8s avoir enregistrer votre carte, le paiement fonctionne \u00e0 l'aide du syst\u00e8me NFC du device. Lorsque vous approcher votre t\u00e9l\u00e9phone du TPE, \u00e0 l'aide du NFC, le DAN va \u00eatre envoy\u00e9 au TPE, puis le TPE va communiquer avec la banque pour communiquer le DAN. Apr\u00e8s v\u00e9rification du token par la banque et par le moyen de paiement (visa, mastercard...), il va y avoir d\u00e9tokenisation \u00e0 l'aide de TSP, puis le paiement s'effectuera avec les infos d\u00e9tokenis\u00e9es.</p>"},{"location":"archi/sujets-2324/#fonctionnement-google-pay","title":"Fonctionnement Google Pay","text":"<p>Google Pay, ou plut\u00f4t google wallet, existe depuis 2014. Anciennement android Pay, le fonctionnement de Google Pay est pratiquement le m\u00eame que celui d'Apple Pay. Il y a quelques diff\u00e9rences entre les 2 syst\u00e8mes. Premi\u00e8rement, le token g\u00e9n\u00e9r\u00e9 \u00e0 partir des informations bancaires, sur android, n'est pas stock\u00e9 dans un \u00e9l\u00e9ment s\u00e9curis\u00e9 comme pour un device Apple. Le token va \u00eatre stock\u00e9 directement dans l'application Google Wallet. Deuxi\u00e8mement, ce m\u00eame token va \u00eatre stock\u00e9 sur un serveur de Google \u00e0 la diff\u00e9rence de Apple qui eux ne stockent pas cette information sur leur serveur.</p> <p>Pour le paiement, le fonctionnement est similaire \u00e0 celui d'Apple, \u00e0 la diff\u00e9rence qu'ils utilisent un syst\u00e8me de HCE, (Host Card Emulation) avec le token r\u00e9cup\u00e9rer du serveur ou de l'app.</p>"},{"location":"archi/sujets-2324/#comment-fonctionne-git-hugo","title":"Comment fonctionne Git ? (Hugo)","text":"<p>Tout d'abord, notre code r\u00e9side non pas dans 2, mais 4 endroits diff\u00e9rents :</p> Endroit Description Espace de travail Dossier courant de notre projet Aire de Staging Endroit temporaire o\u00f9 les changements de nos fichiers sont enregistr\u00e9s D\u00e9p\u00f4t local D\u00e9p\u00f4t de nos changements valid\u00e9s uniquement pr\u00e9sent sur notre ordinateur D\u00e9p\u00f4t distant Serveur (comme GitHub) pour partager et sauvegarder notre code"},{"location":"archi/sujets-2324/#deroule","title":"D\u00e9roul\u00e9","text":"<p>La plupart des commandes git d\u00e9placent notre code entre ces 4 endroits:</p> <pre><code>sequenceDiagram\nparticipant A as Espace de travail\nparticipant B as Aire de staging\nparticipant C as D\u00e9p\u00f4t local\nparticipant D as D\u00e9p\u00f4t distant\nD-&gt;&gt;C: git clone\nC-&gt;&gt;A: git checkout\nA-&gt;&gt;B: git add\nB-&gt;&gt;C: git commit\nC-&gt;&gt;D: git push\nD-&gt;&gt;A: git pull</code></pre> <ul> <li> <p>git clone clone un r\u00e9pertoire distant en local, nous permettant de modifier ses fichiers dans notre espace de travail</p> </li> <li> <p>git checkout bascule sur une autre branche ou restaure un espace de travail</p> </li> <li> <p>git add ajoute le contenu des fichiers modifi\u00e9s dans l'aire de staging en attendant leur validation</p> </li> <li> <p>git commit enregistre les changements de l'aire de staging dans le d\u00e9p\u00f4t local</p> </li> <li> <p>git push envoie les changements locaux sur le d\u00e9p\u00f4t distant</p> </li> <li> <p>git pull r\u00e9cup\u00e8re les changements du d\u00e9p\u00f4t distant</p> </li> </ul> <p>La commande git pull est en r\u00e9alit\u00e9 l'association de deux commandes : git fetch et git merge</p> <pre><code>flowchart LR\n    id1[(D\u00e9p\u00f4t distant)]-- git pull--&gt;id2(Espace de travail)\n    id1[(D\u00e9p\u00f4t distant)]-- git fetch --&gt;id3[(D\u00e9p\u00f4t local)]\n    id3[(D\u00e9p\u00f4t local)]-- git merge --&gt;id2(Espace de travail)</code></pre> <ul> <li> <p>git fetch r\u00e9cup\u00e8re les derni\u00e8res mises \u00e0 jour depuis le d\u00e9p\u00f4t distant</p> </li> <li> <p>git merge applique ces mises \u00e0 jour au d\u00e9p\u00f4t local</p> </li> </ul>"},{"location":"archi/sujets-2324/#git-branching","title":"Git branching","text":"<p>L'int\u00e9r\u00eat de git r\u00e9side dans son syst\u00e8me de branche : un m\u00eame d\u00e9p\u00f4t peut contenir plusieurs versions d'un m\u00eame code, cahcune r\u00e9sidant dans sa propre branche.</p> <p>Les commandes git checkout (voir ci-dessus) et git switch permettent de naviguer entre ces branches.</p> <pre><code>flowchart LR\ncommit4--&gt;commit1A--&gt;commit2A~~~id2{{Branch A}}\ncommit1--&gt;commit2--&gt;commit3--&gt;commit4--&gt;commit5--&gt;commit6~~~id1{{Main branch}}\ncommit2A-- git switch --&gt;commit6\ncommit6--&gt;commit2A</code></pre>"},{"location":"archi/sujets-2324/#pratiques","title":"Pratiques","text":"<p>On rencontre courramment diff\u00e9rents noms de branches, chacun correspondant \u00e0 un environnement pr\u00e9cis :</p> <ul> <li>main ou master : production</li> <li>develop : d\u00e9veloppement</li> <li>feature : fonctionnalit\u00e9 qui sera fusionn\u00e9e sur develop, puis sur main/master</li> <li>hotfix : qui vise \u00e0 corriger un souci sur la main/master</li> <li>etc...</li> </ul>"},{"location":"archi/sujets-2324/#conflits","title":"Conflits","text":"<p>Imaginons un cas dans lequel j'ai cr\u00e9\u00e9 une branche depuis la develop, mais que celle-ci a \u00e9volu\u00e9 entretemps :</p> <pre><code>flowchart LR\n    commit4--&gt;commit1A--&gt;commit2A~~~id2{{feature/ft-mafeature}}\n    commit1--&gt;commit2--&gt;commit3--&gt;commit4--&gt;commit5--&gt;commit6~~~id1{{develop}}</code></pre> <p>Pour fusionner ma branche et la redescendre dans develop, je vais devoir int\u00e9grer son historique dans ma branche avec un rebase ou un merge de develop dans ma branche, ce qui me donnera l'historique local suivant au niveau de ma feature :</p> <pre><code>flowchart LR\n    commit4--&gt;commit5--&gt;commit6--&gt;commit1A--&gt;commit2A~~~id2{{feature/ft-mafeature}}</code></pre> <p>Je peux ensuite la fusionner dans develop, ce qui \u00e0 terme donnera</p> <pre><code>flowchart LR\n    commit4--&gt;commit5--&gt;commit6--&gt;commit1A--&gt;commit2A~~~id2{{develop}}</code></pre>"},{"location":"archi/sujets-2324/#definition-generale-des-proprietes-acid-nidal","title":"D\u00e9finition g\u00e9n\u00e9rale des propri\u00e9t\u00e9s ACID (Nidal)","text":"<p>Les propri\u00e9t\u00e9s ACID sont un ensemble de propri\u00e9t\u00e9s qui garantissent que les transactions sont fiables. Cela cignifie Atomicit\u00e9, Coh\u00e9rence, Isolation et Durabilit\u00e9.</p>"},{"location":"archi/sujets-2324/#atomicite-atomicity","title":"Atomicit\u00e9 (Atomicity)","text":""},{"location":"archi/sujets-2324/#definition","title":"D\u00e9finition","text":"<p>L'atomicit\u00e9 signifie que les transactions sont trait\u00e9es comme une seule unit\u00e9. Cela signifie que toutes les op\u00e9rations d'une transaction sont effectu\u00e9es ou aucune d'entre elles ne l'est.</p>"},{"location":"archi/sujets-2324/#exemple_1","title":"Exemple","text":"<ul> <li>Exemple 1: Transfert d'argent entre deux comptes bancaires.</li> <li>Op\u00e9rations:<ul> <li>D\u00e9biter le compte A.</li> <li>Cr\u00e9diter le compte B.</li> </ul> </li> <li>Atomicit\u00e9: Si l'une des op\u00e9rations \u00e9choue, les deux op\u00e9rations sont annul\u00e9es.</li> </ul>"},{"location":"archi/sujets-2324/#remarques","title":"Remarques","text":"<ul> <li>L'Atomicit\u00e9 est souvent impl\u00e9ment\u00e9e en utilisant des logs.</li> </ul>"},{"location":"archi/sujets-2324/#coherence-consistency","title":"Coh\u00e9rence (Consistency)","text":""},{"location":"archi/sujets-2324/#definition_1","title":"D\u00e9finition","text":"<p>La coh\u00e9rence garantit que les donn\u00e9es sont toujours valides avant et apr\u00e8s une transaction. Elles doivent respecter toutes les contraintes, les r\u00e8gles et les relations. Si une transaction viole l'int\u00e9grit\u00e9 des donn\u00e9es, elle est annul\u00e9e.</p>"},{"location":"archi/sujets-2324/#exemple_2","title":"Exemple","text":"<ul> <li>Exemple 1: Transfert d'argent entre deux comptes bancaires.</li> <li>Contrainte: Le solde du compte ne peut pas \u00eatre n\u00e9gatif.</li> <li>Coh\u00e9rence: Si le solde du compte A est de 100\u20ac, et que l'on essaie de transf\u00e9rer 150\u20ac, la transaction est       annul\u00e9e.</li> </ul>"},{"location":"archi/sujets-2324/#remarques_1","title":"Remarques","text":"<ul> <li>La Coh\u00e9rence est souvent impl\u00e9ment\u00e9e en utilisant des contraintes, des r\u00e8gles et des relations.</li> <li>Par exemple, les cl\u00e9s \u00e9trang\u00e8res dans une base de donn\u00e9es relationnelle, ou les contraintes de v\u00e9rification sur les   champs (taille Varchar, etc...).</li> </ul>"},{"location":"archi/sujets-2324/#isolation","title":"Isolation","text":""},{"location":"archi/sujets-2324/#definition_2","title":"D\u00e9finition","text":"<p>L'isolation garantit que les transactions s'ex\u00e9cutent ind\u00e9pendamment les unes des autres. Cela signifie que les transactions ne peuvent pas interf\u00e9rer les unes avec les autres.</p> <ul> <li>Le plus haut niveau d'isolation est souvent difficile \u00e0 atteindre en raison des performances. Il consiste \u00e0 ne   jamais permettre \u00e0 deux transactions de se chevaucher. C'est ce qu'on appelle l'isolation de niveau serializable.</li> <li>Il existe plusieurs niveaux d'isolation, tels que read committed, repeatable read et serializable.</li> <li>Chaque niveau d'isolation a ses propres probl\u00e8mes potentiels, tels que les dirty reads, les non-repeatable   reads et les phantom reads.</li> </ul>"},{"location":"archi/sujets-2324/#dirty-read","title":"Dirty Read","text":"<p>Un dirty read se produit lorsqu'une transaction lit des donn\u00e9es qui ont \u00e9t\u00e9 modifi\u00e9es par une autre transaction, mais qui n'ont pas encore \u00e9t\u00e9 valid\u00e9es.</p>"},{"location":"archi/sujets-2324/#exemple-de-cas-dutilisation","title":"Exemple de cas d'utilisation","text":"<p>La transaction A modifie une ligne o\u00f9 <code>age = 30</code> pour le transformer \u00e0 <code>age = 40</code>, mais n'a pas encore valid\u00e9 la transaction (par exemple, elle doit rollback). La transaction B lit la ligne modifi\u00e9e par la transaction A (elle re\u00e7oit <code>age = 40</code>. La transaction A rollback, et la ligne est restaur\u00e9e \u00e0 son \u00e9tat initial (<code>age = 30</code>) MAIS la transaction B a d\u00e9j\u00e0 lu la ligne avec le r\u00e9sultat modifi\u00e9 (<code>age = 40</code>).</p>"},{"location":"archi/sujets-2324/#non-repeatable-read","title":"Non-repeatable Read","text":"<p>Un non-repeatable read se produit lorsqu'une transaction lit des donn\u00e9es qui ont \u00e9t\u00e9 modifi\u00e9es par une autre transaction, puis relit ces donn\u00e9es et obtient un r\u00e9sultat diff\u00e9rent.</p>"},{"location":"archi/sujets-2324/#exemple-de-cas-dutilisation_1","title":"Exemple de cas d'utilisation","text":"<p>La transaction A lit une ligne o\u00f9 <code>age = 30</code>. La transaction B modifie la ligne lue par la transaction A et <code>age = 25</code>. La transaction A relit la ligne et obtient un r\u00e9sultat diff\u00e9rent, ce qui peut causer une erreur.</p>"},{"location":"archi/sujets-2324/#phantom-read","title":"Phantom Read","text":"<p>Un phantom read se produit lorsqu'une transaction lit un ensemble de lignes qui satisfont une condition, puis une autre transaction ins\u00e8re une nouvelle ligne qui satisfait la m\u00eame condition, et la premi\u00e8re transaction relit les donn\u00e9es et obtient un r\u00e9sultat diff\u00e9rent.</p>"},{"location":"archi/sujets-2324/#exemple-de-cas-dutilisation_2","title":"Exemple de cas d'utilisation","text":"<p>La transaction A lit toutes les lignes o\u00f9 <code>age &gt; 18</code>. La transaction B ins\u00e8re une nouvelle ligne o\u00f9 <code>age = 20</code>. La transaction A relit toutes les lignes o\u00f9 <code>age &gt; 18</code> et obtient un r\u00e9sultat diff\u00e9rent.</p>"},{"location":"archi/sujets-2324/#exemple_3","title":"Exemple","text":"<ul> <li>Exemple 1: Transfert d'argent entre deux comptes bancaires.</li> <li>Op\u00e9rations:<ul> <li>D\u00e9biter le compte A.</li> <li>Cr\u00e9diter le compte B.</li> </ul> </li> <li>Isolation: Si deux transactions essaient de d\u00e9biter le compte A en m\u00eame temps, l'une des transactions doit       attendre que l'autre soit termin\u00e9e.</li> </ul>"},{"location":"archi/sujets-2324/#remarques_2","title":"Remarques","text":"<ul> <li>L'Isolation est souvent une question de performances. Plus le niveau d'isolation est \u00e9lev\u00e9, plus les performances   sont faibles. C'est pourquoi il est important de choisir le bon niveau d'isolation en fonction des besoins.</li> </ul> Niveau d'isolation Dirty Read Non-repeatable Read Phantom Read Serializable Impossible Impossible Impossible Repeatable Read Impossible Impossible Possible Read Commited Impossible Possible Possible"},{"location":"archi/sujets-2324/#durabilite-durability","title":"Durabilit\u00e9 (Durability)","text":""},{"location":"archi/sujets-2324/#definition_3","title":"D\u00e9finition","text":"<p>La durabilit\u00e9 garantit que les donn\u00e9es d'une transaction sont enregistr\u00e9es de mani\u00e8re permanente. Cela signifie que les donn\u00e9es ne seront pas perdues, m\u00eame en cas de panne du syst\u00e8me. Dans les BDDs distribu\u00e9es, cela signifie que les donn\u00e9es sont r\u00e9pliqu\u00e9es sur plusieurs n\u0153uds.</p>"},{"location":"archi/sujets-2324/#exemple_4","title":"Exemple","text":"<ul> <li>Exemple 1: Transfert d'argent entre deux comptes bancaires.</li> <li>Durabilit\u00e9: Si la transaction est confirm\u00e9e, les donn\u00e9es sont enregistr\u00e9es de mani\u00e8re permanente, m\u00eame en cas       de panne du syst\u00e8me. Les donn\u00e9es ne seront pas perdues, m\u00eame si un n\u0153ud tombe en panne.</li> </ul>"},{"location":"archi/sujets-2324/#remarques_3","title":"Remarques","text":"<ul> <li>La Durabilit\u00e9 est souvent impl\u00e9ment\u00e9e en utilisant des logs de type WAL (Write-ahead logging).</li> <li>Les logs de type WAL sont utilis\u00e9s pour enregistrer les op\u00e9rations avant de les ex\u00e9cuter. Cela garantit que les   donn\u00e9es sont enregistr\u00e9es de mani\u00e8re permanente avant d'\u00eatre ex\u00e9cut\u00e9es.</li> </ul>"},{"location":"archi/sujets-2324/#conclusion","title":"Conclusion","text":"<ul> <li>Les propri\u00e9t\u00e9s ACID sont essent,ielles pour garantir que les transactions sont fiables.</li> <li>Chaque propri\u00e9t\u00e9 a un r\u00f4le important \u00e0 jouer pour garantir la fiabilit\u00e9 des transactions.</li> <li>Il est important de comprendre les propri\u00e9t\u00e9s ACID pour concevoir des syst\u00e8mes fiables et robustes.</li> <li>Les propri\u00e9t\u00e9s ACID sont souvent impl\u00e9ment\u00e9es en utilisant des logs, des contraintes et des r\u00e8gles.</li> <li>Il est important de choisir le bon niveau d'isolation en fonction des besoins pour garantir des performances   optimales.</li> </ul>"},{"location":"archi/sujets-2324/#references","title":"R\u00e9f\u00e9rences","text":"<ul> <li>URL vers la vid\u00e9o</li> <li></li> </ul>"},{"location":"archi/sujets-2324/#chose-database-romain","title":"Chose DataBase (Romain)","text":""},{"location":"archi/sujets-2324/#avant-de-changer-de-base-de-donnees","title":"Avant de changer de base de donn\u00e9es","text":"<p>v\u00e9rifiez si la base actuelle est r\u00e9ellement insuffisante. il faut examinez la documentation pour identifier des ajustements possibles qui pourraient r\u00e9soudre les probl\u00e8mes actuels.</p>"},{"location":"archi/sujets-2324/#migrer-une-base-de-donnees","title":"Migrer une base de donn\u00e9es","text":"<p>Migrer une base de donn\u00e9es de production est risqu\u00e9e et gourmande en energie. Assurez-vous d'avoir \u00e9puis\u00e9 toutes les am\u00e9liorations possibles avec le syst\u00e8me actuel avant de migrer.</p>"},{"location":"archi/sujets-2324/#le-choix-de-la-base-de-donnees","title":"Le Choix de la base de donn\u00e9es","text":"<p>il faut prendres des bases de donn\u00e9es \u00e9prouv\u00e9es et stables. il faut aussi faire attention aux nouvelles technologies non test\u00e9es.</p>"},{"location":"archi/sujets-2324/#lire-la-documentation","title":"Lire la Documentation","text":"<p>Pour comprendre les limitations d'une nouvelle base de donn\u00e9es, \u00e9tudiez soigneusement sa documentation, en particulier les sections sur les limites et les FAQ.</p>"},{"location":"archi/sujets-2324/#faire-de-vrais-tests","title":"Faire de vrais tests","text":"<p>il faut faire des environnements de test r\u00e9aliste en utilisant de vrais donn\u00e9es et mod\u00e8les d'acc\u00e8s pour voir quelle BDD est repondras au mieux a notre besion.</p>"},{"location":"archi/sujets-2324/#la-migration","title":"La migration","text":"<p>Aux moment de migrer il faudras le faire service par service et tester tout du long. cela pour verifier que la nouvelle BDD seras meilleur que l'ancienne</p>"},{"location":"archi/sujets-2324/#les-cdns-lucas","title":"Les CDNs (Lucas)","text":"<p>Source</p> <p></p>"},{"location":"archi/sujets-2324/#jwt-jsonwebtoken-thomas","title":"JWT (JsonWebToken) (Thomas)","text":""},{"location":"archi/sujets-2324/#quest-quun-jwt","title":"Qu'est qu'un JWT ?","text":"<p>Une methode qui permet de transmettre des informations entre plusieurs parties sous formes d'objet JSON</p>"},{"location":"archi/sujets-2324/#structure-du-jwt","title":"Structure du JWT","text":"<ul> <li>Header</li> <li>Payload</li> <li>Signature</li> </ul> <p>Tous ces champs sont en base64 et separ\u00e9 par des points</p>"},{"location":"archi/sujets-2324/#structure-du-header","title":"Structure du Header","text":"<ul> <li>Type de token (en l'ocuurence JWT)</li> <li>Algorithme utilis\u00e9 (SHA256, RSA, HMAC, ...)</li> </ul>"},{"location":"archi/sujets-2324/#structure-du-payload","title":"Structure du Payload","text":"<ul> <li>Tout les claims dont nous avons besoin (En general, notre user et quelques donn\u00e9es necessaires)(Trois types de claim : Public, Private et Registered)</li> </ul>"},{"location":"archi/sujets-2324/#structure-de-la-signature","title":"Structure de la Signature","text":"<ul> <li>2 types de signature : Sym\u00e9trique et Asym\u00e9trique</li> </ul>"},{"location":"archi/sujets-2324/#signature-symetrique-une-cle-privee-est-connu-et-partage-entre-lemetteur-et-le-receveur-lemetteur-signe-avec-cette-cle-et-le-receveur-valide-avec-cette-meme-cle-hmac-hs256-la-signature-symetrique-est-rapide-et-simple-mais-induit-le-partage-de-la-cle-privee","title":"Signature sym\u00e9trique : Une cl\u00e9 priv\u00e9e est connu et partag\u00e9 entre l'\u00e9metteur et le receveur, l'\u00e9metteur signe avec cette cl\u00e9 et le receveur valide avec cette meme cl\u00e9. (HMAC, HS256). La signature sym\u00e9trique est rapide et simple mais induit le partage de la cl\u00e9 priv\u00e9e","text":""},{"location":"archi/sujets-2324/#signature-asymetrique-une-cle-prive-est-detenu-par-lemetteur-seulement-avec-laquelle-il-signe-une-cle-publique-est-envoye-au-receveur-avec-le-token-signe-et-le-receveur-valide-la-jwt-avec-la-cle-publique-la-signature-asymetrique-evite-le-partage-de-la-cle-privee-mais-est-plus-longue-en-contrepartie","title":"Signature asym\u00e9trique : Une cl\u00e9 priv\u00e9 est d\u00e9tenu par l'\u00e9metteur seulement avec laquelle il signe. Une cl\u00e9 publique est envoy\u00e9 au receveur avec le token sign\u00e9 et le receveur valide la jwt avec la cl\u00e9 publique. La signature asym\u00e9trique evite le partage de la cl\u00e9 priv\u00e9e mais est plus longue en contrepartie","text":""},{"location":"archi/sujets-2324/#utilisation-des-jwt","title":"Utilisation des JWT","text":"<ul> <li>Authentification</li> <li>Autorisation</li> <li>Echange d'informations</li> </ul>"},{"location":"archi/sujets-2324/#exemple-dutilisation-dun-jwt","title":"Exemple d'utilisation d'un JWT","text":"<ul> <li>Le user se log</li> <li>Le serveur valide le login puis cr\u00e9e un token sign\u00e9 avec les details du user qu'il renvoie \u00e0 celui-ci</li> <li>Le user l'utilise pour acceder au diverses ressources en le mettant dans le HTTP Header</li> </ul>"},{"location":"archi/sujets-2324/#cas-dutilisation","title":"Cas d'utilisation","text":"<ul> <li>OAuth2</li> <li>OpenID</li> </ul>"},{"location":"archi/sujets-2324/#cas-ou-le-jwt-nest-pas-recommande","title":"Cas o\u00f9 le JWT n'est pas recommand\u00e9","text":"<ul> <li>Partage de donn\u00e9es sensibles</li> <li>Gerer les sessions utilisateurs(car un JWT est stateless donc revoquer un acces peu etre compliqu\u00e9)</li> </ul>"},{"location":"archi/sujets-2324/#vulnerabilites-du-jwt","title":"Vulnerabilit\u00e9s du JWT","text":"<ul> <li>Token hijacking pour imiter un utilisateur</li> <li>Cryptographic weakness si l'algo de hash est faible. Un brute force pourrait crack la signature du token</li> </ul>"},{"location":"archi/sujets-2324/#pour-reduire-les-risques","title":"Pour r\u00e9duire les risques","text":"<ul> <li>Utiliser des temps d'expiration rapide si possible</li> <li>Utiliser une signature forte</li> <li>Stocker les tokens et invalidez les tokens qui ont fuit\u00e9</li> </ul>"},{"location":"archi/sujets-2324/#avantages","title":"Avantages","text":"<ul> <li>Pas d'enregistrement n\u00e9cessaires c\u00f4t\u00e9 serveur</li> <li>Ind\u00e9pendant</li> </ul>"},{"location":"archi/sujets-2324/#inconvenient","title":"Inconvenient","text":"<ul> <li>Vulnerable au vol car peut donner un acces complet au ressources</li> <li>Performance d\u00e9grad\u00e9 si le payload est trop volumineux</li> </ul>"},{"location":"archi/sujets-2324/#resume","title":"R\u00e9sum\u00e9","text":"<ul> <li>Les JWTs permettent l'authentification, l'autorisation et l'\u00e9change d'informations</li> </ul>"},{"location":"archi/sujets-vrac/","title":"Technologies en vrac","text":""},{"location":"archi/sujets-vrac/#technologies-en-vrac","title":"Technologies en vrac","text":"<p>Afin de proposer une bonne architecture, il est utile d'avoir un bon \u00e9tat de l'art. Une ressource qui nous aide \u00e0 cela est le site bytebytego.com et plus particuli\u00e8rement leur cha\u00eene YouTube</p>"},{"location":"archi/sujets-vrac/#quelques-technologies","title":"Quelques technologies","text":"Technology Description Cas d'usage Alternatives Liens Kafka Plateforme distribu\u00e9e de gestion de flux d'\u00e9v\u00e8nement Communication temps r\u00e9el, Collecte de logs Technologies de type message queue (Rabbit MQ, Confluent) System Design: Why is Kafka so Popular? Elastic Suite d'outils elastic search pour faire de la recherche sur des donn\u00e9es Recherche dans les logs, recherche temps r\u00e9el Datadogs, etc. Kibana Outils de visualisatiob de donn\u00e9es (dashboard) Analyse de donn\u00e9es temps r\u00e9el, surveillance de logs Prometheus, etc. Flink Moteur de traitement flux \u00e0 haut d\u00e9bit et faible latence Traitement temps r\u00e9el sur de gros volumes de donn\u00e9es (optimisation des r\u00e9sultats de recherche en temps r\u00e9el)  (exemples)"},{"location":"archi/sujets-vrac/#fonctionnement-de-quelques-systemes","title":"Fonctionnement de quelques syst\u00e8mes","text":"<ul> <li>Live streaming</li> </ul>"},{"location":"archi/sujets-vrac/#quelques-concepts","title":"Quelques concepts","text":"<ul> <li>IaaS/PaaS/SaaS </li> </ul>"},{"location":"archi/sujets-vrac/#ressources","title":"Ressources","text":"<ul> <li>System Design PDFs</li> <li>Le pdf en question (Si le lien ne march pas, essayer depuis le lien di-dessus)</li> </ul>"},{"location":"archi/2425/","title":"Accueil Veille 2425","text":""},{"location":"archi/2425/#accueil-veille-2425","title":"Accueil Veille 2425","text":"<p>Vous pouvez consulter chaque sujet depuis le menu de navigation \u00e0 gauche.</p>"},{"location":"archi/2425/adr/","title":"Les ADR","text":""},{"location":"archi/2425/adr/#les-adr","title":"Les ADR","text":""},{"location":"archi/2425/adr/#definitions","title":"D\u00e9finitions","text":"<p>Un AD (Architectural Decision) est un choix de design justifi\u00e9 qui r\u00e9pond \u00e0 un besoin fonctionnel ou non qui, dans l'architecture du projet est tr\u00e8s important.</p> <p>Un ADR (Architectural Decision Records) sert \u00e0 expliquer le raisonnement derri\u00e8re un AD. Il explique pourquoi le choix a \u00e9t\u00e9 fait, quelles sont les raisons, les int\u00e9r\u00eats ou non et les cons\u00e9quences de ce choix sur le projet.</p> <p>Le but de l'ADR va donc \u00eatre de documenter cette d\u00e9cision, et ainsi de montrer que toute l'\u00e9quipe a accept\u00e9 ce choix.</p> <p>L'ensemble des ADR constitue un decision log. </p> <p>Ce decision log va \u00eatre stock\u00e9 et \u00e9crit en Markdown dans le m\u00eame repo que le code, afin d'avoir une proximit\u00e9 entre les choix d'architectures et le code pour les \u00e9quipes de d\u00e9veloppement.</p> <p>L'int\u00e9r\u00eat d'un ADR est qu'il ne faut pas forc\u00e9ment \u00e9norm\u00e9ment de connaissances en architecture logicielle, il est possible d'expliquer simplement la d\u00e9cision sans avoir de termes techniques. Evidemment, les personnes plus exp\u00e9riment\u00e9es vont quand m\u00eame pouvoir \u00e9crire un ADR plus complet s'ils le souhaitent.</p>"},{"location":"archi/2425/adr/#comment-ecrire-un-adr","title":"Comment \u00e9crire un ADR?","text":"<p>Un template d'ADR est souvent bas\u00e9 sur la m\u00eame structure : </p> <p>Contexte - D\u00e9cision - Cons\u00e9quences</p> <ul> <li> <p>Le contexte d\u00e9crit les circonstances quelconques, que ce soit technique, politique, sociales ou purement pour le business qui influence les d\u00e9cisions dans le design du projet.</p> </li> <li> <p>La d\u00e9cision explique bri\u00e8vement le choix qui a \u00e9t\u00e9 fait pour r\u00e9pondre au contexte, en donnant ou non la liste de choix qui ont \u00e9t\u00e9 \u00e9cart\u00e9s.</p> </li> <li> <p>Enfin, on expliquera les cons\u00e9quences de ce choix, qu'elles soient positives ou n\u00e9gatives, et les pr\u00e9dictions qui suivront ce choix.</p> </li> </ul>"},{"location":"archi/2425/adr/#exemple-1","title":"Exemple 1 :","text":"<p>Imaginons une situation : </p> <p>Nous avons une \u00e9quipe de d\u00e9veloppeurs qui doivent rendre une application web dans des d\u00e9lais tr\u00e8s faibles. Ils doivent faire un choix de framework afin de pouvoir rendre leur application dans les d\u00e9lais.</p> <p>Leur ADR va ressembler \u00e0 :</p> <ul> <li> <p>Dans le cadre d'un projet pour un client, nous devons cr\u00e9er une application web, mais nous rencontrons des probl\u00e8mes dans les d\u00e9lais. </p> </li> <li> <p>Nous avons d\u00e9cid\u00e9 d'utiliser le framework Angular, en \u00e9cartant les framework Vue et Next </p> </li> <li> <p>Afin de pouvoir rendre rapidement notre application, en ayant des fonctionnalit\u00e9s comme l'architecture MVC et le MEAN stack, en acceptant de futurs probl\u00e8mes de mises \u00e0 jours de versions ou encore le fait que le contenu soit souvent client-side.</p> </li> </ul>"},{"location":"archi/2425/adr/#exemple-2","title":"Exemple 2 :","text":"<p>Si on continue dans ce projet, peut-\u00eatre que le choix de BDD avec MongoDB de base n'est pas le meilleur, surtout que le client souhaite stocker des donn\u00e9es qui sont relatives entre elles.</p> <p>Nous aurons donc un ADR plus simple.</p> <ul> <li> <p>Dans le cadre du projet pour le m\u00eame client, nous devons choisir une BDD, en sachant que le client veut stocker des donn\u00e9es qui sont en relations entre elles.</p> </li> <li> <p>Nous avons d\u00e9cid\u00e9 d'utiliser PostgresQL</p> </li> <li> <p>Car cela permet de g\u00e9rer des donn\u00e9es relationnelles et est tr\u00e8s stable, en acceptant un manque de scalabilit\u00e9 horizontale et de devoir \u00e9ventuellement sharder la base de donn\u00e9es.</p> </li> </ul>"},{"location":"archi/2425/cloud_vs_onpremise/","title":"Cloud vs On-Premise","text":""},{"location":"archi/2425/cloud_vs_onpremise/#cloud-vs-on-premise","title":"Cloud vs On-Premise","text":"<p>Que choisir entre le Cloud et l'On-Premise ? Quels sont les avantages et les inconv\u00e9nients de chacun ? Quels sont les crit\u00e8res \u00e0 prendre en compte pour choisir entre le Cloud et l'On-Premise ?</p>"},{"location":"archi/2425/cloud_vs_onpremise/#cest-quoi","title":"C'est quoi ?","text":""},{"location":"archi/2425/cloud_vs_onpremise/#cloud","title":"Cloud","text":"<p>Le cloud a vu le jour en 2002 quand Amazon a d\u00e9cid\u00e9 de louer ses infrastructures/ressources \u00e0 d'autres entreprises. Depuis, le cloud a \u00e9volu\u00e9 et est devenu un outil incontournable pour les entreprises.</p> <p>Une solution d\u00eete \"cloud\" est une solution qui est h\u00e9berg\u00e9e sur des serveurs distants, et donc accessible via Internet. Les serveurs sont g\u00e9r\u00e9s par un fournisseur externe, qui s'occupe de la maintenance, de la mise \u00e0 jour, de la s\u00e9curit\u00e9, etc...</p>"},{"location":"archi/2425/cloud_vs_onpremise/#on-premise","title":"On-Premise","text":"<p>Contrairement \u00e0 une solution cloud, une solution on-premise est h\u00e9berg\u00e9e sur une infrastructure locale et install\u00e9e sur les postes de travail de l'entreprise.</p>"},{"location":"archi/2425/cloud_vs_onpremise/#avantages-et-inconvenients","title":"Avantages et inconv\u00e9nients","text":"Avantages Cloud On-Premise Co\u00fbt initial X - Co\u00fbt sur le long terme - X Scalabilit\u00e9 X - Performance pr\u00e9visible - X Flexibilit\u00e9 X - Accessibilit\u00e9 X - S\u00e9curit\u00e9 - X Maintenance X - Choix des technos - X <ul> <li>Les co\u00fbts initial et de maintenance sont plus \u00e9lev\u00e9s pour une solution on-premise. C'est un co\u00fbt qu'une petite bo\u00eete ne peut pas forc\u00e9ment se permettre. Cependant, un service cloud s'utilise g\u00e9n\u00e9ralement sous forme d'abonnement, ce qui peut revenir plus cher sur le long terme.</li> <li>Il y a ce souci de scalabilit\u00e9, qui est plus facile \u00e0 g\u00e9rer dans le cloud. Le scaling pour une solution on-premise demande une bonne pr\u00e9dicition des besoins futurs, et peut \u00eatre co\u00fbteux si mal estim\u00e9.</li> <li>La performance est plus pr\u00e9visible en on-premise, car l'entreprise a un contr\u00f4le direct sur le hardware et les r\u00e9glages r\u00e9seau.</li> <li>Le cloud est plus flexible, car il est possible de changer rapidement les ressources pour s'adapter \u00e0 la demande.</li> <li>Le cloud est plus accessible car les services cloud sont accessibles de partout avec une connexion internet.</li> <li>Les donn\u00e9es sont plus s\u00e9curis\u00e9es en on-premise, car elles sont sous le contr\u00f4le direct de l'entreprise. Stocker ses donn\u00e9es sur le cloud revient \u00e0 placer sa confiance dans le fournisseur de cloud.</li> <li>La maintenance est plus compliqu\u00e9e en on-premise, car il faut constamment g\u00e9rer et maintenir le mat\u00e9riel en bon \u00e9tat, mettre \u00e0 jour le logiciel, ajouter des correctifs de s\u00e9curit\u00e9, et r\u00e9soudre les probl\u00e8mes. Cela n\u00e9cessite du personnel IT qualifi\u00e9, ce qui peut augmenter les co\u00fbts et l'utilisation des ressources. En cloud, c'est le fournisseur qui s'occupe de tout \u00e7a.</li> <li>Pour un service cloud, les technologies utilis\u00e9es sont restreintes par le fournisseur. Vous ne pouvez pas utiliser un langage que le fournisseur ne supporte pas.</li> </ul>"},{"location":"archi/2425/kafka/","title":"Pr\u00e9sentation de Apache Kafka","text":""},{"location":"archi/2425/kafka/#presentation-de-apache-kafka","title":"Pr\u00e9sentation de Apache Kafka","text":""},{"location":"archi/2425/kafka/#introduction","title":"Introduction","text":"<p>Apache Kafka est une plateforme de streaming distribu\u00e9e con\u00e7ue pour g\u00e9rer des flux de donn\u00e9es en temps r\u00e9el, avec une grande scalabilit\u00e9 et fiabilit\u00e9. Elle est largement utilis\u00e9e pour connecter des syst\u00e8mes, traiter des donn\u00e9es en temps r\u00e9el et g\u00e9rer des pipelines de donn\u00e9es.</p> <ul> <li>Cr\u00e9ateurs : LinkedIn (2010), open-sourc\u00e9 en 2011 sous l\u2019Apache Software Foundation.</li> <li>Langages : Principalement \u00e9crit en Java et Scala.</li> </ul>"},{"location":"archi/2425/kafka/#architecture-kafka","title":"Architecture Kafka","text":"<p>Voici un sch\u00e9ma simplifi\u00e9 du fonctionnement de Kafka :</p> <pre><code>         Producer ---&gt; Broker/Topic/Partition ---&gt; Consumer\n</code></pre> <ul> <li>Producteurs (Producers) publient des messages dans des topics.</li> <li>Partitions stockent les messages de mani\u00e8re ordonn\u00e9e.</li> <li>Consommateurs (Consumers) lisent les messages selon leur offset.</li> </ul> <p></p> <p>Kafka garantit que chaque partition d\u2019un topic est attribu\u00e9e \u00e0 un broker unique.</p>"},{"location":"archi/2425/kafka/#pourquoi-kafka","title":"Pourquoi Kafka ?","text":"<p>Kafka est utilis\u00e9 par plus de 100 000 organisations dans le monde et b\u00e9n\u00e9ficie du soutien d'une communaut\u00e9 florissante de d\u00e9veloppeurs professionnels, qui font constamment progresser ensemble l'\u00e9tat de l'art en mati\u00e8re de traitement de flux. En raison du d\u00e9bit \u00e9lev\u00e9, de la tol\u00e9rance aux pannes, de la r\u00e9silience et de l'\u00e9volutivit\u00e9 de Kafka, il existe de nombreux cas d'utilisation dans presque tous les secteurs - de la banque et de la d\u00e9tection des fraudes aux transports et \u00e0 l'IoT</p>"},{"location":"archi/2425/kafka/#cas-dutilisation-dapache-kafka","title":"Cas d'utilisation d'Apache Kafka","text":"<p>Kafka est tr\u00e8s polyvalent et utilis\u00e9 dans de nombreux secteurs. Voici des cas d'utilisation d\u00e9taill\u00e9s :</p>"},{"location":"archi/2425/kafka/#1-messagerie-entre-microservices","title":"1. Messagerie entre microservices","text":"<ul> <li>Kafka agit comme un syst\u00e8me de messagerie distribu\u00e9, permettant \u00e0 diff\u00e9rents microservices de communiquer de mani\u00e8re asynchrone.</li> <li>Avantages :</li> <li>D\u00e9couplage des syst\u00e8mes.</li> <li>R\u00e9silience gr\u00e2ce \u00e0 la persistance des messages.</li> <li>Possibilit\u00e9 de relire les messages en cas d\u2019erreurs.</li> </ul> <p>Exemple : Dans une architecture de microservices e-commerce :   - Un service \"Commande\" publie un \u00e9v\u00e9nement lorsqu\u2019une commande est pass\u00e9e.   - Les services \"Stock\" et \"Exp\u00e9dition\" consomment cet \u00e9v\u00e9nement pour ajuster les stocks ou initier la livraison.</p>"},{"location":"archi/2425/kafka/#2-traitement-des-flux-de-donnees-en-temps-reel","title":"2. Traitement des flux de donn\u00e9es en temps r\u00e9el","text":"<ul> <li>Kafka peut analyser des donn\u00e9es en temps r\u00e9el gr\u00e2ce \u00e0 l\u2019outil Kafka Streams ou des plateformes tierces comme Apache Flink ou Spark Streaming.</li> <li>Utilis\u00e9 pour g\u00e9n\u00e9rer des tableaux de bord ou des alertes en temps r\u00e9el.</li> </ul> <p>Exemple : Surveillance bancaire.   - Analyse des transactions en temps r\u00e9el pour d\u00e9tecter des fraudes.   - G\u00e9n\u00e9ration d'alertes instantan\u00e9es en cas d\u2019activit\u00e9s suspectes.</p>"},{"location":"archi/2425/kafka/#3-centralisation-des-logs-log-aggregation","title":"3. Centralisation des logs (Log Aggregation)","text":"<ul> <li>Kafka est utilis\u00e9 pour centraliser les journaux d\u2019\u00e9v\u00e9nements d\u2019applications r\u00e9parties sur plusieurs serveurs.</li> <li>Cela facilite le monitoring et l\u2019analyse des performances du syst\u00e8me.</li> </ul>"},{"location":"archi/2425/kafka/#5-systemes-de-recommandations","title":"5. Syst\u00e8mes de recommandations","text":"<ul> <li>Kafka collecte des donn\u00e9es comportementales (clics, achats, etc.) en temps r\u00e9el pour alimenter des mod\u00e8les de recommandations.</li> </ul> <p>Exemple : Plateforme de streaming (comme Netflix).   - Les donn\u00e9es des utilisateurs (vid\u00e9os regard\u00e9es, pr\u00e9f\u00e9rences) sont collect\u00e9es via Kafka.   - Ces donn\u00e9es sont trait\u00e9es en temps r\u00e9el pour recommander du contenu pertinent.</p>"},{"location":"archi/2425/kafka/#6-ingestion-massive-de-donnees-iot","title":"6. Ingestion massive de donn\u00e9es IoT","text":"<ul> <li>Kafka g\u00e8re les flux massifs de donn\u00e9es provenant d\u2019appareils IoT.</li> <li>Les messages peuvent \u00eatre stock\u00e9s, trait\u00e9s en temps r\u00e9el, ou envoy\u00e9s \u00e0 des syst\u00e8mes d\u2019analyse.</li> </ul> <p>Exemple : Smart Cities.   - Kafka collecte les donn\u00e9es des capteurs (trafic, pollution, \u00e9clairage).   - Les donn\u00e9es sont analys\u00e9es en temps r\u00e9el pour optimiser la gestion urbaine.</p>"},{"location":"archi/2425/kafka/#7-streaming-de-donnees-pour-liaml","title":"7. Streaming de donn\u00e9es pour l\u2019IA/ML","text":"<ul> <li>Kafka est utilis\u00e9 pour fournir des donn\u00e9es continues aux mod\u00e8les d\u2019intelligence artificielle.</li> <li>Cela permet un entra\u00eenement ou une inf\u00e9rence en temps r\u00e9el.</li> </ul> <p>Exemple : Voitures autonomes.   - Kafka transmet les donn\u00e9es des capteurs embarqu\u00e9s vers des syst\u00e8mes d\u2019analyse en temps r\u00e9el.   - Ces donn\u00e9es alimentent des mod\u00e8les pour ajuster la conduite.</p>"},{"location":"archi/2425/kafka/#avantages-de-kafka","title":"Avantages de Kafka","text":"<ul> <li>Scalabilit\u00e9 massive : G\u00e8re des millions d\u2019\u00e9v\u00e9nements par seconde.</li> <li>Tol\u00e9rance aux pannes : R\u00e9plication des donn\u00e9es sur plusieurs brokers.</li> <li>Durabilit\u00e9 : Messages persistants m\u00eame apr\u00e8s leur consommation.</li> <li>Traitement en temps r\u00e9el : Id\u00e9al pour les analyses en direct et la d\u00e9tection d\u2019\u00e9v\u00e9nements.</li> </ul>"},{"location":"archi/2425/kafka/#limites-de-kafka","title":"Limites de Kafka","text":"<ul> <li>Complexit\u00e9 de configuration : N\u00e9cessite une expertise technique pour la mise en place.</li> <li>Gestion des partitions : Une mauvaise strat\u00e9gie peut limiter les performances.</li> <li>Co\u00fbts \u00e9lev\u00e9s : L\u2019infrastructure distribu\u00e9e implique un investissement mat\u00e9riel important.</li> </ul>"},{"location":"archi/2425/kafka/#references","title":"R\u00e9f\u00e9rences","text":"<ul> <li>Site officiel d'Apache Kafka</li> </ul>"},{"location":"archi/2425/kube/","title":"Implication d'une Infrastructure AKS dans l'Architecture d'un Logiciel","text":""},{"location":"archi/2425/kube/#implication-dune-infrastructure-aks-dans-larchitecture-dun-logiciel","title":"Implication d'une Infrastructure AKS dans l'Architecture d'un Logiciel","text":""},{"location":"archi/2425/kube/#introduction-a-aks","title":"Introduction \u00e0 AKS","text":"<p>AKS (Azure Kubernetes Service) est une solution de gestion de conteneurs propos\u00e9e par Microsoft Azure. Il simplifie le d\u00e9ploiement et la gestion de clusters Kubernetes, permettant de g\u00e9rer des applications conteneuris\u00e9es de mani\u00e8re scalable et r\u00e9siliente. </p>"},{"location":"archi/2425/kube/#implications-daks-dans-larchitecture-logicielle","title":"Implications d'AKS dans l'Architecture Logicielle","text":""},{"location":"archi/2425/kube/#1-couches-logiques-et-aks","title":"1. Couches Logiques et AKS","text":"<ul> <li>Infrastructure as Code (IaC) : AKS favorise l'automatisation et la reproductibilit\u00e9 des d\u00e9ploiements.</li> <li>Container-Based Architecture : AKS centralise la gestion des conteneurs (Docker, etc.) pour les microservices.</li> </ul>"},{"location":"archi/2425/kube/#2-modele-c4-et-aks","title":"2. Mod\u00e8le C4 et AKS","text":"<p>Lors de la sch\u00e9matisation via le mod\u00e8le C4, AKS influence les vues suivantes :</p>"},{"location":"archi/2425/kube/#diagramme-de-contexte","title":"Diagramme de Contexte","text":"<ul> <li>Positionnement : AKS appara\u00eet comme une plateforme g\u00e9rant l'ensemble des conteneurs. Elle connecte l'application au cloud Azure et \u00e0 ses services.</li> <li>Exemple :<ul> <li>Le syst\u00e8me d'AKS peut \u00eatre repr\u00e9sent\u00e9 comme un n\u0153ud central assurant l'ex\u00e9cution des microservices.</li> <li>Les utilisateurs acc\u00e8dent \u00e0 l'application via des composants externes tels que des API Gateway.</li> </ul> </li> </ul>"},{"location":"archi/2425/kube/#diagramme-conteneur","title":"Diagramme Conteneur","text":"<ul> <li>Organisation des Conteneurs :<ul> <li>Les microservices (conteneurs Docker) sont sch\u00e9matis\u00e9s comme des entit\u00e9s s'ex\u00e9cutant au sein du cluster AKS.</li> <li>AKS est un \"node pool\" qui orchestre l'allocation de ressources.</li> </ul> </li> <li>Communication :<ul> <li>Les services communiquent via des ingress controllers ou des services internes (ClusterIP, LoadBalancer).</li> </ul> </li> </ul>"},{"location":"archi/2425/kube/#diagramme-composant","title":"Diagramme Composant","text":"<ul> <li>D\u00e9ploiement de Composants :<ul> <li>Chaque composant du logiciel peut correspondre \u00e0 un pod d\u00e9ploy\u00e9 dans AKS.</li> <li>Les interconnexions entre composants sont g\u00e9r\u00e9es par le r\u00e9seau interne Kubernetes (CNI).</li> </ul> </li> </ul>"},{"location":"archi/2425/kube/#diagramme-code","title":"Diagramme Code","text":"<ul> <li>Abstraction via Helm Charts ou Manifestes YAML :<ul> <li>Les d\u00e9tails du code source pour le d\u00e9ploiement sont d\u00e9finis via des fichiers de configuration sp\u00e9cifiques.</li> <li>Ces fichiers d\u00e9taillent l'allocation des ressources, les secrets et les r\u00e8gles de mise \u00e0 l'\u00e9chelle.</li> </ul> </li> </ul>"},{"location":"archi/2425/kube/#3-avantages-dans-une-architecture-aks","title":"3. Avantages dans une Architecture AKS","text":"<ul> <li>Scalabilit\u00e9 : Les microservices peuvent \u00eatre mis \u00e0 l'\u00e9chelle dynamiquement.</li> <li>R\u00e9silience : Redondance et tol\u00e9rance aux pannes offertes par Kubernetes.</li> <li>S\u00e9paration des pr\u00e9occupations : Simplifie le d\u00e9ploiement gr\u00e2ce \u00e0 la gestion isol\u00e9e des microservices.</li> </ul>"},{"location":"archi/2425/kube/#points-a-considerer-pour-la-schematisation","title":"Points \u00e0 Consid\u00e9rer pour la Sch\u00e9matisation","text":"<ul> <li>Inclure les \u00e9l\u00e9ments suivants :<ul> <li>Ingress/Load Balancer : Point d'entr\u00e9e pour les utilisateurs externes.</li> <li>Node Pools : Division des n\u0153uds en groupes homog\u00e8nes (CPU/GPU).</li> <li>Pods : Repr\u00e9sentation des instances de chaque composant.</li> <li>Volumes Persistants : Stockage pour les donn\u00e9es critiques.</li> </ul> </li> <li>Montrer les liens avec les services Azure externes (Azure SQL, Storage, etc.).</li> </ul>"},{"location":"archi/2425/kube/#conclusion","title":"Conclusion","text":"<p>L'utilisation d'AKS impacte fortement l'architecture, en particulier dans les syst\u00e8mes complexes adoptant des microservices. Une mod\u00e9lisation efficace avec le mod\u00e8le C4 permet de mieux comprendre les interactions entre les couches logiques et de garantir une architecture robuste et \u00e9volutive.</p>"},{"location":"archi/2425/oidc/","title":"OAuth et OpenID Connect (OIDC)","text":""},{"location":"archi/2425/oidc/#oauth-et-openid-connect-oidc","title":"OAuth et OpenID Connect (OIDC)","text":"<p>OAuth et OpenID Connect (OIDC) sont des protocoles standardis\u00e9s qui jouent des r\u00f4les compl\u00e9mentaires dans les architectures de s\u00e9curit\u00e9 des applications. </p> <ul> <li>OAuth est utilis\u00e9 pour g\u00e9rer l'autorisation, permettant \u00e0 une application d'acc\u00e9der \u00e0 des ressources prot\u00e9g\u00e9es au nom d'un utilisateur. </li> <li>OIDC ajoute une couche d'authentification, permettant de v\u00e9rifier l'identit\u00e9 d'un utilisateur de mani\u00e8re s\u00e9curis\u00e9e.</li> </ul>"},{"location":"archi/2425/oidc/#oauth-pour-lautorisation","title":"OAuth : Pour l\u2019autorisation","text":"<p>OAuth est con\u00e7u pour permettre \u00e0 une application d'agir au nom d'un utilisateur sans conna\u00eetre directement ses identifiants. Le client (application) obtient un jeton d'acc\u00e8s, qui est utilis\u00e9 pour acc\u00e9der aux ressources de l'utilisateur h\u00e9berg\u00e9es sur un serveur distant.</p>"},{"location":"archi/2425/oidc/#exemple-de-cas-dutilisation","title":"Exemple de cas d'utilisation :","text":"<ol> <li>Vous connectez une application tierce \u00e0 votre Google Drive pour lire vos fichiers.</li> <li>Vous donnez explicitement \u00e0 l'application l'autorisation d'acc\u00e9der \u00e0 vos fichiers, sans partager vos identifiants Google.</li> <li>L'application re\u00e7oit un jeton d'acc\u00e8s limit\u00e9, lui permettant d'effectuer les actions autoris\u00e9es.</li> </ol> <p>Remarque : OAuth ne garantit pas que l'application connaisse votre identit\u00e9 \u2014 son seul but est de fournir un moyen s\u00e9curis\u00e9 d\u2019acc\u00e9der \u00e0 des ressources.</p>"},{"location":"archi/2425/oidc/#oidc-pour-lauthentification","title":"OIDC : Pour l\u2019authentification","text":"<p>OIDC ajoute une couche d'authentification au protocole OAuth. En plus d'un jeton d'acc\u00e8s, il fournit un ID Token. Ce jeton est un objet sign\u00e9 num\u00e9riquement (JSON Web Token - JWT) contenant des informations sur l'utilisateur, comme son nom, son email et un identifiant unique.</p> <p>OIDC permet donc de r\u00e9pondre \u00e0 la question : \"Qui est l'utilisateur connect\u00e9 ?\", en toute s\u00e9curit\u00e9, en fournissant des informations v\u00e9rifi\u00e9es par un serveur d'identit\u00e9.</p>"},{"location":"archi/2425/oidc/#synthese","title":"Synth\u00e8se","text":"Aspect OAuth OIDC Objectif principal Autoriser l'acc\u00e8s \u00e0 des ressources prot\u00e9g\u00e9es. Authentifier un utilisateur. Focus Autorisation (Qu'est-ce que le client peut faire ?) Authentification (Qui est connect\u00e9 ?) Jetons utilis\u00e9s Jeton d'acc\u00e8s (Access Token). ID Token (JWT) + Jeton d'acc\u00e8s. Exemple d'utilisation Donner acc\u00e8s \u00e0 une application tierce \u00e0 vos fichiers. Se connecter \u00e0 une application avec Google."},{"location":"archi/2425/saas/","title":"Le mod\u00e8le SAAS","text":""},{"location":"archi/2425/saas/#le-modele-saas","title":"Le mod\u00e8le SAAS","text":"<p>Le Software as a Service (SaaS) est un mod\u00e8le de distribution de logiciels o\u00f9 les applications sont h\u00e9berg\u00e9es par un fournisseur de services et accessibles aux utilisateurs via Internet. Cela a pour but d'eviter aux clients d'installer et de maintenir des logiciels sur leurs propres serveurs ou appareils, simplifiant ainsi la gestion et r\u00e9duisant les co\u00fbts li\u00e9s \u00e0 l'infrastructure.</p> <p>Le SaaS est fait partie du cloud computing. Celui-ci comprend trois mod\u00e8les de services :</p> <ul> <li>Infrastructure as a Service (IaaS) : Fournit des ressources informatiques virtualis\u00e9es (serveurs, stockage, r\u00e9seaux) sur Internet.</li> <li>Platform as a Service (PaaS) : Offre une plateforme compl\u00e8te pour le d\u00e9veloppement, le d\u00e9ploiement et la gestion d'applications sans se soucier de l'infrastructure.</li> <li>Software as a Service (SaaS) : Propose des applications logicielles compl\u00e8tes accessibles via Internet, sans n\u00e9cessiter d'installation locale.</li> </ul> <p></p>"},{"location":"archi/2425/saas/#le-modele-economique","title":"Le mod\u00e8le \u00e9conomique","text":"<p>Les applications SaaS reposent majoritairement sur des mod\u00e8les de souscription. Contrairement \u00e0 une licence perp\u00e9tuelle, ce mod\u00e8le de distribution logicielle relie chaque compte \u00e0 une souscription qui garantit l'acc\u00e8s au SaaS pendant une p\u00e9riode donn\u00e9e, g\u00e9n\u00e9ralement sur une base annuelle ou mensuelle.  </p> <p>Generalement les entreprises choisissent  l'un des deux mod\u00e8les de d\u00e9ploiement suivant : </p> <ul> <li>Dans leur propre datacenter</li> <li>Ou via un fournisseur de services cloud public (par exemple, AWS, Azure ou IBM Cloud) qui s'occupe de la gestion de l'environnement cloud sur lequel la solution SaaS est h\u00e9berg\u00e9e. </li> </ul>"},{"location":"archi/2425/saas/#larchitecture-generale-du-saas-multi-tenant-multi-locataire","title":"L'architecture g\u00e9n\u00e9rale du SaaS : Multi-tenant (Multi-locataire)","text":"<p>Dans une architecture multi-tenant, une seule instance de l'application sert \u00e0 plusieurs clients. Chaque client partage les m\u00eames ressources, mais les donn\u00e9es et les configurations sont isol\u00e9es les unes des autres pour garantir la confidentialit\u00e9 et la s\u00e9curit\u00e9 .</p> <p>L'utilisateur loue donc l'infrastructure peut y acc\u00e9der au moyen d'une API ou d'un tableau de bord. </p> <ul> <li>Partage des ressources : Optimise l'utilisation des ressources en r\u00e9partissant les co\u00fbts entre les locataires.</li> <li>Isolation des donn\u00e9es : Les donn\u00e9es de chaque client sont s\u00e9par\u00e9es logiquement pour \u00e9viter tout acc\u00e8s non autoris\u00e9.</li> </ul> <p></p>"},{"location":"archi/2425/saas/#exemples-darchitecture-saas","title":"Exemples d'architecture SaaS","text":""},{"location":"archi/2425/saas/#google-workspace","title":"Google Workspace","text":"<ul> <li>Fournit une suite compl\u00e8te d'outils de productivit\u00e9 tels que Gmail, Google Docs, Sheets, Slides et Google Meet, accessibles via le cloud.</li> <li>Collaboration en temps r\u00e9el : Permet \u00e0 plusieurs utilisateurs de travailler simultan\u00e9ment sur le m\u00eame document, favorisant la collaboration et l'efficacit\u00e9.</li> <li>Architecture multi-locataire : Les ressources sont partag\u00e9es entre les utilisateurs tout en garantissant la s\u00e9curit\u00e9 et l'isolation des donn\u00e9es de chaque client.</li> <li>\u00c9cosyst\u00e8me int\u00e9gr\u00e9 : Offre une int\u00e9gration transparente avec d'autres services Google et des applications tierces via des API et des extensions.</li> <li>S\u00e9curit\u00e9 et conformit\u00e9 : Mise en \u0153uvre de mesures de s\u00e9curit\u00e9 avanc\u00e9es, y compris l'authentification \u00e0 deux facteurs, la gestion des appareils mobiles et le chiffrement des donn\u00e9es, tout en respectant les normes de conformit\u00e9 internationales.</li> </ul>"},{"location":"archi/2425/structurizr/","title":"Pr\u00e9sentation de Structurizr","text":""},{"location":"archi/2425/structurizr/#presentation-de-structurizr","title":"Pr\u00e9sentation de Structurizr","text":""},{"location":"archi/2425/structurizr/#1-introduction-a-structurizr","title":"1. Introduction \u00e0 Structurizr","text":""},{"location":"archi/2425/structurizr/#quest-ce-que-structurizr","title":"Qu'est-ce que Structurizr ?","text":"<p>Structurizr est une plateforme con\u00e7ue pour cr\u00e9er, g\u00e9rer et partager des diagrammes d'architecture logicielle. Contrairement aux outils traditionnels comme Visio ou Lucidchart, Structurizr adopte une approche \"Architecture as Code\".</p>"},{"location":"archi/2425/structurizr/#origine","title":"Origine","text":"<ul> <li>Cr\u00e9ateur : Simon Brown, consultant en architecture logicielle et auteur du mod\u00e8le C4.</li> <li>Date de cr\u00e9ation : 2014.</li> <li>Motivation :<ul> <li>R\u00e9pondre au besoin d'avoir des diagrammes pr\u00e9cis et \u00e0 jour directement issus du code source.</li> <li>R\u00e9duire l'\u00e9cart entre la documentation et l'impl\u00e9mentation r\u00e9elle.</li> <li>Faciliter la collaboration sur l'architecture logicielle.</li> </ul> </li> </ul>"},{"location":"archi/2425/structurizr/#pourquoi-structurizr","title":"Pourquoi Structurizr ?","text":"<ul> <li>G\u00e9n\u00e9ration de diagrammes \u00e0 jour.</li> <li>Documentation vivante et int\u00e9gr\u00e9e.</li> <li>Approche \"Architecture as Code\" pour une meilleure gestion versionn\u00e9e et automatisation.</li> </ul>"},{"location":"archi/2425/structurizr/#2-fonctionnalites-principales","title":"2. Fonctionnalit\u00e9s principales","text":""},{"location":"archi/2425/structurizr/#creation-de-diagrammes","title":"Cr\u00e9ation de diagrammes","text":"<p>Structurizr est optimis\u00e9 pour les diagrammes C4</p>"},{"location":"archi/2425/structurizr/#architecture-as-code","title":"Architecture as Code","text":"<ul> <li>D\u00e9finition d'architectures avec du code (Java, .NET, TypeScript, DSL).</li> <li>Avantages :<ul> <li>Reproductibilit\u00e9.</li> <li>Int\u00e9gration avec CI/CD.</li> <li>Versionnement des diagrammes.</li> </ul> </li> </ul>"},{"location":"archi/2425/structurizr/#affichages-et-visualisations","title":"Affichages et visualisations","text":"<ul> <li>Navigation interactive entre les niveaux de diagrammes.</li> <li>Styles configurables (layouts, th\u00e8mes, couleurs).</li> <li>Exportation en images ou formats web.</li> <li>Tree-views</li> <li>Interactive force-directed graphs</li> </ul>"},{"location":"archi/2425/structurizr/#documentation-integree","title":"Documentation int\u00e9gr\u00e9e","text":"<ul> <li>Support des ADR (Architecture Decision Records).</li> <li>Ajout de descriptions contextuelles aux diagrammes.</li> </ul>"},{"location":"archi/2425/structurizr/#3-alternatives","title":"3. Alternatives","text":"<ul> <li>PlantUML : G\u00e9n\u00e9ration de diagrammes textuels.</li> <li>Mermaid.js : Int\u00e9gr\u00e9 \u00e0 des plateformes comme GitHub.</li> </ul>"},{"location":"archi/2425/structurizr/#4-demonstration-avec-structurizr-lite","title":"4. D\u00e9monstration avec Structurizr-Lite","text":""},{"location":"archi/2425/structurizr/#objectifs","title":"Objectifs","text":"<ol> <li>Cr\u00e9er un projet Structurizr.</li> <li>G\u00e9n\u00e9rer un diagramme simple (exemple: diagramme de contexte).</li> <li>Naviguer entre les diff\u00e9rents niveaux de diagrammes.</li> <li>Pr\u00e9senter les possibilit\u00e9s d'exportation et l'int\u00e9gration avec la documentation.</li> </ol>"},{"location":"archi/2425/structurizr/#etapes-de-la-demo","title":"\u00c9tapes de la d\u00e9mo","text":""},{"location":"archi/2425/structurizr/#1-installation","title":"1. Installation","text":"<ul> <li>T\u00e9l\u00e9charger Structurizr Lite.</li> <li>Image Docker Structurizr Lite : <code>structurizr/lite</code>.</li> <li>Configurer un projet local avec un fichier <code>.dsl</code>.</li> </ul>"},{"location":"archi/2425/structurizr/#2-creation-dun-diagramme","title":"2. Cr\u00e9ation d'un diagramme","text":"<ul> <li>Lancer Structurizr-Lite et visualiser le diagramme.</li> </ul>"},{"location":"archi/2425/structurizr/#3-fonctionnalites","title":"3. Fonctionnalit\u00e9s","text":"<ul> <li>Ajouter des conteneurs ou composants au mod\u00e8le :</li> <li>Changer les styles ou layouts.</li> </ul>"},{"location":"archi/2425/structurizr/#4-lien-avec-les-adr-et-documentation","title":"4. Lien avec les ADR et documentation","text":"<ul> <li>Ajouter des fichiers markdown pour documenter les d\u00e9cisions d'architecture.</li> <li>Int\u00e9grer une vue combin\u00e9e (diagrammes et ADR).</li> </ul>"},{"location":"archi/2425/structurizr/#5-reverse-engineering","title":"5. Reverse engineering","text":"<p>Reverse Engineer Java</p>"},{"location":"archi/2425/structurizr/#5-structurizr-et-la-documentation-darchitecture","title":"5. Structurizr et la documentation d'architecture","text":""},{"location":"archi/2425/structurizr/#liens-avec-les-adr","title":"Liens avec les ADR","text":"<ul> <li>Structurizr peut int\u00e9grer des ADR pour relier les diagrammes aux d\u00e9cisions architecturales.</li> </ul>"},{"location":"archi/2425/structurizr/#documentation-vivante","title":"Documentation vivante","text":"<ul> <li>Structurizr g\u00e9n\u00e8re automatiquement une documentation en ligne.</li> <li>Toujours synchronis\u00e9 avec les mises \u00e0 jour du mod\u00e8le.</li> </ul>"},{"location":"archi/2425/unclebob/","title":"\ud83d\udc68\u200d\ud83d\udcbb Uncle Bob (Robert C. Martin)","text":""},{"location":"archi/2425/unclebob/#uncle-bob-robert-c-martin","title":"\ud83d\udc68\u200d\ud83d\udcbb Uncle Bob (Robert C. Martin)","text":""},{"location":"archi/2425/unclebob/#qui-est-uncle-bob","title":"\ud83e\uddd4 Qui est Uncle Bob ?","text":"<p>Robert C. Martin, surnomm\u00e9 Uncle Bob, est une figure embl\u00e9matique du d\u00e9veloppement logiciel moderne. Il est reconnu comme l\u2019un des pionniers dans la formalisation des bonnes pratiques de d\u00e9veloppement et la promotion de la qualit\u00e9 du code.</p>"},{"location":"archi/2425/unclebob/#contributions-principales","title":"\ud83c\udfc6 Contributions principales :","text":""},{"location":"archi/2425/unclebob/#1-auteur-de-livres-influents","title":"1. Auteur de livres influents :","text":"<ul> <li>Clean Code (2008) :      Une r\u00e9f\u00e9rence pour \u00e9crire du code clair et maintenable.</li> <li>The Clean Coder (2011):      Des conseils pour adopter une \u00e9thique professionnelle et programmation.</li> <li>Clean Architecture (2017) : Pr\u00e9sente des principes d'architecture     durable</li> </ul>"},{"location":"archi/2425/unclebob/#2-co-auteur-du-manifeste-agile","title":"2. Co-auteur du Manifeste Agile :","text":"<p>Uncle Bob est l\u2019un des 17 signataires du Manifeste Agile publi\u00e9 en 2001.</p>"},{"location":"archi/2425/unclebob/#3-createur-des-principes-solid","title":"3. Cr\u00e9ateur des principes SOLID :","text":"<p>Un ensemble de cinq principes fondamentaux pour concevoir des logiciels robustes et maintenables.</p>"},{"location":"archi/2425/unclebob/#4-createur-et-promoteur-de-la-clean-architecture","title":"4. Cr\u00e9ateur et promoteur de la Clean Architecture :","text":"<p>Uncle Bob a conceptualis\u00e9 la Clean Architecture, un ensemble de principes pour construire des syst\u00e8mes logiciels flexibles, \u00e9volutifs et faciles \u00e0 maintenir.</p>"},{"location":"archi/2425/unclebob/#les-principes-solid","title":"\u2699\ufe0f Les principes SOLID","text":"<p>Les principes SOLID, sont des lignes directrices pour structurer et organiser du code de mani\u00e8re robuste, \u00e9volutive et maintenable.</p>"},{"location":"archi/2425/unclebob/#signification-de-solid","title":"\ud83e\udde9 Signification de SOLID :","text":"<ol> <li>S - Responsabilit\u00e9 unique (Single Responsibility Principle) :</li> <li> <p>Chaque classe ou module doit avoir une seule responsabilit\u00e9</p> </li> <li> <p>O - Ouvert/ferm\u00e9 (Open/Closed Principle) :</p> </li> <li> <p>Un module doit \u00eatre ouvert \u00e0 l\u2019extension, mais ferm\u00e9 \u00e0 la modification</p> </li> <li> <p>L - Substitution de Liskov (Liskov Substitution Principle) :</p> </li> <li> <p>Les classes d\u00e9riv\u00e9es doivent pouvoir remplacer leurs classes parent sans alt\u00e9rer le comportement du programme.</p> <ul> <li>EX: Une instance de type T doit pouvoir \u00eatre remplac\u00e9e par une instance de type G, tel que G sous-type de T, sans que cela ne modifie la coh\u00e9rence du programme</li> </ul> </li> <li> <p>I - S\u00e9gr\u00e9gation des interfaces (Interface segregation principle) :</p> </li> <li> <p>Pr\u00e9f\u00e9rer utiliser plusieurs interface sp\u00e9cifique plutot qu'une seule interface. Il ne faut pas que les classes d\u00e9pendes de m\u00e9thodes qu'elles n'utilisent pas</p> </li> <li> <p>D - Inversion des d\u00e9pendances (Dependency inversion principle) :</p> </li> <li>il faut d\u00e9pendre des abstractions, pas des impl\u00e9mentations</li> </ol>"},{"location":"archi/2425/unclebob/#avantages-de-solid","title":"\ud83c\udfaf Avantages de SOLID :","text":"<ul> <li>Facilite la maintenance et l\u2019\u00e9volution du code.</li> <li>Encourage une conception modulaire et testable.</li> <li>R\u00e9duit la dette technique \u00e0 long terme.</li> </ul>"},{"location":"archi/2425/unclebob/#quest-ce-que-la-clean-architecture","title":"\ud83c\udfdb\ufe0f Qu'est-ce que la Clean Architecture ?","text":"<p>La Clean Architecture est une m\u00e9thode d'organisation du code logiciel en couches ind\u00e9pendantes</p>"},{"location":"archi/2425/unclebob/#objectifs","title":"\ud83c\udfaf Objectifs :","text":"<ol> <li>Ind\u00e9pendance des couches : </li> <li>Le domaine m\u00e9tier est isol\u00e9 des interfaces, bases de donn\u00e9es et frameworks.</li> <li>Ind\u00e9pendance vis-\u00e0-vis des technologies:     En d\u00e9couplant la logique m\u00e9tier des technologies utilis\u00e9es vous n\u2019\u00eates plus li\u00e9 \u00e0 des choix technologiques sp\u00e9cifiques</li> <li>Maintenance et \u00c9volution simplifi\u00e9es:     La clart\u00e9 et l\u2019organisation du code facilitent sa compr\u00e9hension et sa maintenance. Ajouter de nouvelles fonctionnalit\u00e9s ou modifier des comportements existants devient plus ais\u00e9</li> <li>S\u00e9curit\u00e9 renforc\u00e9e</li> <li>Adaptabilit\u00e9 : </li> <li>Les d\u00e9tails techniques (frameworks, API, etc.) peuvent \u00eatre chang\u00e9s sans impacter le c\u0153ur m\u00e9tier.</li> <li>Testabilit\u00e9 : Chaque composant peut \u00eatre test\u00e9 ind\u00e9pendamment.</li> <li>Long\u00e9vit\u00e9 : Une architecture solide r\u00e9duit la dette technique et facilite les \u00e9volutions futures.</li> </ol>"},{"location":"archi/2425/unclebob/#structure-en-couches","title":"\ud83d\udd04 Structure en couches :","text":"<p>La Clean Architecture est souvent repr\u00e9sent\u00e9e sous la forme de cercles concentriques :</p> <ol> <li>Les Entit\u00e9s (Entities) : Incarnent les r\u00e8gles et cas d\u2019usage les plus g\u00e9n\u00e9raux de l\u2019application</li> <li>Les Cas d\u2019Usage (Use Cases) : Ils encapsulent toute la logique m\u00e9tier sp\u00e9cifique \u00e0 l\u2019application</li> <li>Les Adaptateurs d\u2019Interface (Interface Adapters) : Cette couche fait le lien entre les cas d\u2019usage et les couches les plus externes.  Elle adapte les donn\u00e9es aux formats n\u00e9cessaires pour les cas d\u2019usage et les inferfaces externes</li> <li>Les Interfaces Utilisateurs (UIs) et les Frameworks et Drivers (Frameworks &amp; Drivers) : La couche externe comprend tout ce qui est en contact avec le monde ext\u00e9rieur, comme l\u2019interface utilisateur, les syst\u00e8mes de bases de donn\u00e9es, les serveurs web, etc<pre><code>+-----------------------------+\n|    Frameworks &amp; Drivers    |\n+-----------------------------+\n           \u25b2\n+-----------------------------+\n|   Interface Adapters        |\n+-----------------------------+\n           \u25b2\n+-----------------------------+\n|         Use Cases           |\n+-----------------------------+\n           \u25b2\n+-----------------------------+\n|           Entities          |\n+-----------------------------+\n</code></pre> </li> </ol>"},{"location":"archi/2425/unclebob/#defis","title":"D\u00e9fis:","text":""},{"location":"blog/","title":"Index","text":""},{"location":"blog/2025/07/11/scripting-with-kotlin/","title":"Scripting with Kotlin","text":""},{"location":"blog/2025/07/11/scripting-with-kotlin/#scripting-with-kotlin","title":"Scripting with Kotlin","text":"<p>Kotlin is a modern and versatile programming language that is used for many targets and types of applications. Although it is a compiled language at its core, Kotlin supports scripting, which enables small programs or scripts to be written and executed directly, providing a developer experience (DX) similar to other scripting languages. In this article, three ways of scripting with Kotlin are presented: using the <code>*.main.kts</code> file, using kscript, and using JBang. Kotlin notebooks are also mentioned as a bonus at the end.</p>"},{"location":"blog/2025/07/11/scripting-with-kotlin/#scripting-with-mainkts","title":"Scripting with <code>*.main.kts</code>","text":"<p>The official way to write Kotlin scripts is with a <code>*.main.kts</code> file, which is a special file that can be executed directly. Such a file may contain Kotlin code and can be run using the <code>kotlin</code> command. For example, a <code>script.main.kts</code> file may be created with the following content:</p> <pre><code>#!/usr/bin/env kotlin\n\nprintln(\"Hello, Kotlin scripting!\")\n</code></pre> <p>The script can be executed using the following command:</p> <pre><code>kotlin script.main.kts\n</code></pre> <p>This prints \"Hello, Kotlin scripting!\" to the console. The script can also be made executable by running:</p> <pre><code>chmod +x script.main.kts\n</code></pre> <p>and then run it directly:</p> <pre><code>./script.main.kts\n</code></pre> <p><code>*.main.kts</code> scripts provide features such as debugging, implicit <code>argv</code> (command line arguments), and dependencies via <code>@file:DependsOn</code> and <code>@file:Repository</code>. Caching support for fast execution is also available by default.</p> <p>Below is an example of a script that prints the last 10 posts from a given RSS feed URL. This example demonstrates the use of the <code>@file:DependsOn</code> annotation to include dependencies, and the use of the <code>argv</code> variable to obtain command line arguments.</p> <pre><code>#!/usr/bin/env kotlin\n\n@file:DependsOn(\"com.apptasticsoftware:rssreader:3.9.3\")\n\nimport com.apptasticsoftware.rssreader.RssReader\nimport kotlin.jvm.optionals.getOrDefault\n\nval feedUrl = args[0]\nprintln(\"Showing the last 10 posts from $feedUrl\")\n\nvar rssReader = RssReader()\nvar items = rssReader.read(feedUrl).filter { it.title.isPresent }\n  .map { it.title.getOrDefault(\"\") }.toList().take(10)\nprintln(items.joinToString(separator = \"\\n- \", prefix = \"- \"))\n</code></pre> <p>The script can be executed with the following command:</p> <pre><code>kotlin rssreader.main.kts [feed URL]\n# For example:\nrssreader.main.kts \"https://blog.worldline.tech/index.xml\"\n</code></pre> <p>The output of the script is similar to the following:</p> <pre><code>Showing the last 10 posts from https://blog.worldline.tech/index.xml\n- The Yoga of Image Generation \u2013 Part 3\n- Insights from Onboarding young developers and Mentoring Experiences\n- The Yoga of Image Generation \u2013 Part 2\n- The Superpowers of JavaScript Proxies\n- Devops on Google Cloud Platform: Automating your build delivery on GCP in nutshell\n- Introduction to QEMU 386\n- The Yoga of Image Generation \u2013 Part 1\n- Proper key management in the cloud with a Cloud Secure Module\n- The OAuth proxification guide for frontend developers with Microsoft EntraID\n- Gemini, but the other one\n</code></pre> <p>Kotlin scripting with <code>*.main.kts</code> files is a straightforward way to write and execute Kotlin scripts. This approach is available out of the box with the Kotlin compiler. However, several limitations have been observed: First, the <code>*.main.kts</code> file is currently only supported by IntelliJ IDEA, and a restart of the IDE may be required for dependencies to be recognized. Second, scripts may not run with the <code>./script.main.kts</code> command due to the error <code>env: kotlin\\r: No such file or directory</code>, which prevents execution. In such cases, the <code>kotlin script.main.kts</code> command must be used instead. Lastly, the status of this feature is still experimental, so changes may occur in the future. For further information, JetBrains has published a blog post about the current state of Kotlin scripting by the end of 2024, which initially led to some doubts and misunderstandings about the future of official Kotlin scripting support. Ultimately, the feedback was related to other less successful and relevant scripting features being dropped. Additional perspectives on the current state of official Kotlin scripting can be found in InfoWorld and Martin Bonin posts.</p> <p>In addition to the official <code>*.main.kts</code> scripting, there are two other popular ways to write Kotlin scripts: using kscript and JBang.</p>"},{"location":"blog/2025/07/11/scripting-with-kotlin/#scripting-with-kscript","title":"Scripting with kscript","text":"<p>kscript is an open-source tool designed to provide a user-friendly experience for writing Kotlin scripts. It offers a command-line interface and features that simplify the process of writing and running Kotlin scripts.</p> <p>After installing kscript, a script file with the <code>.kts</code> extension can be created, and the shebang line added at the top of the file. For example, the following file, named <code>script.kts</code>, is a kscript file that prints \"Hello, Kotlin scripting!\" and takes a command line argument:</p> <pre><code>#!/usr/bin/env kscript\n\nprintln(\"Hello, Kotlin scripting! ${args[0]}\")\n</code></pre> <p>As with <code>*.main.kts</code> scripting, the script can be run using the <code>kscript</code> command:</p> <pre><code>kscript script.kts \"from kscript\"\n</code></pre> <p>The script can also be made executable by running:</p> <pre><code>chmod +x script.kts\n</code></pre> <p>and then run it directly:</p> <pre><code>./script.kts \"from kscript\"\n</code></pre> <p>kscript provides features similar to the official <code>*.main.kts</code> scripting, such as dependency management and command line arguments. Additional developer-friendly features are also available, such as passing code from the command line. The following commands demonstrate two examples of passing code from the command line to kscript:</p> <pre><code>kscript 'println(\"hello world\")'\necho 'println(\"Hello Kotlin.\")' |  kscript -\n</code></pre> <p>kscript was widely used in the past, when the official Kotlin scripting support was still in its early stages. However, many exclusive features of kscript have since been integrated into the official <code>*.main.kts</code> scripting, such as dependency management, command line arguments, and more. Additionally, kscript has not been updated for a long time, with the last release in July 2023.</p> <p>A more feature-rich third-party Kotlin scripting experience can be achieved with JBang, as described in the next section.</p>"},{"location":"blog/2025/07/11/scripting-with-kotlin/#scripting-with-jbang","title":"Scripting with JBang","text":"<p>JBang is a multipurpose tool centered around using self-contained files for JVM languages (Java, Kotlin, etc.). In addition to scripting, jars can be generated, executed, and scripts can be shared in a streamlined way. For more details on JBang features aside from scripting, see the blog post about JBang, a talk at Devoxx UK, and the official website. This section focuses on the scripting features of JBang.</p> <p>The following commands showcase how to use JBang to create and run a Kotlin script:</p> <pre><code>jbang init -t hello.kt hello-jbang.kt\n# Execute the file\njbang hello-jbang.kt\n# or like this\nchmod +x hello-jbang.kt\n./hello-jbang.kt\n</code></pre> <p>The <code>hello-jbang.kt</code> file is a regular Kotlin file with a main method. It is considered a script due to the JBang annotation at the top of the file, also called a shebang, which instructs JBang to execute the file as a script. The content of the file is as follows:</p> <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\npublic fun main() {\n    println(\"Hello World\")\n}\n</code></pre> <p>JBang supports all scripting features of <code>*.main.kts</code> with these additions:</p> <ul> <li>File extension is .kt: the same extension as regular Kotlin files. Thus, the file must have a main method.</li> <li>Templates: the ability to create scripts from predefined models.</li> <li>Include other sources: useful for sharing code between scripts.</li> <li>Include resources: if the code has resources, such as an app icon or a translation file.</li> <li>Compiler and runtime options: for customizing the behavior of the compiler and the runtime.</li> </ul> <p>The following script demonstrates a Quarkus REST server written in Kotlin using JBang. It uses the <code>//DEPS</code> feature to include dependencies.</p> <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\n//DEPS io.ktor:ktor-bom:3.0.1@pom\n//DEPS io.ktor:ktor-server-netty-jvm\n//DEPS io.ktor:ktor-serialization-jackson-jvm\n//DEPS io.ktor:ktor-server-content-negotiation-jvm\n\nimport com.fasterxml.jackson.databind.SerializationFeature\nimport io.ktor.serialization.jackson.*\nimport io.ktor.server.application.*\nimport io.ktor.server.engine.*\nimport io.ktor.server.netty.*\nimport io.ktor.server.plugins.contentnegotiation.*\nimport io.ktor.server.response.*\nimport io.ktor.server.routing.*\n\ndata class Todo(val title: String, val isCompleted: Boolean)\n\nfun main(args: Array&lt;String&gt;) {\n    val todos = listOf(Todo(\"Sleep\", false), Todo(\"Eat\", true))\n    print(todos)\n    embeddedServer(Netty, 8080) {\n        install(ContentNegotiation) {\n            jackson {\n                enable(SerializationFeature.INDENT_OUTPUT)\n            }\n        }\n        routing { get(\"/\") { call.respond(todos) } }\n    }.start(wait = true)\n}\n</code></pre> <p>It can be run with the following command, which downloads the script and runs it locally:</p> <pre><code>jbang ktor-rest@yostane\n</code></pre> <p>JBang provides a versatile and feature-rich approach to writing Kotlin scripts.</p> <p>The next section covers an alternative way of running Kotlin code blocks, which is not exactly scripting but is noteworthy.</p>"},{"location":"blog/2025/07/11/scripting-with-kotlin/#bonus-kotlin-notebooks","title":"Bonus: Kotlin notebooks","text":"<p>Jupyter Notebook is a standard format for writing markdown, code, and the result of the code, all in a single file. The extension of these files is <code>.ipynb</code> (interactive Python notebooks). Notebooks are widely used for the following reasons:</p> <ul> <li>The language of code blocks can be any language, as long as a Jupyter Kernel for that language is installed.</li> <li>Code blocks can be executed in any order and independently, and there is a global session context that retains the values of global variables across code block executions. Even though there is Python in the extension name, it does not indicate that only Python is supported.</li> <li>Code and markdown blocks can be written in any order.</li> <li>GitHub, GitLab, and many other tools and apps render Jupyter Notebooks properly, including syntax highlighting and graphics and charts generated by code.</li> </ul> <p>These features make Jupyter Notebooks suitable for writing documentation, experimenting, data science, and scripting.</p> <p>Kotlin has official scripting support through the availability of a Kotlin Kernel, which allows Kotlin code blocks to be run, and IntelliJ and VSCode extensions for Kotlin notebooks, which enable editing features found in regular Kotlin files (syntax highlighting, code suggestions, etc.).</p> <p>The following screenshot shows a Kotlin notebook with a markdown block, a code block, and the result of the code block.</p> <p></p> <p>The notebook can be opened and edited with IntelliJ IDEA, VSCode, or any other Jupyter Notebook-compatible editor. It can also be rendered on GitHub or GitLab. The above notebook can be viewed on GitHub at this link.</p> <p>Other screenshots of Kotlin notebooks are shown below:</p> <p></p> <p> (source gaplo917/awesome-kotlin-notebook)</p> <p>Kotlin notebooks provide an interactive and visual way to write Kotlin code. They are not exactly scripting, but can be used for scripting-like tasks, such as experimenting with code, writing documentation, and sharing code snippets.</p>"},{"location":"blog/2025/07/11/scripting-with-kotlin/#conclusion","title":"Conclusion","text":"<p>Kotlin is a powerful and versatile language. This post has explored three ways to write scripts with Kotlin: using the official <code>*.main.kts</code> scripting, using kscript, and using JBang. JBang and the official approach each have their own advantages. kscript is less recommended due to its lack of features and updates.</p>"},{"location":"blog/2025/07/11/scripting-with-kotlin/#references","title":"References","text":"<ul> <li>May 2020: The state of Kotlin Scripting</li> <li>November 2024: The state of Kotlin Scripting</li> </ul>"},{"location":"blog/2025/08/11/web-ai-transformers-builtin/","title":"The present and future of AI in the browser","text":""},{"location":"blog/2025/08/11/web-ai-transformers-builtin/#the-present-and-future-of-ai-in-the-browser","title":"The present and future of AI in the browser","text":"<p>Running AI models is often associated with heavy server-side computations but it is not true anymore.</p> <p>With advancements in hardware capabilities and the efficient use of small AI models, it is now possible to run AI models directly in the browser. This is a game changer, bringing new possibilities for building amazing user experiences and making AI more accessible to both developers and users.</p> <p>In this post, we will explore two ways to run AI model in the browser: transformer.js and the new Built-in AI web API.</p> <p>We will showcase some demos and discuss the benefits and limitations of each approach. By reading this article, you will gain a better understanding of how to run AI models in the browser and when to choose this approach over server-side AI.</p>"},{"location":"blog/2025/08/11/web-ai-transformers-builtin/#present-transformerjs","title":"Present: Transformer.js","text":"<p>Transformer.js is a JavaScript library from Hugging Face allowing to run pre-trained AI models directly in the browser or in a JS runtime (Node.js, bun, Deno, etc.). It supports a wide range of models and use cases, including natural language processing (NLP), computer vision, audio, and more. The general pattern of using transformer.js is as follows:</p> <ol> <li>Add the library using a CDN or with <code>npm install @huggingface/transformers.js</code>.</li> <li>Load the pipeline, providing the desired task and model, as well as other options.     The most important parameter is the first one, which corresponds to the task you want to perform (e.g., \"sentiment-analysis\", \"text-generation\", etc.).     The others are optional.</li> <li>Call the loaded pipeline with the input data.</li> <li>Process the output as needed.</li> </ol> <p>To have a better understanding of how it works, let's create a sentiment analysis application using default model and options.</p> <p>Let's create a vanilla web app with Vite that uses TypeScript and Bun.</p> <pre><code>```sh\nbun create vite@latest transformerjs-demo\ncd transformerjs-demo\n```\n</code></pre> <ol> <li> <p>Add the dependency for transformer.js:</p> <pre><code>bun install @huggingface/transformers.js\n</code></pre> </li> <li> <p>In index.html, add some HTML code that asks the user to enter a sentence and provides a button to run the analysis:</p> <pre><code>&lt;input type=\"text\" id=\"input\" placeholder=\"Enter a sentence\" /&gt;\n&lt;button id=\"analyze\"&gt;Analyze&lt;/button&gt;\n&lt;div id=\"output\"&gt;&lt;/div&gt;\n</code></pre> </li> <li> <p>In main.ts, add an event handler for the button that sets up the transformer.js pipeline for the <code>sentiment-analysis</code> task and runs it:</p> <pre><code>import { pipeline } from '@huggingface/transformers.js';\n\nconst input = document.getElementById('input') as HTMLInputElement;\nconst output = document.getElementById('output') as HTMLDivElement;\n\ndocument.getElementById('analyze')?.addEventListener('click', async () =&gt; {\n    const model = await pipeline('sentiment-analysis');\n    const result = await model(input.value) as any;\n    output.innerHTML = result[0].label;\n});\n</code></pre> </li> </ol> <p>In the above code, when calling <code>await pipeline('sentiment-analysis')</code>, transformer.js will create a pipeline instance tailored for sentiment analysis. It also automatically uses a default model as the second parameter, downloads it from Hugging Face's model hub, and loads it into the browser. The third parameter of this function is the options object, with many available options. To summarize, the arguments of <code>pipeline</code> are:</p> <ul> <li><code>task</code>: The name of the task to perform (e.g., <code>\"sentiment-analysis\"</code>).     The full list of supported tasks is available in the official documentation as tables grouped by task type.     The <code>ID</code> column contains the unique identifier of the task and contains the possible values of the <code>task</code> parameter.</li> <li><code>model</code>: The model to use for the task (optional).     The full list of supported models is available in the official documentation.     However, it is recommended to open the <code>models</code> link in the tasks table to see the models available for each task.</li> <li><code>options</code>: An object containing options for the pipeline (optional).     Let's take a look at some of them:         - <code>device</code>: Specifies if the model should run on the CPU or GPU. The library uses WebAssembly (WASM) by default and it is possible to set it to <code>webgpu</code> to provide more efficient computation.         - <code>progress_callback</code>: provides progress updates.         This is useful to report the progress to the user when a model is downloaded for the first time.</li> </ul> <p>Let's use this new information to add a text to speech feature to our existing app.</p> <ol> <li> <p>Add a button for running text-to-speech:</p> <pre><code>&lt;button id=\"speak\"&gt;Speak&lt;/button&gt;\n</code></pre> </li> <li> <p>Add an event handler that creates an <code>text-to-speech</code> to generate the raw audio, and then use <code>AudioContext</code> to play it back.</p> <pre><code>document.getElementById('speak')?.addEventListener('click', async () =&gt; {\n    const synthesizer = await pipeline(\"text-to-speech\", \"Xenova/speecht5_tts\");\n    const embeddingUrl = \"https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/speaker_embeddings.bin\";\n    const output = await synthesizer(text, {\n        speaker_embeddings: embeddingUrl,\n    });\n    // Play the generated audio\n    const audioContext = new AudioContext();\n    const source = audioContext.createBufferSource();\n    const audioBuffer = audioContext.createBuffer(1, output.audio.length, output.sampling_rate);\n    audioBuffer.copyToChannel(output.audio as Float32Array&lt;ArrayBuffer&gt;, 0);\n    source.buffer = audioBuffer;\n    source.connect(audioContext.destination);\n    source.start();\n});\n</code></pre> </li> </ol> <p>Transformers.js supports many more use cases and can theoretically cover all those supported by Transformers Python. However, while Transformers.js is designed to be functionally equivalent to its Python counterpart, it is important to note that it is not a direct port. One difference is that the JS library uses the ONNX runtime to run models in the browser and is thus compatible only with ONNX models. Fortunately, it is possible to convert models from other frameworks like TensorFlow or PyTorch to ONNX format using a tool called Optimum. This is just scratching the surface of what you can do with transformer.js.</p>"},{"location":"blog/2025/08/11/web-ai-transformers-builtin/#future-the-built-in-ai-web-apis","title":"Future: The built-in AI web APIs","text":"<p>The new Built-in AI web API allows developers to run AI models natively in the browser without the need for any external libraries. This API provides a simple and consistent interface for working with AI models, making it easy to integrate AI capabilities into web applications. There are currently 7 APIs available in the Built-in AI web API, of which the first 6 can already be experimented with in Chrome:</p> <ul> <li>Translator API</li> <li>Language Detection API</li> <li>Writer API</li> <li>Rewriter API</li> <li>Summarizer API</li> <li>Prompt API</li> <li>Proofreader API (not yet available)</li> </ul> <p>All these APIs provide a high-level and similar interface, making it easy to switch between them. The general flow for using these APIs is as follows:</p> <ol> <li>Check if the API is supported in the browser with an <code>if (\"APIName\" in window)</code> check.</li> <li>Check the availability of the API and the model by testing the return value of <code>await APIName.availability();</code>, which can be one of the following:<ul> <li><code>unavailable</code>: the API is not supported in the browser or the model is not available.</li> <li><code>available</code>: the API is supported and the model is available and ready to use.</li> <li><code>downloadable</code>: the API is supported but the model is not available and can be downloaded.</li> <li><code>downloading</code>: the API is supported but the model is currently being downloaded.</li> </ul> </li> <li>If the API is <code>available</code>, <code>downloadable</code>, or <code>downloading</code>, we can create an object to interact with the API by using the result of <code>await APIName.create(options)</code>. We can optionally pass in the <code>options</code> a callback function to be notified of the download progress. This is particularly useful for large models that are not yet downloaded.</li> <li>Then we can ask the obtained object to perform the desired operation by calling the appropriate method with the required parameters. Many APIs support a <code>stream</code> option to get the result as a stream of events, which is useful for large inputs or outputs.</li> </ol> <p>Let's take a look at an example of using the Translator API to translate a text from English to French:</p> <pre><code>// Check if the Translator API is available in the browser\nif (!(\"Translator\" in window)) {\n    console.error(\"Translator API is not available.\");\n    return;\n}\n// Setup the options for the Translator API\nconst options = {\n    sourceLanguage: \"en\",\n    targetLanguage: \"fr\"\n};\n// Check the availability of the Translator API and the model. We could also pass in a callback function to be notified of the download progress.\nconst availability = await Translator.availability(options);\nif (availability === \"unavailable\") {\n    console.error(\"Translator API is not available or the model is not available.\");\n    return;\n}\n// Create a Translator object with the desired options\nconst translator = await Translator.create(options);\n// Ask the Translator object to translate a text\nconst result = await translator.translate(\"Hello, world!\");\nconsole.log(result);\n// The output should be: \"Bonjour, monde !\"\n</code></pre> <p>There may be some differences between the APIs, but the flow is generally the same. For more examples, you can check the official documentation and my demo website along with its source code.</p>"},{"location":"blog/2025/08/11/web-ai-transformers-builtin/#transformerjs-vs-native-ai-api","title":"Transformer.js vs native AI API","text":"<p>The advantages of using the Built-in AI web API over transformers.js are:</p> <ul> <li>No external dependencies: You don't need to include any external libraries or frameworks, which reduces the size of your application and improves performance.</li> <li>Native support: The API is built into the browser, which means it can take advantage of the browser's capabilities and optimizations.</li> <li>Download the model once: The Built-in web AI APIs download the model once and reuse-it across the different APIs and across domains.     This means that if many webapps use the same model, they will share the downloaded copy, which reduces the loading time and improves performance.     This is the opposite of Transformers.js, which can download different models (with varying sizes) depending on the task, and they are not shared across different origins.     This means that if many web applications use the same model, they will each download their own copy, which can increase loading times and bandwidth usage.</li> </ul> <p>The advantages of using Transformers.js over the Built-in AI web API are:</p> <ul> <li>More model options: Transformers.js supports a wider range of models available at Hugging Face Model Hub, which may be more suitable for specific tasks.</li> <li>Flexibility: Transformers.js is a general-purpose library that can be used for a variety of tasks beyond just text generation, such as image processing and multi-modal tasks.</li> <li>Community support: Transformers.js is provided by HuggingFace which has a large and active community, which means you can find more resources, tutorials, and pre-trained models to help you get started.</li> <li>Wider browser support: Transformers.js can run using Wasm or Webgpu, meaning that it supports a broader range of devices and platforms.     At the time of writing, built-in Web AI works only on Chrome, and some APIs require enabling feature flags or using a beta, development, or Canary build of Chrome.</li> <li>Stable API: Transformers.js is stable and relatively well-documented.     At the time of writing, built-in web AI APIs are still evolving, and may not have the same level of stability and documentation.</li> </ul> <p>To summarize, if we want to run AI in the browser, the safest choice is to use Transformers.js. In the future, when built-in web AI becomes stable and available across browsers, it may become the default approach, and Transformers.js may become the alternative for more specific use cases.</p>"},{"location":"blog/2025/08/11/web-ai-transformers-builtin/#browser-ai-vs-server-side-ai","title":"Browser AI vs server-side AI","text":"<p>Even though it is possible to run AI on the browser, there are still some limitations and trade-offs to consider when choosing between browser AI and server-side AI.</p> <p>Let's start by listing some of the advantages of using AI in the browser over server-based AI:</p> <ul> <li>Offline capabilities: Local web AI can work without an internet connection, making it more reliable in situations where connectivity is limited or unavailable.</li> <li>Privacy and security: By processing data locally, web AI can help protect user privacy and reduce the risk of data breaches associated with sending sensitive information to a server.</li> <li>Easier to setup: Web AI can be easier to set up and deploy, as it does not require server infrastructure or complex backend systems.     In fact, a static HTML page can use web AI without any server-side code.</li> <li>Less expensive: Webapps that take advantage of local web AI can reduce costs associated with server maintenance, data transfer, and cloud computing resources.</li> </ul> <p>The disadvantages of using AI in the browser compared to server-based AI:</p> <ul> <li>Limited resources: Browser-based AI may be limited by the device's hardware and performance capabilities, which can impact the complexity and size of the models that can be run.</li> <li>Inconsistent performance: The performance of browser-based AI can vary depending on the user's device and browser, leading to potential inconsistencies in user experience.</li> <li>Less models and use cases: While browser-based AI is growing, it may not yet support the same breadth of models and use cases as server-based solutions.</li> <li>More control over the model: Server-based AI can offer more control over the model and its environment, allowing for easier updates, maintenance, and customization.</li> </ul>"},{"location":"blog/2025/08/11/web-ai-transformers-builtin/#conclusion","title":"Conclusion","text":"<p>This post explored how to run AI directly in the browser. We introduced two ways to achieve this: using the built-in web AI APIs and using Transformers.js. The biggest advantages of using web AI are privacy and cost-effectiveness, and I believe we should move more in this direction. We can even use Transformers.js for tasks that use small models and compute quickly, but currently, server-side AI is the most reliable option for running AI workloads, especially for complex tasks that require significant computational resources. However, if built-in web AI continues to improve, it will become a viable alternative for more complex use cases. So, let's keep an eye on this exciting development.</p>"},{"location":"desktopdev/","title":"Introduction","text":""},{"location":"desktopdev/#introduction","title":"Introduction","text":"<ul> <li>Applications natives</li> <li>Applications hybrides (web + natif). Ex. electron, react native</li> <li> <p>PWA</p> </li> <li> <p>Applications cross-platform</p> </li> </ul>"},{"location":"desktopdev/electronjs/","title":"ElectronJS","text":""},{"location":"desktopdev/electronjs/#electronjs","title":"ElectronJS","text":""},{"location":"desktopdev/electronjs/#prise-en-main","title":"Prise en main","text":"<p>Nous allons utiliser Electron Forge</p> <pre><code># Cr\u00e9ation d'un projet en JavaScript\nnpx create-electron-app@latest my-app\n# ou en TypeScript\nnpx create-electron-app my-app --template=vite-typescript\n# D\u00e9marrer l'application\ncd my-app\nnpm start\n</code></pre> <p>Cet outil permet de publier l'application sur les diff\u00e9rentes plateformes (Windows, Mac, Linux).</p> <pre><code># G\u00e9n\u00e9ration du paquetage distribuable (installeur, dmg, etc.)\nnpm run make\n# Publication sur certaines platrformes (GitHub, S3, etc.)\nnpm install --save-dev @electron-forge/publisher-github\nnpm run publish\n</code></pre> <p>Vous pouvez trouver plus d'infos sur les makers ici et les publishers ici.</p>"},{"location":"desktopdev/electronjs/#integration-dun-front-react","title":"Int\u00e9gration d'un front React","text":"<p>Voici les \u00e9tapes cl\u00e9s:</p> <ol> <li>Cr\u00e9er un projet React avec Vite.</li> <li>Cr\u00e9er un projet Electron + Vite avec Electron Forge.</li> <li>Copier le code front de l'application React vers le projet Electron : \u00e9craser index.html, copier le dossier public et fusionner le contenu du dossier src.</li> <li>Copier les configuration sp\u00e9cifique du projet React vers le projet Electron. Il ne devrait y avoir que le eslint.json \u00e0 copier \u00e0 la racine du projet Electron.</li> <li>Ajouter le plugin <code>react()</code> dans vite.renderer.config.mjs. Vous pouvez le faire en rempla\u00e7ant le contenu de ce fichier par le contenu de vite.config.js du projet React.</li> <li>Copier les d\u00e9pendances (<code>dependencies</code> et <code>devDependencies</code>) du projet React vers le projet Electron \u00e0 part <code>vite</code>. Il ne devrait pas y avoir d'autres doublons, mais s'il y en a, il faut les supprimer.</li> <li>Lancer l'application Electron. Si tout fonctionne, vous pouvez supprimer le projet React.</li> </ol> <p>Voici les commandes qui permettent de faire ces \u00e9tapes (fonctionne au moment o\u00f9 j'\u00e9cris ces lignes):</p> <pre><code>npx create-vite@latest my-react-app --template react\nnpx create-electron-app@latest electron-react-app --template vite\n\ncp my-react-app/index.html electron-react-app/index.html\ncp -r my-react-app/public electron-react-app/public\ncp -r my-react-app/src/* electron-react-app/src\n\ncp my-react-app/eslint.config.js electron-react-app/eslint.config.json\n\n\ncp my-react-app/vite.config.js electron-react-app/vite.renderer.config.mjs\n\ncd electron-react-app\nnpm install react react-dom\nnpm install --save-dev @eslint/js @types/react @types/react-dom eslint vite-plugin-react @vitejs/plugin-react eslint-plugin-react-hooks eslint-plugin-react-refresh\n\nnpm start\n\n# Sous un shell sh (bash, zsh, etc.)\nrm -rf ../my-react-app\n# Sous powershell\nrm -Force -Recurse ../my-react-app\n</code></pre> <p></p>"},{"location":"desktopdev/features/","title":"Caract\u00e9ristiques","text":""},{"location":"desktopdev/features/#caracteristiques","title":"Caract\u00e9ristiques","text":""},{"location":"desktopdev/features/#paradigmes-imperatif-et-declaratif","title":"Paradigmes imp\u00e9ratif et d\u00e9claratif","text":"<p>Voici exemple de programmation d\u00e9clarative et imp\u00e9rative en TypeScript:</p> <pre><code>// typage implicite: la variable inf\u00e8re son type\nlet i = 10;\ni = 20;\n// typage statique, on ne peut pas changer le type d'une variable\n//i = \"Hello\";\n\nconst items = [10, 34, -1, 44];\n// const en TS emp\u00eache la r\u00e9assignation (mais n'interdit pas la mutation)\n// items = []\n\n// Style de programmation imp\u00e9ratif\nconst resultItems = [];\nfor (const item of items) {\n  if (item &gt; 0) {\n    resultItems.push(item * 2);\n  }\n}\nconsole.log(resultItems);\n\n// Style d\u00e9claratif =&gt; sortie = f(entr\u00e9e)\n// Le code va refl\u00e9ter ou exprimer ce qu'on veut faire (et pas comment le faire)\n\nconst filterdItems = items.filter((item) =&gt; item &gt; 0);\nconsole.log(filterdItems);\nconst result2Items = filterdItems.map((item) =&gt; item * 2);\nconsole.log(result2Items);\n\nconst result3Items = items.filter((item) =&gt; item &gt; 0).map((item) =&gt; item * 2);\nconsole.log(result3Items);\n</code></pre> <ul> <li>La programmation d\u00e9clarative a un style qui plus orient\u00e9 vers la description de ce qu'on veut faire alors que la programmation imp\u00e9rative d\u00e9crit comment le faire</li> <li>Actuellement, la programmation imp\u00e9rative est g\u00e9n\u00e9ralement plus optimale que la programmation d\u00e9clarative, mais \u00e7a d\u00e9pend des compilateurs, des langages et du type de programme qu'on \u00e9crit.</li> <li>La programmation d\u00e9clarative permet de plus facilement rendre son traitement asynchrone par sa fa\u00e7on de coder (c'est plus facile de rendre asynchrone les fonctions qu'on veut plut\u00f4t qu'un ensemble de code imp\u00e9ratif)</li> </ul>"},{"location":"desktopdev/features/#le-style-imperatif-pour-coder-lui","title":"Le style imp\u00e9ratif pour coder l'UI","text":""},{"location":"desktopdev/features/#le-style-declaratif-pour-coder-lui","title":"Le style d\u00e9claratif pour coder l'UI","text":""},{"location":"desktopdev/features/#-en-declaratif-la-mise-a-jour-de-lui-se-base-generalement-sur-un-etat-qui-sera-lie-a-un-ou-plusieurs-composants-graphiques-des-que-letat-change-le-composant-graphique-met-a-jour-son-rendu-on-parle-alors-de-binding-ou-liaison","title":"- En d\u00e9claratif, la mise \u00e0 jour de l'UI se base g\u00e9n\u00e9ralement sur un \u00e9tat qui sera li\u00e9 \u00e0 un ou plusieurs composants graphiques. D\u00e8s que l'\u00e9tat change, le composant graphique met \u00e0 jour son rendu. On parle alors de binding ou liaison.","text":"<pre><code>@Composable\nfun App() {\n    val platformName = getPlatformName()\n    Card {\n        var expanded by remember { mutableStateOf(false) }\n        Column(Modifier.clickable { expanded = !expanded }) {\n            Text(\n                text=\"Click me !\",\n                style = MaterialTheme.typography.h2\n            )\n            AnimatedVisibility(expanded){\n                Text(\n                    text = \"Hello, ${platformName} \ud83c\udf8a\",\n                    style = MaterialTheme.typography.h1\n                )\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"desktopdev/features/#ux","title":"UX","text":"<p>L'exp\u00e9rience utilisateur (en anglais, user experience ou UX en abr\u00e9g\u00e9) est la qualit\u00e9 du v\u00e9cu de l'utilisateur dans des environnements num\u00e9riques ou physiques.</p> <p>source wikipedia</p>"},{"location":"desktopdev/features/#laccessibilite","title":"L'accessibilit\u00e9","text":"<p>L'accessibilit\u00e9 est la mise \u00e0 disposition de vos sites web au plus grand nombre. On pense souvent que cela s'adresse aux personnes ayant un handicap, mais cela concerne \u00e9galement d'autres groupes comme ceux utilisant des appareils mobiles ou ceux qui ont des connexions internet de faible d\u00e9bit.</p> <p>source MDN</p>"},{"location":"desktopdev/features/#types-de-handicap-a-envisager","title":"Types de handicap \u00e0 envisager","text":"<ul> <li>Troubles de la vue</li> <li>Troubles de l'audition</li> <li>Troubles au niveau de la mobilit\u00e9</li> <li>D\u00e9ficiences cognitives</li> </ul> <p>Plus de d\u00e9tails dans le site d'Apple et Mozilla</p>"},{"location":"desktopdev/features/#lignes-directrices-et-legislation","title":"Lignes directrices et l\u00e9gislation","text":"<p>Pour le web, on a le WGAC de la W3C. Pour le mobile, on le WAI de la W3C. Pour le desktop c'est un peu compliqu\u00e9.</p> <p>European Mobile Act</p> <p>From June 23, 2021, public sector bodies have the responsibility to make their mobile app content accessible to everyone.</p> <p>article de mobilea11y sur EAA</p>"},{"location":"desktopdev/features/#packaging-et-installation","title":"Packaging et Installation","text":"<p>Une fois l'application d\u00e9velopp\u00e9e, test\u00e9e et pr\u00eate \u00e0 partir en production, il faudra la fournir aux utilisateurs. Plusieurs moyens s'offrent \u00e0 nous:</p> <ul> <li>Fournir une archive compress\u00e9e</li> <li>Fournir une application portable: comme un dmg sur mac ou une archive auto extractable sur windows.</li> <li>Fournir un installeur comme Wix pour windows</li> <li>Mettre \u00e0 disposition sur un gestionnaire de paqu\u00eats<ul> <li>Windows: Scoop, Chocolatey ou winget</li> <li>Ubuntu: apt</li> <li>Javascript: npm</li> <li>Python: PyPi (pour installation avec pip). Voici un tuto</li> </ul> </li> <li>Mettre \u00e0 disposition sur un magasin d'applications (Windows store, App Store, etc.)</li> </ul>"},{"location":"desktopdev/project/","title":"Projet","text":"<p>Ce projet a deux missions principales:</p> <ul> <li>D\u00e9velopper une application de bureau qui illustre les fonctionnalit\u00e9s typiques d'une application de bureau avec un Framework au choix</li> <li>Restituer une \u00e9tude sur le Framework utilis\u00e9</li> </ul>"},{"location":"desktopdev/project/#developper-une-application-de-bureau","title":"D\u00e9velopper une application de bureau","text":"<p>Il vous est demand\u00e9 de d\u00e9velopper une application de bureau de type CRUD (Create, Read, Update, Delete) avec les contraintes suivantes:</p> <ul> <li>Proposition d'un CRUD (4 pts)</li> <li>Persistance des donn\u00e9es en local ou en ligne (4 pts)</li> <li>Affichage d'une liste de donn\u00e9es (2 pts)</li> <li>Impl\u00e9mentation de deux fonctionnalit\u00e9s desktop natives (4 pts)</li> <li>Ic\u00f4ne dans la barre d'\u00e9tat syst\u00e8me (system tray)</li> <li>Service en arri\u00e8re-plan</li> <li>Option pour d\u00e9marrer automatiquement avec le syst\u00e8me</li> <li>Menu contextuel (au clic droit)</li> <li>Compatible et fonctionnel avec au moins deux plateformes (vous pouvez utiliser WSL ou une VM) (2 pts)</li> <li>Publication sur un gestionnaire de paqu\u00eats (scoop, chocolatey, brew, etc.) (2 pts)</li> <li>Cr\u00e9ation d'un installeur qui ne n\u00e9cessite pas les droits admin (2 pts)</li> </ul>"},{"location":"desktopdev/project/#restituer-une-etude-sur-le-framework-utilise","title":"Restituer une \u00e9tude sur le Framework utilis\u00e9","text":"<p>Il vous est demand\u00e9 de pr\u00e9parer une pr\u00e9sentation autour du Framework de votre choix ainsi que votre application. Voici un mod\u00e8le de plan \u00e0 suivre:</p> <ul> <li>Historique du framework</li> <li>Caract\u00e9ristiques principales (plateformes support\u00e9s, langages, etc.)</li> <li>Ce qui le diff\u00e9rencie de la concurrence</li> <li>Qui l'utilise / communaut\u00e9</li> <li>Principe de fonctionnement du framework</li> <li>Pr\u00e9sentation de l'application et de ses fonctionnalit\u00e9s</li> <li>D\u00e9mo de l'application</li> </ul>"},{"location":"desktopdev/project/#evaluation-et-livrable","title":"Evaluation et livrable","text":"<p>L'\u00e9valuation se base sut votre pr\u00e9sentation qui restitue votre \u00e9tude du Framework utilis\u00e9 ainsi qu'une d\u00e9mo de votre application. Les pr\u00e9sentations auront lieu durant la derni\u00e8re s\u00e9ance.</p> <p>Il vous est demand\u00e9 de livrer la pr\u00e9sentation ainsi que le code source de votre projet.</p>"},{"location":"desktopdev/project/#quelques-frameworks","title":"Quelques Frameworks","text":"<ul> <li>Tauri</li> <li>MAUI</li> <li>Electron</li> <li>Flutter</li> <li>Kotlin multiplatform (KMP) + Compose multiplatform</li> <li>QT (en C++ ou un langage alternatif)</li> <li>React Native for Windows + macOS</li> <li>JavaFX</li> <li>avalonia</li> <li>UNO Platfrom</li> </ul>"},{"location":"distrib/","title":"Programmation distribu\u00e9e","text":""},{"location":"distrib/#programmation-distribuee","title":"Programmation distribu\u00e9e","text":""},{"location":"distrib/#quelques-definitions","title":"Quelques d\u00e9finitions","text":"<ul> <li>La programmation distribu\u00e9e est une technique de programmation qui permet d'ex\u00e9cuter des t\u00e2ches sur plusieurs ordinateurs ou n\u0153uds en parall\u00e8le. Elle est utilis\u00e9e pour traiter de gros volumes de donn\u00e9es ou pour ex\u00e9cuter des calculs complexes de mani\u00e8re efficace.</li> <li>Un cluster est un ensemble de plusieurs ordinateurs ou n\u0153uds qui travaillent ensemble pour ex\u00e9cuter des t\u00e2ches. Dans le contexte de la programmation distribu\u00e9e, un cluster est utilis\u00e9 pour ex\u00e9cuter des t\u00e2ches sur plusieurs ordinateurs en parall\u00e8le.</li> <li>Un dataframe est une structure de donn\u00e9es qui permet de stocker des donn\u00e9es tabulaires (lignes et colonnes o\u00f9 chaque colonne est identifi\u00e9e par un nom). Il est similaire \u00e0 une table dans une base de donn\u00e9es ou \u00e0 une feuille de calcul dans Excel. Dans le contexte de la programmation distribu\u00e9e, les dataframes g\u00e8rent de gros volumes de donn\u00e9es.</li> </ul>"},{"location":"distrib/#programmation-distribuee-vs-dautres-concepts","title":"Programmation distribu\u00e9e vs d'autres concepts","text":"<ul> <li>vs microservices:<ul> <li>microservices: une approche de conception o\u00f9 une application est divis\u00e9e en plusieurs services plus petits qui peuvent \u00eatre d\u00e9ploy\u00e9s ind\u00e9pendamment.</li> <li>syst\u00e8mes distribu\u00e9s: compos\u00e9s de plusieurs ordinateurs qui travaillent ensemble pour effectuer une t\u00e2che unique.</li> </ul> </li> <li>vs parall\u00e9lisme:<ul> <li>parall\u00e9lisme: une technique de programmation qui consiste \u00e0 ex\u00e9cuter plusieurs t\u00e2ches simultan\u00e9ment.</li> <li>programmation distribu\u00e9e: une technique de programmation qui consiste \u00e0 ex\u00e9cuter des t\u00e2ches sur plusieurs ordinateurs.</li> </ul> </li> <li>vs des outils non distribu\u00e9s comme pandas:<ul> <li>pandas: une biblioth\u00e8que Python pour l'analyse de donn\u00e9es qui fonctionne sur un seul ordinateur.</li> <li>programmation distribu\u00e9e: permettent d'accomplir ce que fait pandas mais de fa\u00e7on distribu\u00e9e (sur plusieurs ordinateurs), et donc permettent de traiter de plus gros volumes de donn\u00e9es. Il faut noter que les traitements distribu\u00e9s ne concernent pas uniquement les donn\u00e9es massives, mais aussi les traitements massifs (par exemple, le calcul de la valeur d'une fonction sur un tr\u00e8s grand nombre de points).</li> </ul> </li> </ul> <p>Plusieurs technologies permettent de mettre en place des syst\u00e8mes distribu\u00e9s. Les plus connues sont: Hadoop, Apache Spark, Apache Flink, Apache Storm, Apache Kafka, Apache Samza, Apache Beam, Google Cloud Dataflow, Amazon Kinesis, etc.</p>"},{"location":"distrib/#apache-spark-et-databricks","title":"Apache Spark et Databricks","text":"<p>Apache spark est un framework de traitement de donn\u00e9es massives qui permet de traiter des donn\u00e9es en parall\u00e8le sur un cluster. Il est con\u00e7u pour \u00eatre rapide et efficace, et il est souvent utilis\u00e9 pour des t\u00e2ches telles que l'analyse de donn\u00e9es, le machine learning et le traitement de flux de donn\u00e9es. Databricks est une plateforme de calcul sur le cloud qui offre de fortes synergies avec Apache Spark.</p> <p>L'\u00e9quipe \u00e0 l'origine du projet de recherche Spark \u00e0 l'UC Berkeley a fond\u00e9 Databricks en 2013.</p>"},{"location":"distrib/#dask-et-coiled","title":"Dask et Coiled","text":"<p>Dask s'appuie sur pandas pour traiter de fa\u00e7on distribu\u00e9e de gros volumes de donn\u00e9es et propose en plus la possibilit\u00e9 de lancer des t\u00e2ches parall\u00e8les. Coiled est un service de calcul sur le cloud pour d\u00e9veloppeurs Python.</p> <p>Dask a \u00e9t\u00e9 cr\u00e9\u00e9 par Matthew Rocklin qui est lui-m\u00eame CEO de Coiled.</p>"},{"location":"distrib/#sources","title":"Sources","text":"<ul> <li>What Are Distributed Systems?</li> <li>The Top Distributed Data Processing Technologies: A Comprehensive Overview</li> <li>Qu'est-ce qu'un syst\u00e8me distribu\u00e9 ?</li> <li>Ing\u00e9nierie de la fouille et de la visualisation de donn\u00e9es massives (RCP216)</li> </ul>"},{"location":"distrib/dask/coiled/","title":"Coiled","text":""},{"location":"distrib/dask/coiled/#coiled","title":"Coiled","text":"<p>Coiled est un service cloud qui permet, entre autres, de d\u00e9ployer des clusters Dask en quelques clics. Il est particuli\u00e8rement adapt\u00e9 pour les utilisateurs de Jupyter et de pandas.</p>"},{"location":"distrib/dask/coiled/#lien-entre-dask-et-coiled","title":"Lien entre Dask et Coiled","text":"<p>Dask a \u00e9t\u00e9 cr\u00e9\u00e9 par Matthew Rocklin qui est lui-m\u00eame CEO de Coiled.</p>"},{"location":"distrib/dask/coiled/#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<ul> <li>Cr\u00e9er un compte gratuit sur Coiled et s'y connecter.</li> <li>Aller sur le get started et suivre les instructions.</li> <li>Pour la suite, on suppose que Coiled install\u00e9 dans l'environnement virtuel et qu'on est connect\u00e9 <code>coiled login</code>.</li> <li>Lancer un Hello world sur une VM avec cette commande <code>coiled run echo \"Hello, world\"</code></li> </ul>"},{"location":"distrib/dask/coiled/#quelques-exemples","title":"Quelques exemples","text":""},{"location":"distrib/dask/coiled/#traitement-des-donnees-nasa-earthdata","title":"Traitement des donn\u00e9es NASA earthdata","text":"<p>Cet exemple pris du site de Coiled permet de montrer comment d\u00e9l\u00e9guer des traitement sur le Cloud. En effet, le d\u00e9corateur <code>@coiled.function</code> permet de lancer une fonction sur un cluster Dask Coiled. Il est possible de sp\u00e9cifier le nombre de workers, la m\u00e9moire, etc.</p> <p>Concr\u00e8tement, cet exemple,  traiter 500Go de donn\u00e9es de fa\u00e7on distribu\u00e9e sur le Cloud et affiche ensuite le r\u00e9sultat sous forme d'un graphique en local.</p> <ul> <li>Cr\u00e9er un compte urs.earthdata.nasa.gov</li> <li>V\u00e9erifier qu'on est bien connect\u00e9 \u00e0 Coiled avec la commande <code>coiled login</code></li> <li> <p>Installer les d\u00e9pendances suivantes dans l'environnement virtuel :</p> <pre><code>pip install coiled earthaccess xarray numpy matplotlib netcdf4 h5netcdf\n</code></pre> </li> <li> <p>Lancer le script suivant :</p> <pre><code># Source: https://coiled.io/example/nasa-cloud-datasets\n\nimport coiled\nimport os\nimport tempfile\nimport earthaccess\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\n\n# Create a free NASA Earthdata account (https://urs.earthdata.nasa.gov/)\ntry:\n    earthaccess.login()\nexcept:\n    print(\"login failed\")\n    exit(1)\n\n# Step 2: Find the dataset files we want to analyze\ngranules = earthaccess.search_data(\n    short_name=\"MUR-JPL-L4-GLOB-v4.1\",  # Sea Surface Temperature dataset\n    temporal=(\"2020-01-01\", \"2021-12-31\"),  # Two years of data\n)\n\n# Delete processing to coiled\n\n\n@coiled.function(\n    region=\"us-west-2\",                  # Run in the same region as data\n    environ=earthaccess.auth_environ(),  # Forward Earthdata auth to cloud VMs\n    spot_policy=\"spot_with_fallback\",    # Use spot instances when available\n    arm=True,                            # Use ARM-based instances\n    cpu=1,                               # Use single-core instances\n)\ndef process(granule):\n    \"\"\"Process a single data granule to extract Great Lakes temperature data\"\"\"\n    results = []\n    with tempfile.TemporaryDirectory() as tmpdir:\n        files = earthaccess.download(granule, tmpdir)\n        for file in files:\n            ds = xr.open_dataset(os.path.join(tmpdir, file))\n            # Select Great Lakes region by longitude/latitude\n            ds = ds.sel(lon=slice(-93, -76), lat=slice(41, 49))\n            # Filter for water temperature (exclude ice-covered areas)\n            cond = (ds.sea_ice_fraction &lt; 0.15) | np.isnan(ds.sea_ice_fraction)\n            result = ds.analysed_sst.where(cond)\n            results.append(result)\n    return xr.concat(results, dim=\"time\")\n\n\n# Step 4: Run processing across all files in parallel\nresults = process.map(granules)\n\n# Step 5: Combine results and visualize\nds = xr.concat(results, dim=\"time\")\n\n# Calculate temperature standard deviation across time\nplt.figure(figsize=(14, 6))\nstd_temp = ds.std(\"time\")\nstd_temp.plot(x=\"lon\", y=\"lat\", cmap=\"viridis\")\nplt.title(\"Standard Deviation of Sea Surface Temperature (2020-2021)\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.savefig(\"great_lakes_sst_variation.png\")\nplt.show()\n</code></pre> </li> </ul>"},{"location":"distrib/dask/coiled/#traitement-des-donnees-uber-et-lyft","title":"Traitement des donn\u00e9es Uber et Lyft","text":"<p>A priori, il faut lier son compte \u00e0 AWS pour acc\u00e9der au dataset.</p> <pre><code>import coiled\nimport dask.dataframe as dd\n\ncluster = coiled.Cluster(n_workers=10)\nclient = cluster.get_client()\nprint(client)\n\n# Load the Uber-Lyft Taxi dataset from s3 (200 GB)\ndf = dd.read_parquet(\"s3://coiled-data/uber/\")\n# How often do New Yorkers tip?\n(df.tips != 0).mean().compute()\n</code></pre>"},{"location":"distrib/dask/coiled/#notebooks-sur-le-cloud","title":"Notebooks sur le cloud","text":"<p>Les notebooks Coiled sont un moyen pratique pour ex\u00e9cuter des notebooks Jupyter sur le cloud. Ils sont bas\u00e9s sur JupyterLab et permettent de faire tout ce qu'on peut faire en local mais avec la puissance de calcul du cloud. On peut me\u00eame utiliser PyPark apr\u00e8s avoir install\u00e9 Java (par exemple un <code>conda install openjdk=21</code>) et la librairie <code>pyspark</code> avec un <code>pip install pyspark</code>.</p>"},{"location":"distrib/dask/dask-array/","title":"Dask array","text":"In\u00a0[50]: Copied! <pre>import numpy as np\nimport dask.array as da\n\ndata = np.arange(100_000).reshape(200, 500)\na = da.from_array(data, chunks=(100, 100))\na\n</pre> import numpy as np import dask.array as da  data = np.arange(100_000).reshape(200, 500) a = da.from_array(data, chunks=(100, 100)) a Out[50]:  Array   Chunk   Bytes   781.25 kiB   78.12 kiB   Shape   (200, 500)   (100, 100)   Dask graph   10 chunks in 1 graph layer   Data type   int64 numpy.ndarray  500 200 <p>On voit que dask a subdivis\u00e9 en interne la matrice en 10 morceaux sur 2 lignes et 5 colonnes, donnant ainsi une matrice de chunks (ou de morceaux) de taille 2x5</p> In\u00a0[51]: Copied! <pre>a.chunks\n</pre> a.chunks Out[51]: <pre>((100, 100), (100, 100, 100, 100, 100))</pre> In\u00a0[52]: Copied! <pre>a.visualize()\n</pre> a.visualize() Out[52]: <p>Le premier morceau (0, 0) contient les 100 premi\u00e8res lignes et les 100 premi\u00e8re colonnes.</p> In\u00a0[53]: Copied! <pre>a.blocks[0, 0]\n</pre> a.blocks[0, 0] Out[53]:  Array   Chunk   Bytes   78.12 kiB   78.12 kiB   Shape   (100, 100)   (100, 100)   Dask graph   1 chunks in 2 graph layers   Data type   int64 numpy.ndarray  100 100 In\u00a0[54]: Copied! <pre>a.blocks[1, 3]\n</pre> a.blocks[1, 3] Out[54]:  Array   Chunk   Bytes   78.12 kiB   78.12 kiB   Shape   (100, 100)   (100, 100)   Dask graph   1 chunks in 2 graph layers   Data type   int64 numpy.ndarray  100 100 In\u00a0[55]: Copied! <pre>a[:50, 200]\n</pre> a[:50, 200] Out[55]:  Array   Chunk   Bytes   400 B   400 B   Shape   (50,)   (50,)   Dask graph   1 chunks in 2 graph layers   Data type   int64 numpy.ndarray  50 1 In\u00a0[56]: Copied! <pre>a[-1, -1]\n</pre> a[-1, -1] Out[56]:  Array   Chunk   Bytes   8 B   8 B   Shape   ()   ()   Dask graph   1 chunks in 2 graph layers   Data type   int64 numpy.ndarray  In\u00a0[57]: Copied! <pre>a[-1, -1].compute()\n</pre> a[-1, -1].compute() Out[57]: <pre>np.int64(99999)</pre> In\u00a0[58]: Copied! <pre>m = a.mean()\nm\n</pre> m = a.mean() m Out[58]:  Array   Chunk   Bytes   8 B   8 B   Shape   ()   ()   Dask graph   1 chunks in 5 graph layers   Data type   float64 numpy.ndarray  In\u00a0[59]: Copied! <pre>m.compute()\n</pre> m.compute() Out[59]: <pre>np.float64(49999.5)</pre> In\u00a0[60]: Copied! <pre>m.visualize()\n</pre> m.visualize() Out[60]: In\u00a0[61]: Copied! <pre>s = np.sin(a)\ns\n</pre> s = np.sin(a) s Out[61]:  Array   Chunk   Bytes   781.25 kiB   78.12 kiB   Shape   (200, 500)   (100, 100)   Dask graph   10 chunks in 2 graph layers   Data type   float64 numpy.ndarray  500 200 In\u00a0[62]: Copied! <pre>s.compute()\n</pre> s.compute() Out[62]: <pre>array([[ 0.        ,  0.84147098,  0.90929743, ...,  0.58781939,\n         0.99834363,  0.49099533],\n       [-0.46777181, -0.9964717 , -0.60902011, ..., -0.89796748,\n        -0.85547315, -0.02646075],\n       [ 0.82687954,  0.9199906 ,  0.16726654, ...,  0.99951642,\n         0.51387502, -0.4442207 ],\n       ...,\n       [-0.99720859, -0.47596473,  0.48287891, ..., -0.76284376,\n         0.13191447,  0.90539115],\n       [ 0.84645538,  0.00929244, -0.83641393, ...,  0.37178568,\n        -0.5802765 , -0.99883514],\n       [-0.49906936,  0.45953849,  0.99564877, ...,  0.10563876,\n         0.89383946,  0.86024828]], shape=(200, 500))</pre> In\u00a0[63]: Copied! <pre>s.visualize()\n</pre> s.visualize() Out[63]: In\u00a0[64]: Copied! <pre>a.T.compute()\n</pre> a.T.compute() Out[64]: <pre>array([[    0,   500,  1000, ..., 98500, 99000, 99500],\n       [    1,   501,  1001, ..., 98501, 99001, 99501],\n       [    2,   502,  1002, ..., 98502, 99002, 99502],\n       ...,\n       [  497,   997,  1497, ..., 98997, 99497, 99997],\n       [  498,   998,  1498, ..., 98998, 99498, 99998],\n       [  499,   999,  1499, ..., 98999, 99499, 99999]], shape=(500, 200))</pre> In\u00a0[65]: Copied! <pre>a.compute()\n</pre> a.compute() Out[65]: <pre>array([[    0,     1,     2, ...,   497,   498,   499],\n       [  500,   501,   502, ...,   997,   998,   999],\n       [ 1000,  1001,  1002, ...,  1497,  1498,  1499],\n       ...,\n       [98500, 98501, 98502, ..., 98997, 98998, 98999],\n       [99000, 99001, 99002, ..., 99497, 99498, 99499],\n       [99500, 99501, 99502, ..., 99997, 99998, 99999]], shape=(200, 500))</pre> <p>Axis: corrspond \u00e0 l'axe qui bouge. Les autres axes sont fig\u00e9s.</p> <ul> <li>Axis 0 : il s'agit de la premi\u00e8re dimension (lignes). Le calcul (ou l'axe qui bouge) est sur la ligne. Donc <code>sum(axis=0)</code> calcule la somme de la colonne. En effet, axis = 0 signfie que la somme est calcul\u00e9e en avan\u00e7ant ligne par ligne et en fixant la colonne.</li> <li>Axis 1 : il s'agit de la deuxi\u00e8me dimension (colonnes). Le calcul est sur sur la colonne. Donc si on fait un <code>sum(axis=1)</code>, \u00e7a donne la somme de la ligne.</li> </ul> <p>Le code suivant donne le max de chaque ligne (comme axis=1 donc le max est calcul\u00e9 sur les colonnes de chaque ligne; c\u00e0d la ligne est fig\u00e9e et on bouge la colonne pour calculer le max), inverse l'ordre du r\u00e9sultat et ajoute 10 \u00e0 chaque valeur. Le r\u00e9sultat est donc un vecteur (ou une liste) de 200 \u00e9l\u00e9ments.</p> In\u00a0[66]: Copied! <pre>b = a.max(axis=1)[::-1] + 10\nb\n</pre> b = a.max(axis=1)[::-1] + 10 b Out[66]:  Array   Chunk   Bytes   1.56 kiB   800 B   Shape   (200,)   (100,)   Dask graph   2 chunks in 6 graph layers   Data type   int64 numpy.ndarray  200 1 In\u00a0[67]: Copied! <pre>b.compute()\n</pre> b.compute() Out[67]: <pre>array([100009,  99509,  99009,  98509,  98009,  97509,  97009,  96509,\n        96009,  95509,  95009,  94509,  94009,  93509,  93009,  92509,\n        92009,  91509,  91009,  90509,  90009,  89509,  89009,  88509,\n        88009,  87509,  87009,  86509,  86009,  85509,  85009,  84509,\n        84009,  83509,  83009,  82509,  82009,  81509,  81009,  80509,\n        80009,  79509,  79009,  78509,  78009,  77509,  77009,  76509,\n        76009,  75509,  75009,  74509,  74009,  73509,  73009,  72509,\n        72009,  71509,  71009,  70509,  70009,  69509,  69009,  68509,\n        68009,  67509,  67009,  66509,  66009,  65509,  65009,  64509,\n        64009,  63509,  63009,  62509,  62009,  61509,  61009,  60509,\n        60009,  59509,  59009,  58509,  58009,  57509,  57009,  56509,\n        56009,  55509,  55009,  54509,  54009,  53509,  53009,  52509,\n        52009,  51509,  51009,  50509,  50009,  49509,  49009,  48509,\n        48009,  47509,  47009,  46509,  46009,  45509,  45009,  44509,\n        44009,  43509,  43009,  42509,  42009,  41509,  41009,  40509,\n        40009,  39509,  39009,  38509,  38009,  37509,  37009,  36509,\n        36009,  35509,  35009,  34509,  34009,  33509,  33009,  32509,\n        32009,  31509,  31009,  30509,  30009,  29509,  29009,  28509,\n        28009,  27509,  27009,  26509,  26009,  25509,  25009,  24509,\n        24009,  23509,  23009,  22509,  22009,  21509,  21009,  20509,\n        20009,  19509,  19009,  18509,  18009,  17509,  17009,  16509,\n        16009,  15509,  15009,  14509,  14009,  13509,  13009,  12509,\n        12009,  11509,  11009,  10509,  10009,   9509,   9009,   8509,\n         8009,   7509,   7009,   6509,   6009,   5509,   5009,   4509,\n         4009,   3509,   3009,   2509,   2009,   1509,   1009,    509])</pre> In\u00a0[68]: Copied! <pre>b.visualize()\n</pre> b.visualize() Out[68]: <p>Ceci permet de comprendre le calcul fait plus haut.</p> In\u00a0[69]: Copied! <pre>a.max(axis=1).compute()\n</pre> a.max(axis=1).compute() Out[69]: <pre>array([  499,   999,  1499,  1999,  2499,  2999,  3499,  3999,  4499,\n        4999,  5499,  5999,  6499,  6999,  7499,  7999,  8499,  8999,\n        9499,  9999, 10499, 10999, 11499, 11999, 12499, 12999, 13499,\n       13999, 14499, 14999, 15499, 15999, 16499, 16999, 17499, 17999,\n       18499, 18999, 19499, 19999, 20499, 20999, 21499, 21999, 22499,\n       22999, 23499, 23999, 24499, 24999, 25499, 25999, 26499, 26999,\n       27499, 27999, 28499, 28999, 29499, 29999, 30499, 30999, 31499,\n       31999, 32499, 32999, 33499, 33999, 34499, 34999, 35499, 35999,\n       36499, 36999, 37499, 37999, 38499, 38999, 39499, 39999, 40499,\n       40999, 41499, 41999, 42499, 42999, 43499, 43999, 44499, 44999,\n       45499, 45999, 46499, 46999, 47499, 47999, 48499, 48999, 49499,\n       49999, 50499, 50999, 51499, 51999, 52499, 52999, 53499, 53999,\n       54499, 54999, 55499, 55999, 56499, 56999, 57499, 57999, 58499,\n       58999, 59499, 59999, 60499, 60999, 61499, 61999, 62499, 62999,\n       63499, 63999, 64499, 64999, 65499, 65999, 66499, 66999, 67499,\n       67999, 68499, 68999, 69499, 69999, 70499, 70999, 71499, 71999,\n       72499, 72999, 73499, 73999, 74499, 74999, 75499, 75999, 76499,\n       76999, 77499, 77999, 78499, 78999, 79499, 79999, 80499, 80999,\n       81499, 81999, 82499, 82999, 83499, 83999, 84499, 84999, 85499,\n       85999, 86499, 86999, 87499, 87999, 88499, 88999, 89499, 89999,\n       90499, 90999, 91499, 91999, 92499, 92999, 93499, 93999, 94499,\n       94999, 95499, 95999, 96499, 96999, 97499, 97999, 98499, 98999,\n       99499, 99999])</pre> In\u00a0[70]: Copied! <pre>l = list(range(1, 20))\nl[::]\n</pre> l = list(range(1, 20)) l[::] Out[70]: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</pre> In\u00a0[71]: Copied! <pre># l[indice de d\u00e9but: indice de fin (optionnel = dernier indice selon le sens):pas (optionnel = 1)]\nl[:]\n</pre> # l[indice de d\u00e9but: indice de fin (optionnel = dernier indice selon le sens):pas (optionnel = 1)] l[:] Out[71]: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</pre> In\u00a0[72]: Copied! <pre>l[::-1]\n</pre> l[::-1] Out[72]: <pre>[19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</pre> In\u00a0[73]: Copied! <pre>l[3:1:-1]\n</pre> l[3:1:-1] Out[73]: <pre>[4, 3]</pre> In\u00a0[74]: Copied! <pre>l[15:2:-3]\n</pre> l[15:2:-3] Out[74]: <pre>[16, 13, 10, 7, 4]</pre>"},{"location":"distrib/dask/dask-array/#dask-array","title":"Dask array\u00b6","text":"<p>Permet de manipuler des tableau multi-dimensionnels.</p> <p>Ce code cr\u00e9\u00e9 une vecteur de 100 000 \u00e9l\u00e9ments et change sa forme (reshape) vers une matrice de 200 lignes et 500 colonnes.</p>"},{"location":"distrib/dask/dask-array/#indexation-et-acces-aux-donnees","title":"Indexation et acc\u00e8s aux donn\u00e9es\u00b6","text":"<p>API similaire au slicing Python, Numpy et DataFrame de Pandas.</p>"},{"location":"distrib/dask/dask-array/#methodes-et-api","title":"M\u00e9thodes et API\u00b6","text":"<p>Similiare \u00e0 Numpy et DataFrame de Pandas. Toujours ne pas oublier de faire un compute() pour obtenir le r\u00e9sultat final. Le cha\u00eenage de m\u00e9thode est possible.</p>"},{"location":"distrib/dask/dask-array/#petit-apparte-sur-les-slices","title":"Petit appart\u00e9 sur les slices\u00b6","text":""},{"location":"distrib/dask/dask-bag/","title":"Dask Bag","text":"<p>Collection non ordonn\u00e9e avec r\u00e9p\u00e9ition et donc sans index. Cela ne ressemble \u00e0 une liste car cette derni\u00e8re est index\u00e9e et ordonn\u00e9e, et cela ne ressemble pas \u00e0 un ensemble (set) car ce dernier n'a pas de r\u00e9p\u00e9tition.</p> In\u00a0[17]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport dask.bag as db\n\nb = db.from_sequence([1, 2, 3, 4, 5, 6, 2, 1], npartitions=3)\nb\n</pre> import numpy as np import pandas as pd import dask.bag as db  b = db.from_sequence([1, 2, 3, 4, 5, 6, 2, 1], npartitions=3) b Out[17]: <pre>dask.bag&lt;from_sequence, npartitions=3&gt;</pre> In\u00a0[18]: Copied! <pre>b.compute()\n</pre> b.compute() Out[18]: <pre>[1, 2, 3, 4, 5, 6, 2, 1]</pre> In\u00a0[19]: Copied! <pre>odd_numbers = b.filter(lambda x: x % 2) # ou bien lambda x: x % 2 != 0\nodd_numbers\n</pre> odd_numbers = b.filter(lambda x: x % 2) # ou bien lambda x: x % 2 != 0 odd_numbers Out[19]: <pre>dask.bag&lt;filter-lambda, npartitions=3&gt;</pre> In\u00a0[20]: Copied! <pre>odd_numbers.compute()\n</pre> odd_numbers.compute() Out[20]: <pre>[1, 3, 5, 1]</pre> In\u00a0[21]: Copied! <pre>distinct_numbers = b.distinct()\ndistinct_numbers\n</pre> distinct_numbers = b.distinct() distinct_numbers Out[21]: <pre>dask.bag&lt;distinct-aggregate, npartitions=1&gt;</pre> In\u00a0[22]: Copied! <pre>distinct_numbers.compute()\n</pre> distinct_numbers.compute() Out[22]: <pre>[1, 2, 3, 4, 5, 6]</pre> In\u00a0[28]: Copied! <pre>distinct_numbers.visualize()\n</pre> distinct_numbers.visualize() Out[28]: In\u00a0[24]: Copied! <pre>times_ten_numbers = b.map(lambda x: x * 10)\ntimes_ten_numbers.compute()\n</pre> times_ten_numbers = b.map(lambda x: x * 10) times_ten_numbers.compute() Out[24]: <pre>[10, 20, 30, 40, 50, 60, 20, 10]</pre> In\u00a0[26]: Copied! <pre>c = db.zip(b, times_ten_numbers)\nc\n</pre> c = db.zip(b, times_ten_numbers) c Out[26]: <pre>dask.bag&lt;zip, npartitions=3&gt;</pre> In\u00a0[27]: Copied! <pre>c.compute()\n</pre> c.compute() Out[27]: <pre>[(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60), (2, 20), (1, 10)]</pre>"},{"location":"distrib/dask/dask-bag/#dask-bag","title":"Dask Bag\u00b6","text":""},{"location":"distrib/dask/dask-bag/#methodes-et-apis","title":"M\u00e9thodes et apis\u00b6","text":"<p>Les op\u00e9rateur de manipulation de collections sont disponibles sur les Bag. Vous pouvez voir une docmentation visuelle de ces op\u00e9rateurs sur le site de reactiveX. Par exemple, voici la doc visuelle de zip et de map.</p> <p>Le cha\u00eenage de ces op\u00e9rateurs est possible, permettant ainsi d'exprimer plusieurs op\u00e9ration en une seule ligne de code.</p> <ul> <li>Filter: garde les \u00e9l\u00e9ments dont le r\u00e9sultat de la lambda est True ou diff\u00e9rent de 0 (on dit dans le jargon que c'est un \"truthy value\").</li> </ul>"},{"location":"distrib/dask/dask-df/","title":"Dask dataframe","text":"<p>Un dataframe est une structure de donn\u00e9es qui permet de stockers donn\u00e9es tabulaires (lignes et colonnes o\u00f9 chaque colonne est identifi\u00e9e par un nom). Il est similaire \u00e0 une table dans une base de donn\u00e9es ou \u00e0 une feuille de calcul dans Excel.</p> <p>Les dataframes Dask sont con\u00e7us pour traiter de gros</p> In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport pandas as pd\n\nimport dask.dataframe as dd\n</pre> import numpy as np import pandas as pd  import dask.dataframe as dd <p>Cr\u00e9ation de 2400 dates s\u00e9apr\u00e9es de 1h</p> In\u00a0[\u00a0]: Copied! <pre>index = pd.date_range(\"2021-09-01\", periods=2400, freq=\"1h\")\nindex\n</pre> index = pd.date_range(\"2021-09-01\", periods=2400, freq=\"1h\") index Out[\u00a0]: <pre>DatetimeIndex(['2021-09-01 00:00:00', '2021-09-01 01:00:00',\n               '2021-09-01 02:00:00', '2021-09-01 03:00:00',\n               '2021-09-01 04:00:00', '2021-09-01 05:00:00',\n               '2021-09-01 06:00:00', '2021-09-01 07:00:00',\n               '2021-09-01 08:00:00', '2021-09-01 09:00:00',\n               ...\n               '2021-12-09 14:00:00', '2021-12-09 15:00:00',\n               '2021-12-09 16:00:00', '2021-12-09 17:00:00',\n               '2021-12-09 18:00:00', '2021-12-09 19:00:00',\n               '2021-12-09 20:00:00', '2021-12-09 21:00:00',\n               '2021-12-09 22:00:00', '2021-12-09 23:00:00'],\n              dtype='datetime64[ns]', length=2400, freq='h')</pre> <p>Cr\u00e9ation d'un dataframe pandas de dates avec 3 colonnes.</p> <ol> <li>\"a\" : un indetifiant de 0 \u00e0 2399</li> <li>\"b\" : un carat\u00e8re pris de la liste <code>\"abcaddbe\" * 300</code> (8 caract\u00e8res * 300 = 2400 lignes) un par un et r\u00e9partis sur chaque ligne</li> <li>la colonne index : une date parmi les 2400 dates g\u00e9n\u00e9r\u00e9es plus haut (peremt de lab\u00e9liser ou identifier la ligne de fa\u00e7on unique, comme la cl\u00e9 primaire dans une BDD relationnelle)</li> </ol> In\u00a0[\u00a0]: Copied! <pre>df = pd.DataFrame({\"a\": np.arange(2400), \"b\": list(\"abcaddbe\" * 300)}, index=index)\ndf\n</pre> df = pd.DataFrame({\"a\": np.arange(2400), \"b\": list(\"abcaddbe\" * 300)}, index=index) df Out[\u00a0]: a b 2021-09-01 00:00:00 0 a 2021-09-01 01:00:00 1 b 2021-09-01 02:00:00 2 c 2021-09-01 03:00:00 3 a 2021-09-01 04:00:00 4 d ... ... ... 2021-12-09 19:00:00 2395 a 2021-12-09 20:00:00 2396 d 2021-12-09 21:00:00 2397 d 2021-12-09 22:00:00 2398 b 2021-12-09 23:00:00 2399 e <p>2400 rows \u00d7 2 columns</p> <p>Cr\u00e9ation d'un dataframe dask \u00e0 partir du dataframe pandas en demandant de r\u00e9partir les donn\u00e9es sur 10 paprtitions.</p> In\u00a0[\u00a0]: Copied! <pre>ddf = dd.from_pandas(df, npartitions=10)\nddf\n</pre> ddf = dd.from_pandas(df, npartitions=10) ddf Out[\u00a0]: Dask DataFrame Structure: a b npartitions=10 2021-09-01 00:00:00 int64 string 2021-09-11 00:00:00 ... ... ... ... ... 2021-11-30 00:00:00 ... ... 2021-12-09 23:00:00 ... ... Dask Name: frompandas, 1 expression <p>V\u00e9rification des indicdes de d\u00e9but et de fin de chaque partition (l'indice de fin d'une partition est l'indice de d\u00e9but de la partition suivante - 1).</p> In\u00a0[\u00a0]: Copied! <pre>ddf.divisions\n</pre> ddf.divisions Out[\u00a0]: <pre>(Timestamp('2021-09-01 00:00:00'),\n Timestamp('2021-09-11 00:00:00'),\n Timestamp('2021-09-21 00:00:00'),\n Timestamp('2021-10-01 00:00:00'),\n Timestamp('2021-10-11 00:00:00'),\n Timestamp('2021-10-21 00:00:00'),\n Timestamp('2021-10-31 00:00:00'),\n Timestamp('2021-11-10 00:00:00'),\n Timestamp('2021-11-20 00:00:00'),\n Timestamp('2021-11-30 00:00:00'),\n Timestamp('2021-12-09 23:00:00'))</pre> <p>Acc\u00e8s \u00e0 une partition particuli\u00e8re</p> In\u00a0[\u00a0]: Copied! <pre>ddf.partitions[1]\n</pre> ddf.partitions[1] Out[\u00a0]: Dask DataFrame Structure: a b npartitions=1 2021-09-11 int64 string 2021-09-21 ... ... Dask Name: partitions, 2 expressions In\u00a0[\u00a0]: Copied! <pre>df[\"b\"] # Ou df.b\n</pre> df[\"b\"] # Ou df.b Out[\u00a0]: <pre>2021-09-01 00:00:00    a\n2021-09-01 01:00:00    b\n2021-09-01 02:00:00    c\n2021-09-01 03:00:00    a\n2021-09-01 04:00:00    d\n                      ..\n2021-12-09 19:00:00    a\n2021-12-09 20:00:00    d\n2021-12-09 21:00:00    d\n2021-12-09 22:00:00    b\n2021-12-09 23:00:00    e\nFreq: h, Name: b, Length: 2400, dtype: object</pre> In\u00a0[\u00a0]: Copied! <pre>ddf.b # ou ddf[\"a\"]\n</pre> ddf.b # ou ddf[\"a\"] Out[\u00a0]: <pre>Dask Series Structure:\nnpartitions=10\n2021-09-01 00:00:00    string\n2021-09-11 00:00:00       ...\n                        ...  \n2021-11-30 00:00:00       ...\n2021-12-09 23:00:00       ...\nDask Name: getitem, 2 expressions\nExpr=df['b']</pre> <p>S\u00e9lection d'un intervalles d'indices</p> In\u00a0[\u00a0]: Copied! <pre>df[\"2021-10-01\": \"2021-10-09 5:00\"]\n</pre> df[\"2021-10-01\": \"2021-10-09 5:00\"] Out[\u00a0]: a b 2021-10-01 00:00:00 720 a 2021-10-01 01:00:00 721 b 2021-10-01 02:00:00 722 c 2021-10-01 03:00:00 723 a 2021-10-01 04:00:00 724 d ... ... ... 2021-10-09 01:00:00 913 b 2021-10-09 02:00:00 914 c 2021-10-09 03:00:00 915 a 2021-10-09 04:00:00 916 d 2021-10-09 05:00:00 917 d <p>198 rows \u00d7 2 columns</p> In\u00a0[\u00a0]: Copied! <pre>ddf[\"2021-10-01\": \"2021-10-09 5:00\"]\n</pre> ddf[\"2021-10-01\": \"2021-10-09 5:00\"] Out[\u00a0]: Dask DataFrame Structure: a b npartitions=1 2021-10-01 00:00:00.000000000 int64 string 2021-10-09 05:00:59.999999999 ... ... Dask Name: loc, 2 expressions <p>On remarque que dask n'\u00e9value pas tout de suite l'op\u00e9ration (lazy).</p> <p>Dask est paresseux (lazy). Il faut donc appeler la m\u00e9thode <code>compute()</code> pour \u00e9valuer les r\u00e9sultats.</p> In\u00a0[\u00a0]: Copied! <pre>ddf[\"2021-10-01\": \"2021-10-09 5:00\"].compute()\n</pre> ddf[\"2021-10-01\": \"2021-10-09 5:00\"].compute() Out[\u00a0]: a b 2021-10-01 00:00:00 720 a 2021-10-01 01:00:00 721 b 2021-10-01 02:00:00 722 c 2021-10-01 03:00:00 723 a 2021-10-01 04:00:00 724 d ... ... ... 2021-10-09 01:00:00 913 b 2021-10-09 02:00:00 914 c 2021-10-09 03:00:00 915 a 2021-10-09 04:00:00 916 d 2021-10-09 05:00:00 917 d <p>198 rows \u00d7 2 columns</p> <p>Simlaire \u00e0 NumPy et pandas, sauf qu'il faut consid\u00e9rer que Dask est paresseux (lazy) et qu'il faut appeler la m\u00e9thode <code>compute()</code> pour \u00e9valuer les r\u00e9sultats.</p> In\u00a0[\u00a0]: Copied! <pre>ddf.head()\n</pre> ddf.head() Out[\u00a0]: a b 2021-09-01 00:00:00 0 a 2021-09-01 01:00:00 1 b 2021-09-01 02:00:00 2 c 2021-09-01 03:00:00 3 a 2021-09-01 04:00:00 4 d In\u00a0[\u00a0]: Copied! <pre>ddf.a.mean() # Non ca\n</pre> ddf.a.mean() # Non ca Out[\u00a0]: <pre>&lt;dask_expr.expr.Scalar: expr=df['a'].mean(), dtype=float64&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>ddf.a.mean().compute()\n</pre> ddf.a.mean().compute() Out[\u00a0]: <pre>np.float64(1199.5)</pre> In\u00a0[\u00a0]: Copied! <pre>ddf.b.unique()\n</pre> ddf.b.unique() Out[\u00a0]: <pre>Dask Series Structure:\nnpartitions=10\n    string\n       ...\n     ...  \n       ...\n       ...\nDask Name: unique, 3 expressions\nExpr=Unique(frame=df['b'])</pre> In\u00a0[\u00a0]: Copied! <pre>ddf.b.unique().compute()\n</pre> ddf.b.unique().compute() Out[\u00a0]: <pre>0    e\n0    c\n1    d\n0    a\n0    b\nName: b, dtype: string</pre> <p>On peut chainer les appels de m\u00e9thodes.</p> <p>Ici, on r\u00e9cup\u00e8re la somme cumul\u00e9e de la colonne \"a\" pour l'intervalle <code>[\"2021-10-01\": \"2021-10-09 5:00\"]</code> et on lui soustrait 100.</p> In\u00a0[\u00a0]: Copied! <pre>result = ddf[\"2021-10-01\": \"2021-10-09 5:00\"].a.cumsum() - 100\nresult\n</pre> result = ddf[\"2021-10-01\": \"2021-10-09 5:00\"].a.cumsum() - 100 result Out[\u00a0]: <pre>Dask Series Structure:\nnpartitions=1\n2021-10-01 00:00:00.000000000    int64\n2021-10-09 05:00:59.999999999      ...\nDask Name: sub, 5 expressions\nExpr=CumSum(frame=(LocSlice(frame=df, iindexer=slice(Timestamp('2021-10-01 00:00:00'), Timestamp('2021-10-09 05:00:59.999999999'), None)))['a'], skipna=True) - 100</pre> In\u00a0[\u00a0]: Copied! <pre>result.compute()\n</pre> result.compute() Out[\u00a0]: <pre>2021-10-01 00:00:00       620\n2021-10-01 01:00:00      1341\n2021-10-01 02:00:00      2063\n2021-10-01 03:00:00      2786\n2021-10-01 04:00:00      3510\n                        ...  \n2021-10-09 01:00:00    158301\n2021-10-09 02:00:00    159215\n2021-10-09 03:00:00    160130\n2021-10-09 04:00:00    161046\n2021-10-09 05:00:00    161963\nFreq: h, Name: a, Length: 198, dtype: int64</pre> In\u00a0[\u00a0]: Copied! <pre>s = pd.Series([2, np.nan, 5, -1, 0])\ns\n</pre> s = pd.Series([2, np.nan, 5, -1, 0]) s Out[\u00a0]: <pre>0    2.0\n1    NaN\n2    5.0\n3   -1.0\n4    0.0\ndtype: float64</pre> In\u00a0[\u00a0]: Copied! <pre>s.cumsum()\n</pre> s.cumsum() Out[\u00a0]: <pre>0    2.0\n1    NaN\n2    7.0\n3    6.0\n4    6.0\ndtype: float64</pre> <p>Gr\u00e2he de t\u00e2ches de la variable <code>result</code> qui correspond \u00e0 la somme cumul\u00e9e calcul\u00e9e pr\u00e9c\u00e9demment. La m\u00e9thode <code>visualize()</code> n\u00e9cessite d'installer le binaire de <code>graphviz</code> (via votre gestionnaire de paquets ou via un installeur fourni sur le site officiel) ainsiq que le module qui porte le m\u00eame nom.</p> In\u00a0[\u00a0]: Copied! <pre>result.dask\n</pre> result.dask Out[\u00a0]: <pre>{('sub-5a8ce658ce881b9a168109251a3109de',\n  0): &lt;Task ('sub-5a8ce658ce881b9a168109251a3109de', 0) sub(...)&gt;,\n ('cumulativefinalize-26a6f68b010d9b3b81956d1fe88e1d08',\n  0): ('cumsum-dc13e540bc07335397aa375278c5fa3f', 0),\n ('operation-5630c696a59039a7a9170475b5e6abe8',\n  0): &lt;Task ('operation-5630c696a59039a7a9170475b5e6abe8', 0) operation(...)&gt;,\n ('cumsum-dc13e540bc07335397aa375278c5fa3f',\n  0): &lt;Task ('cumsum-dc13e540bc07335397aa375278c5fa3f', 0) cumsum(...)&gt;,\n ('getitem-f1025e3e21b7f218b241648926d54bdc',\n  0): &lt;Task ('getitem-f1025e3e21b7f218b241648926d54bdc', 0) getitem(...)&gt;,\n ('loc-fff6b95ce0f38ef749afb35f08fb5c77',\n  0): &lt;Task ('loc-fff6b95ce0f38ef749afb35f08fb5c77', 0) loc(...)&gt;,\n ('partitions-bf0af511f3f618def961c7abe2804060',\n  0): Alias(('partitions-bf0af511f3f618def961c7abe2804060', 0)-&gt;('frompandas-9e3ad60c306d3e285fbbed807f12dcbe', 3)),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  0): DataNode(                       a  b\n 2021-09-01 00:00:00    0  a\n 2021-09-01 01:00:00    1  b\n 2021-09-01 02:00:00    2  c\n 2021-09-01 03:00:00    3  a\n 2021-09-01 04:00:00    4  d\n ...                  ... ..\n 2021-09-10 19:00:00  235  a\n 2021-09-10 20:00:00  236  d\n 2021-09-10 21:00:00  237  d\n 2021-09-10 22:00:00  238  b\n 2021-09-10 23:00:00  239  e\n \n [240 rows x 2 columns]),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  1): DataNode(                       a  b\n 2021-09-11 00:00:00  240  a\n 2021-09-11 01:00:00  241  b\n 2021-09-11 02:00:00  242  c\n 2021-09-11 03:00:00  243  a\n 2021-09-11 04:00:00  244  d\n ...                  ... ..\n 2021-09-20 19:00:00  475  a\n 2021-09-20 20:00:00  476  d\n 2021-09-20 21:00:00  477  d\n 2021-09-20 22:00:00  478  b\n 2021-09-20 23:00:00  479  e\n \n [240 rows x 2 columns]),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  2): DataNode(                       a  b\n 2021-09-21 00:00:00  480  a\n 2021-09-21 01:00:00  481  b\n 2021-09-21 02:00:00  482  c\n 2021-09-21 03:00:00  483  a\n 2021-09-21 04:00:00  484  d\n ...                  ... ..\n 2021-09-30 19:00:00  715  a\n 2021-09-30 20:00:00  716  d\n 2021-09-30 21:00:00  717  d\n 2021-09-30 22:00:00  718  b\n 2021-09-30 23:00:00  719  e\n \n [240 rows x 2 columns]),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  3): DataNode(                       a  b\n 2021-10-01 00:00:00  720  a\n 2021-10-01 01:00:00  721  b\n 2021-10-01 02:00:00  722  c\n 2021-10-01 03:00:00  723  a\n 2021-10-01 04:00:00  724  d\n ...                  ... ..\n 2021-10-10 19:00:00  955  a\n 2021-10-10 20:00:00  956  d\n 2021-10-10 21:00:00  957  d\n 2021-10-10 22:00:00  958  b\n 2021-10-10 23:00:00  959  e\n \n [240 rows x 2 columns]),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  4): DataNode(                        a  b\n 2021-10-11 00:00:00   960  a\n 2021-10-11 01:00:00   961  b\n 2021-10-11 02:00:00   962  c\n 2021-10-11 03:00:00   963  a\n 2021-10-11 04:00:00   964  d\n ...                   ... ..\n 2021-10-20 19:00:00  1195  a\n 2021-10-20 20:00:00  1196  d\n 2021-10-20 21:00:00  1197  d\n 2021-10-20 22:00:00  1198  b\n 2021-10-20 23:00:00  1199  e\n \n [240 rows x 2 columns]),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  5): DataNode(                        a  b\n 2021-10-21 00:00:00  1200  a\n 2021-10-21 01:00:00  1201  b\n 2021-10-21 02:00:00  1202  c\n 2021-10-21 03:00:00  1203  a\n 2021-10-21 04:00:00  1204  d\n ...                   ... ..\n 2021-10-30 19:00:00  1435  a\n 2021-10-30 20:00:00  1436  d\n 2021-10-30 21:00:00  1437  d\n 2021-10-30 22:00:00  1438  b\n 2021-10-30 23:00:00  1439  e\n \n [240 rows x 2 columns]),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  6): DataNode(                        a  b\n 2021-10-31 00:00:00  1440  a\n 2021-10-31 01:00:00  1441  b\n 2021-10-31 02:00:00  1442  c\n 2021-10-31 03:00:00  1443  a\n 2021-10-31 04:00:00  1444  d\n ...                   ... ..\n 2021-11-09 19:00:00  1675  a\n 2021-11-09 20:00:00  1676  d\n 2021-11-09 21:00:00  1677  d\n 2021-11-09 22:00:00  1678  b\n 2021-11-09 23:00:00  1679  e\n \n [240 rows x 2 columns]),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  7): DataNode(                        a  b\n 2021-11-10 00:00:00  1680  a\n 2021-11-10 01:00:00  1681  b\n 2021-11-10 02:00:00  1682  c\n 2021-11-10 03:00:00  1683  a\n 2021-11-10 04:00:00  1684  d\n ...                   ... ..\n 2021-11-19 19:00:00  1915  a\n 2021-11-19 20:00:00  1916  d\n 2021-11-19 21:00:00  1917  d\n 2021-11-19 22:00:00  1918  b\n 2021-11-19 23:00:00  1919  e\n \n [240 rows x 2 columns]),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  8): DataNode(                        a  b\n 2021-11-20 00:00:00  1920  a\n 2021-11-20 01:00:00  1921  b\n 2021-11-20 02:00:00  1922  c\n 2021-11-20 03:00:00  1923  a\n 2021-11-20 04:00:00  1924  d\n ...                   ... ..\n 2021-11-29 19:00:00  2155  a\n 2021-11-29 20:00:00  2156  d\n 2021-11-29 21:00:00  2157  d\n 2021-11-29 22:00:00  2158  b\n 2021-11-29 23:00:00  2159  e\n \n [240 rows x 2 columns]),\n ('frompandas-9e3ad60c306d3e285fbbed807f12dcbe',\n  9): DataNode(                        a  b\n 2021-11-30 00:00:00  2160  a\n 2021-11-30 01:00:00  2161  b\n 2021-11-30 02:00:00  2162  c\n 2021-11-30 03:00:00  2163  a\n 2021-11-30 04:00:00  2164  d\n ...                   ... ..\n 2021-12-09 19:00:00  2395  a\n 2021-12-09 20:00:00  2396  d\n 2021-12-09 21:00:00  2397  d\n 2021-12-09 22:00:00  2398  b\n 2021-12-09 23:00:00  2399  e\n \n [240 rows x 2 columns])}</pre> In\u00a0[\u00a0]: Copied! <pre>result.visualize()\n</pre> result.visualize() Out[\u00a0]: In\u00a0[\u00a0]: Copied! <pre>uq = ddf.b.unique()\nuq.compute()\nuq.visualize()\n</pre> uq = ddf.b.unique() uq.compute() uq.visualize() Out[\u00a0]:"},{"location":"distrib/dask/dask-df/#dask-dataframe","title":"Dask dataframe\u00b6","text":""},{"location":"distrib/dask/dask-df/#indexation","title":"Indexation\u00b6","text":"<p>API simiaire \u00e0 celle du DataFrame pandas et de des tableaus NumPy.</p> <p>L'exemple suivant s\u00e9lectionne la colonne \"b\" avec le DataFrame dask et le DataFrame pandas.</p>"},{"location":"distrib/dask/dask-df/#calcul-ou-evaluation-des-resultats","title":"Calcul ou \u00e9valuation des r\u00e9sultats\u00b6","text":""},{"location":"distrib/dask/dask-df/#methodes-ou-api","title":"M\u00e9thodes (ou api)\u00b6","text":""},{"location":"distrib/dask/dask-df/#somme-cumulee","title":"Somme cumul\u00e9e\u00b6","text":"<p>Calcule la somme au fut et \u00e0 mesure des lignes. La somme totale ou final se situera \u00e0 la derni\u00e8re ligne.</p> <p>Voici un exemple avec Pandas (Series et une DataFrame en une seule dimension, ou une colonne d'un DataFrame).</p>"},{"location":"distrib/dask/dask-df/#graphe-de-taches","title":"Graphe de t\u00e2ches\u00b6","text":""},{"location":"distrib/dask/dask-misc/","title":"Autres fonctionnalit\u00e9s","text":"In\u00a0[1]: Copied! <pre>import dask\n\n@dask.delayed\ndef inc(x):\n   return x + 1\n\n@dask.delayed\ndef add(x, y):\n   return x + y\n\na = inc(1)       # no work has happened yet\nb = inc(2)       # no work has happened yet\nc = add(a, b)    # no work has happened yet\n\nc.compute()  # This triggers all of the above computations\n</pre> import dask  @dask.delayed def inc(x):    return x + 1  @dask.delayed def add(x, y):    return x + y  a = inc(1)       # no work has happened yet b = inc(2)       # no work has happened yet c = add(a, b)    # no work has happened yet  c.compute()  # This triggers all of the above computations Out[1]: <pre>5</pre> In\u00a0[2]: Copied! <pre>c.visualize()\n</pre> c.visualize() Out[2]: <p>D\u00e9marrage du client et pr\u00e9paration des fonctions.</p> In\u00a0[1]: Copied! <pre>from dask.distributed import Client\n\nclient = Client()\n\ndef inc(x):\n   return x + 1\n\ndef add(x, y):\n   return x + y\n</pre> from dask.distributed import Client  client = Client()  def inc(x):    return x + 1  def add(x, y):    return x + y In\u00a0[2]: Copied! <pre>client.dashboard_link\n</pre> client.dashboard_link Out[2]: <pre>'http://127.0.0.1:8787/status'</pre> <p>Envoi des t\u00e2ches au client.</p> In\u00a0[7]: Copied! <pre>a = client.submit(inc, 1)     # work starts immediately\nb = client.submit(inc, 2)     # work starts immediately\nc = client.submit(add, a, b)  # work starts immediately\n\nc.result()                # block until work finishes, then gather result\n</pre> a = client.submit(inc, 1)     # work starts immediately b = client.submit(inc, 2)     # work starts immediately c = client.submit(add, a, b)  # work starts immediately  c.result()                # block until work finishes, then gather result Out[7]: <pre>5</pre> <p>Incr\u00e9mente les entiers de 0 \u00e0 99 en parall\u00e8le.</p> In\u00a0[2]: Copied! <pre>def f(x):\n    return x + 1\n\n# Run your code in parallel\nfutures = client.map(f, range(100))\nresults = client.gather(futures)\nresults\n</pre> def f(x):     return x + 1  # Run your code in parallel futures = client.map(f, range(100)) results = client.gather(futures) results Out[2]: <pre>[1,\n 2,\n 3,\n 4,\n 5,\n 6,\n 7,\n 8,\n 9,\n 10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 28,\n 29,\n 30,\n 31,\n 32,\n 33,\n 34,\n 35,\n 36,\n 37,\n 38,\n 39,\n 40,\n 41,\n 42,\n 43,\n 44,\n 45,\n 46,\n 47,\n 48,\n 49,\n 50,\n 51,\n 52,\n 53,\n 54,\n 55,\n 56,\n 57,\n 58,\n 59,\n 60,\n 61,\n 62,\n 63,\n 64,\n 65,\n 66,\n 67,\n 68,\n 69,\n 70,\n 71,\n 72,\n 73,\n 74,\n 75,\n 76,\n 77,\n 78,\n 79,\n 80,\n 81,\n 82,\n 83,\n 84,\n 85,\n 86,\n 87,\n 88,\n 89,\n 90,\n 91,\n 92,\n 93,\n 94,\n 95,\n 96,\n 97,\n 98,\n 99,\n 100]</pre> In\u00a0[3]: Copied! <pre>client.close()\n</pre> client.close()"},{"location":"distrib/dask/dask-misc/#autres-fonctionnalites","title":"Autres fonctionnalit\u00e9s\u00b6","text":""},{"location":"distrib/dask/dask-misc/#traitement-retarde-avec-daskdelayed","title":"Traitement retard\u00e9 avec @dask.delayed\u00b6","text":"<p>Permet de rajouter des t\u00e2ches lazy \u00e0 la queue de calcul. Les fonctions annont\u00e9es avec <code>@dask.delayed</code> sont ex\u00e9cut\u00e9es suite \u00e0 un <code>compute()</code>.</p>"},{"location":"distrib/dask/dask-misc/#traitement-immediat-avec-les-futures","title":"Traitement imm\u00e9diat avec les futures\u00b6","text":""},{"location":"distrib/spark/exos/","title":"Exercices PySpark","text":""},{"location":"distrib/spark/exos/#exercices-pyspark","title":"Exercices PySpark","text":"<ol> <li> <p>Log filtering</p> <ul> <li>Input data: a simplified log of a web server (i.e., a textual file). Each line of the file is associated with a URL request</li> <li> <p>Output: the lines containing the word \"google\". Store the output in a local folder, for simplicity</p> <pre><code># Input data\n66.249.69.97 --[24/Sep/2014:22:25:44  +0000]  \"GET http://www.google.com/bot.html\u201d\n66.249.69.97 --[24/Sep/2014:22:26:44  +0000]  \"GET  http://www.google.com/how.html\u201d\n66.249.69.97 --[24/Sep/2014:22:28:44 +0000] \"GET http://dbdmg.polito.it/course.html\u201d\n71.19.157.179 --[24/Sep/2014:22:30:12  +0000]  \"GET http://www.google.com/faq.html\u201d\n66.249.69.97 --[24/Sep/2014:31:28:44 +0000] \"GET http://dbdmg.polito.it/thesis.html\u201d\n\n# Output data\n66.249.69.97 --[24/Sep/2014:22:25:44  +0000]  \"GET http://www.google.com/bot.html\u201d\n66.249.69.97 --[24/Sep/2014:22:26:44  +0000]  \"GET  http://www.google.com/how.html\u201d\n71.19.157.179 --[24/Sep/2014:22:30:12  +0000]  \"GET http://www.google.com/faq.html\u201d\n</code></pre> </li> </ul> </li> <li> <p>Log analysis</p> <ul> <li>Input data: log of a web server (i.e., a textual file). Each line of the file is associated  with a URL request</li> <li> <p>Output: the list of distinct IP addresses associated with the connections to a googlepage (i.e., connections to URLs containing the term <code>www.google.com</code>). Store the output in a local folder, for simplicity</p> <pre><code>#Input data\n\n66.249.69.97 --[24/Sep/2014:22:25:44  +0000]  \"GET http://www.google.com/bot.html\u201d\n66.249.69.97 --[24/Sep/2014:22:26:44  +0000]  \"GET  http://www.google.com/how.html\u201d\n66.249.69.97 --[24/Sep/2014:22:28:44 +0000] \"GET http://dbdmg.polito.it/course.html\u201d\n71.19.157.179 --[24/Sep/2014:22:30:12  +0000]  \"GET http://www.google.com/faq.html\u201d\n66.249.69.95 --[24/Sep/2014:31:28:44 +0000] \"GET http://dbdmg.polito.it/thesis.html\u201d\n66.249.69.97 --[24/Sep/2014:56:26:44  +0000]  \"GET http://www.google.com/how.html\u201d\n56.249.69.97 --[24/Sep/2014:56:26:44  +0000]  \"GET http://www.google.com/how.html\u201d\n\n# Output data\n66.249.69.97\n71.19.157.179\n56.249.69.97\n</code></pre> </li> </ul> </li> <li> <p>Maximum value</p> <ul> <li>Input data: a collection of (structured) textual csv files containing the daily value of PM10 for a set of sensors. Each line of the files has the following format: <code>sensorId,date,PM10  value (\u03bcg/m3)\\n</code></li> <li> <p>Output: report the maximum value of PM10. Print the result on the standard output</p> <pre><code>#Input data\n\nsensorId,date,PM10  value (\u03bcg/m3)\ns1,2016-01-01,20.5\ns2,2016-01-01,30.1\ns1,2016-01-02,60.2\ns2,2016-01-02,20.4\ns1,2016-01-03,55.5\ns2,2016-01-03,52.5\n\n# Output data\n60.2\n</code></pre> </li> </ul> </li> <li> <p>Top-k maximum values</p> <ul> <li>Input data: a collection of (structured) textual csv files containing the daily value of PM10 for a set of sensors. Each line of the files has the following format: <code>sensorId,date,PM10 value (\u03bcg/m3)\\n</code></li> <li> <p>Output: report the top-3 maximum values of PM10. Print the result  on the standard  output.</p> <pre><code>#Input data\n\nsensorId,date,PM10  value (\u03bcg/m3)\ns1,2016-01-01,20.5\ns2,2016-01-01,30.1\ns1,2016-01-02,60.2\ns2,2016-01-02,20.4\ns1,2016-01-03,55.5\ns2,2016-01-03,52.5\n\n# Output data\n60.2\n</code></pre> </li> </ul> </li> </ol> Solutions log-filtering.py<pre><code>from pyspark.sql import SparkSession\nfrom pyspark.sql.dataframe import DataFrame\n\nlogFile = \"log-filtering-input.txt\"\nspark: SparkSession = SparkSession.builder.appName(\"log-filtering\").getOrCreate()\nlogData: DataFrame = spark.read.text(logFile).cache()\n\ndf = logData.filter(logData.value.contains('google'))\n\ndf.show(df.count())\n\ndf.write.save(\"log-filtering-output\", format=\"text\", mode=\"overwrite\")\n\nspark.stop()\n</code></pre> log-analysis.py<pre><code>from pyspark.sql import SparkSession, DataFrame, Row, functions as sf\n\nexercise_name = \"log-analysis\"\nlogFile = f\"{exercise_name}-input.txt\"\nspark: SparkSession = SparkSession.builder.appName(exercise_name).getOrCreate()\nlogData: DataFrame = spark.read.text(logFile).cache()\n\ndf = logData.filter(logData.value.contains('google'))\ndf = df.select(sf.split(df.value, \"\\\\s+\").getItem(0).alias(\"IP\")).distinct()\n\ndf.show(df.count())\ndf.write.save(f\"{exercise_name}-output\", format=\"text\", mode=\"overwrite\")\n\nspark.stop()\n</code></pre>"},{"location":"distrib/spark/exos/#exos-supplementaires","title":"Exos suppl\u00e9mentaires","text":"<ul> <li>Python<ul> <li>Travaux pratiques - Introduction \u00e0 Spark</li> <li>Marlowess/spark-exercises (v\u00e9rifier les branches pour les version r\u00e9centes de pyspark)</li> <li>Databricks Spark DF, SQL, ML Exercise - Solutions</li> <li>areibman/pyspark_exercises (pas de solutions avec pyspark)</li> </ul> </li> <li>Scala<ul> <li>jaceklaskowski spark-workshop</li> <li>Travaux pratiques - Introduction \u00e0 Spark et Scala</li> </ul> </li> </ul>"},{"location":"distrib/spark/spark/","title":"Apache Spark","text":""},{"location":"distrib/spark/spark/#apache-spark","title":"Apache Spark","text":"<p>Apache Spark est un moteur de traitement de donn\u00e9es massives open source, con\u00e7u pour traiter de grandes quantit\u00e9s de donn\u00e9es de mani\u00e8re distribu\u00e9e. Il est particuli\u00e8rement adapt\u00e9 pour les t\u00e2ches d'analyse de donn\u00e9es, de machine learning et de traitement en temps r\u00e9el. Il est utilisable avec plusieurs langages de programmation, notamment Python, Scala et Java.</p>"},{"location":"distrib/spark/spark/#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<p>Suivre le tutoriel get-started</p>"},{"location":"distrib/spark/spark/#liens","title":"Liens","text":"<ul> <li>Site officiel</li> <li>Suivre le tutoriel get-started</li> <li>Python<ul> <li>pyspark tutorial sparkbyexamples.com</li> <li>Tutoriel Pyspark : D\u00e9buter avec Pyspark</li> <li>Pyspark tutorial</li> <li>UrbanInstitute/pyspark-tutorials</li> </ul> </li> <li>Scala<ul> <li>Apache Spark Tutorial</li> <li>Tutorial on tutorialspoint</li> </ul> </li> <li>Java<ul> <li>Apache Spark in Practice</li> </ul> </li> <li>Tuto sparkUI</li> <li>Plateforme Databricks</li> </ul>"},{"location":"distrib/spark/spark/#commandes-utiles","title":"Commandes utiles","text":"<pre><code># Lancement de spark-master\nspark-class org.apache.spark.deploy.master.Master\n# Lancement de spark-worker\nspark-class org.apache.spark.deploy.worker.Worker [url du master]\n# Soumettre un job \u00e9crit en Python\nspark-submit --master [url du master] SimpleApp.py\n</code></pre>"},{"location":"dotnet/","title":"Bienvenue au cours \"Langage C# et Framework Dotnet\"","text":"","tags":["introduction"]},{"location":"dotnet/#bienvenue-au-cours-langage-c-et-framework-dotnet","title":"Bienvenue au cours \"Langage C# et Framework Dotnet\"","text":"","tags":["introduction"]},{"location":"dotnet/#introduction","title":"Introduction","text":"<p>C# est une langage de programmation moderne. .Net (prononc\u00e9 dotte nette) est un framework multiplateformes de d\u00e9veloppement d'applications de diff\u00e9rents types:</p> <ul> <li>Des application console</li> <li>Des serveurs web (API, pages g\u00e9n\u00e9r\u00e9es par le serveur) (avec ASP .net)</li> <li>Des sites web g\u00e9n\u00e9r\u00e9s par le serveur (Razor, Blazor server)</li> <li>Des applications web (webapp ou PWA) (Blazor WASM)</li> <li>Des application de bureau ou mobile (MAUI, UWP, WinForms, WPF)</li> </ul> <p>C# et .Net sont maintenus par Microsoft en OpenSource sur GitHub.</p>","tags":["introduction"]},{"location":"dotnet/#pre-requis","title":"Pr\u00e9-requis","text":"<ul> <li>Installer le SDK .Net.</li> <li>Visual studio Code (VSCode)</li> <li>Extension VSCode C# DevKit.</li> </ul>","tags":["introduction"]},{"location":"dotnet/#ressources-et-liens-utiles","title":"Ressources et liens utiles","text":"<ul> <li>emojipedia</li> <li>Complete list of github markdown emoji markup</li> <li>mkdocs material</li> </ul>","tags":["introduction"]},{"location":"dotnet/#license-credits-et-remerciements","title":"License, cr\u00e9dits et remerciements","text":"<ul> <li>Le cours est r\u00e9alis\u00e9 avec MKDocs et Material for MKDocs</li> <li>Ce support de cours est disponible sous licence Creative Commons Attribution 4.0 International (CC BY 4.0)</li> <li>Certaines images sont g\u00e9n\u00e9r\u00e9es via IA (Hotpot.ai)</li> </ul>","tags":["introduction"]},{"location":"dotnet/asp-dot-net-exercices/","title":"Exercices ASP.NET","text":""},{"location":"dotnet/asp-dot-net-exercices/#exercices-aspnet","title":"Exercices ASP.NET","text":""},{"location":"dotnet/asp-dot-net-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Cr\u00e9er un endpoint <code>/pair</code> qui retourne tous les entiers pairs entre 0 et 20<ul> <li>Par exemple, <code>GET /pair</code> retourne <code>[0, 2, 4, 6, 8, 10, ..., 20]</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/pair/{nb}</code> qui retourne tous les entiers pairs entre 0 et nb<ul> <li>Par exemple, <code>GET /pair/10</code> retourne <code>[0, 2, 4, 6, 8, 10]</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/impair/{nb}</code> qui retourne tous les entiers impairs entre 0 et nb<ul> <li>Par exemple, <code>GET /impair/10</code> retourne <code>[1, 3, 5, 7, 9]</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/consonnes/{word}</code> qui retourne la liste des consonnes d'un mot<ul> <li>Par exemple, <code>GET /consonnes/hello</code> retourne <code>[\"h\", \"l\", \"l\"]</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/longueur/{word}</code> qui retourne longueurs de la cha\u00eene de caract\u00e8res word<ul> <li>Par exemple, <code>GET /longueur/hello</code> retourne <code>5</code></li> </ul> </li> </ol>"},{"location":"dotnet/asp-dot-net-exercices/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Cr\u00e9er un endpoint <code>/palindrome/{word}</code> qui retourne <code>Est un palindrome</code> si <code>word</code> est un palindrome, sinon <code>N'est pas un palindrome</code><ul> <li>Par exemple, <code>GET /palindrome/toto</code> retourne <code>N'est pas un palindrome</code>, et <code>GET /palindrome/totot</code> retourne <code>Est un palindrome</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/schtroumpf/{nb1}/{nb2}</code> qui retourne le schtroumpf d'un tableau de <code>nb1</code> \u00e9l\u00e9ments al\u00e9atoires et d'un tableau de <code>nb2</code> \u00e9l\u00e9ments al\u00e9atoires. Les valeurs des deux tableaux sont comprises entre 1 et 12 <ul> <li>voir d\u00e9finition dans les exos C#</li> <li>Par exemple, <code>GET /schtroumpf/4/2</code> avec les tableaux al\u00e9atoire <code>[4, 8, 7, 12]</code> et <code>[3, 6]</code>, le r\u00e9sultat sera <code>279</code></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/notes</code> qui g\u00e9n\u00e8re 10 notes al\u00e9atoires et renvoie un json listant les notes, la moyenne et le nombre de notes sup\u00e9rieures \u00e0 la moyenne.<ul> <li>Exemple     <pre><code>{\n    \"notes\": [12, 15, 8, 10, 18, 14, 9, 11, 13, 16],\n    \"moyenne\": 12.6,\n    \"nbNotesSupMoyenne\": 5\n}\n</code></pre></li> </ul> </li> <li>Cr\u00e9er un endpoint <code>/notes/{nb}</code> qui g\u00e9n\u00e8re <code>nb</code> notes al\u00e9atoires et renvoie un json listant les notes, la moyenne et le nombre de notes sup\u00e9rieurs \u00e0 la moyenne.<ul> <li>Exemple: <code>/notes/10</code> <pre><code>{\n    \"notes\": [12, 15, 8, 10, 18, 14, 9, 11, 13, 16],\n    \"moyenne\": 12.6,\n    \"nbNotesSupMoyenne\": 5\n}\n</code></pre></li> </ul> </li> </ol> Solutions code<pre><code>using System.Reflection.Metadata.Ecma335;\n\nbool IsPalindromeAlgo(string input)\n{\n  for (int i = 0; i &lt; input.Length / 2; i++)\n  {\n    if (input[i] != input[input.Length - i - 1])\n    {\n      return false;\n    }\n  }\n  return true;\n}\n\nbool IsPalindromeEz(string input) =&gt; string.Join(\"\", input.Reverse()) == input;\n\nList&lt;int&gt; generateRandomIntList(int nb)\n{\n  List&lt;int&gt; items = [];\n  Random r = new();\n  for (int i = 0; i &lt; nb; i++)\n  {\n    items.Add(r.Next(1, 12));\n  }\n  return items;\n}\n\nint ComputeSchtroumpf(List&lt;int&gt; items1, List&lt;int&gt; items2)\n{\n  int result = 0;\n  foreach (var item1 in items1)\n  {\n    foreach (var item2 in items2)\n    {\n      result += item1 * item2;\n    }\n  }\n  return result;\n}\n\n\nint ComputeRandomSchtroumpf(int nb1, int nb2)\n{\n  Random r = new();\n  List&lt;int&gt; items1 = generateRandomIntList(nb1);\n  List&lt;int&gt; items2 = generateRandomIntList(nb2);\n  return ComputeSchtroumpf(items1, items2);\n}\n\nint ComputeExampleSchtroumpf()\n{\n  return ComputeSchtroumpf([4, 8, 7, 12], [3, 6]);\n}\n\nGradeResponse GenerateGradeResponse(int n = 10)\n{\n  var rng = new Random();\n  List&lt;int&gt; notes = Enumerable.Range(1, n).Select(_ =&gt; rng.Next(20)).ToList();\n  var avg = notes.Average();\n  int nbSup = notes.Where(note =&gt; note &gt; avg).Count();\n  return new GradeResponse(notes, avg, nbSup);\n}\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/pair\", () =&gt; Enumerable.Range(0, 11).Select(n =&gt; n * 2));\napp.MapGet(\"/pair/{nb}\", (int nb) =&gt; Enumerable.Range(0, nb + 1).Select(n =&gt; n % 2 == 0));\napp.MapGet(\"/impair/{nb}\", (int nb) =&gt; Enumerable.Range(0, nb + 1).Select(n =&gt; n % 2 != 0));\napp.MapGet(\"/consonnes/{mot}\", (string mot) =&gt; mot.ToLower().Where(c =&gt; !\"aiueoy\".Contains(c)));\napp.MapGet(\"/longueur/{word}\", (string word) =&gt; word.Length);\n\n\napp.MapGet(\"/palindrome/{word}\", (string word) =&gt; IsPalindromeAlgo(word) ? \"Est un palindrome\" : \"n'est pas un palindrome\");\napp.MapGet(\"/ez/palindrome/{word}\", (string word) =&gt; IsPalindromeEz(word) ? \"Est un palindrome\" : \"n'est pas un palindrome\");\napp.MapGet(\"/schtroumpf/{nb1}/{nb2}\", (int nb1, int nb2) =&gt; ComputeRandomSchtroumpf(nb1, nb2));\napp.MapGet(\"/example/schtroumpf/\", () =&gt; ComputeExampleSchtroumpf());\napp.MapGet(\"/notes\", GenerateGradeResponse);\napp.MapGet(\"/notes/{nb}\", (int nb) =&gt; GenerateGradeResponse(nb));\n\n\napp.Run();\n\n\nrecord GradeResponse(List&lt;int&gt; Notes, double Moyenne, int NbNotesSupMoyenne);\n</code></pre> appels de test<pre><code>@base_url=http://localhost:5286\n###\n{{base_url}}/pair\n###\n{{base_url}}/pair/5\n###\n{{base_url}}/consonnes/hello\n###\n{{base_url}}/consonnes/aaabb\n###\n{{base_url}}/palindrome/elle\n###\n{{base_url}}/palindrome/tintin\n###\n{{base_url}}/ez/palindrome/elle\n###\n{{base_url}}/ez/palindrome/tintin\n###\n{{base_url}}/example/schtroumpf/\n###\n{{base_url}}/schtroumpf/5/2\n###\n{{base_url}}/notes\n###\n{{base_url}}/notes/7\n</code></pre>"},{"location":"dotnet/asp-dot-net/","title":"ASP .Net","text":""},{"location":"dotnet/asp-dot-net/#asp-net","title":"ASP .Net","text":""},{"location":"dotnet/asp-dot-net/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Faire confiance au certificat SSL local (pour le dev) <code>dotnet dev-certs https --trust</code></li> </ul>"},{"location":"dotnet/asp-dot-net/#creation-dune-api-minimals-un-seul-fichier","title":"Cr\u00e9ation d'une API minimals (un seul fichier)","text":"<ul> <li>Cr\u00e9er un Projet d'API \"minimal API\" <code>dotnet new webapi -o HelloApi</code>. Ensuite, <code>cd HelloApi</code>.</li> <li>Les \u00e9l\u00e9ments suivants sont cr\u00e9\u00e9s (on peut voir avec un <code>ls</code>):<ul> <li>Program.cs: point d'entr\u00e9e de l'application qui d\u00e9finit d\u00e9j\u00e0 un API Rest et un endoint get.</li> <li>api01.csproj: fichier de configuration du projet.</li> <li>api01.http: fichier de test de l'API avec l'extension VSCode Rest Client.</li> <li>Properties, appsettings.Development.json et appsettings.json: permettent de configurer l'application et le serveur</li> </ul> </li> <li>Lancer le serveur <code>dotnet run</code>, ou en mode hot reload <code>dotnet watch run</code></li> <li>Tester l'API avec un client REST (comme Rest Client de VSCode)</li> </ul> calls.http<pre><code>@base_url = http://localhost:5122\n\nGET {{base_url}}/weatherforecast/\nAccept: application/json\n</code></pre>"},{"location":"dotnet/asp-dot-net/#autre-exemple","title":"Autre exemple","text":"calls.http<pre><code>var builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\nList&lt;Hero&gt; heroes = [\n  new() { Id = 1, Name = \"garan\", Role = Role.Fighter },\n  new() { Id = 2, Name = \"saraka\", Role = Role.Spport },\n];\n\napp.MapGet(\"/heroes\", () =&gt; heroes);\n// Path parameter\napp.MapGet(\"/heroes/{id}\", (int id) =&gt; heroes[id]);\napp.MapGet(\"/\", () =&gt; \"Hello World!\");\n\napp.Run();\n\npublic enum Role\n{\n  Fighter, Mage, Spport, Shooter\n}\npublic class Hero\n{\n  public int Id { get; set; }\n  public required string Name { get; set; }\n  public required Role Role { get; set; }\n}\n</code></pre>"},{"location":"dotnet/asp-dot-net/#ressources","title":"Ressources","text":"<ul> <li>Tutoriel officiel</li> </ul>"},{"location":"dotnet/csharp-exercices/","title":"Exercices","text":""},{"location":"dotnet/csharp-exercices/#exercices","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Activer la null safety</li> <li>Ne pas utiliser les fonctions de tri de .Net</li> </ul>"},{"location":"dotnet/csharp-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Ecrire un programme qui affiche un nombre al\u00e9atoire en utilisant la classe <code>Random</code>. Voir un exemple ici</li> <li>Ecrire une fonction qui g\u00e9n\u00e8re 2 entiers pseudo-al\u00e9atoires entre 0 et 50 et les affiche dans l'ordre croissant</li> <li>Ecrire une fonction qui g\u00e9n\u00e8re 3 entiers pseudo-al\u00e9atoires entre 0 et 50 et les affiche dans l'ordre croissant</li> <li>Ecrire une fonction qui g\u00e9n\u00e8re des entiers pseudo-al\u00e9atoires entre 10 et 20 et s'arr\u00eate lorsque le premier nombre g\u00e9n\u00e9r\u00e9 appara\u00eet une seconde fois</li> <li>Ecrire un programme qui g\u00e9n\u00e8re un nombre de d\u00e9part entre 0 et 9, et qui ensuite \u00e9crit la table de multiplication de ce nombre, pr\u00e9sent\u00e9e comme suit (cas du nombre 5).<ul> <li></li> </ul> </li> <li>Ecrire un programme qui g\u00e9n\u00e8re un tableau 2D \u00e9pars de 4 lignes. Pour chaque ligne, le nombre de colonnes est un nombre pseudo-al\u00e9atoire. Remplir cette matrice par des nombres pseudo-al\u00e9atoires de valeur max 999<ul> <li>Afficher cette matrice comme sur Excel. Conseil: utiliser la m\u00e9thode <code>PadRight</code></li> </ul> </li> <li>Ecrire un programme qui g\u00e9n\u00e8re deux tableaux de tailles pseudo-al\u00e9atoires et de contenus pseudo-al\u00e9atoires. Calculer le schtroumpf des deux tableaux et afficher le d\u00e9tail. Les nombres al\u00e9atoires sont compris entre 0 et 10.<ul> <li>Pour calculer le schtroumpf, il faut multiplier chaque \u00e9l\u00e9ment du tableau 1 par chaque \u00e9l\u00e9ment du tableau 2, et additionner le tout.</li> <li>Par exemple si l'on a : [4, 8, 7, 12] et [3, 6], le programme va afficher: <code>Le Schtroumpf sera : 3 x 4 + 3 x 8 + 3 x 7 + 3 x 12 + 6 x 4 + 6 x 8 + 6 x 7 + 6 x 12 = 279</code></li> </ul> </li> <li>Ecrivez un programme permettant de g\u00e9n\u00e9rer al\u00e9atoirement 10 notes comprises entre 0 et 20. Le programme, renvoie la liste et le nombre de notes sup\u00e9rieures \u00e0 la moyenne de la classe.</li> <li>Ecrire une fonction IsPalindrome(string) qui permet de dire si une cha\u00eene de caract\u00e8res est un palindrome, et ce Sans utiliser de fonction reverse,<ul> <li><code>IsPalindrome(\"toto\")</code> -&gt; false (car toto != otot)</li> <li><code>IsPalindrome(\"totot\")</code> -&gt; true</li> </ul> </li> <li>Ecrire une fonction IsPalindrome(int) qui permet de dire si un entier est un palindrome, et ce, sans transformer l'entier en String<ul> <li><code>IsPalindrome(1234)</code> -&gt; false</li> <li><code>IsPalindrome(12321)</code> -&gt; true</li> <li><code>IsPalindrome(1221)</code> -&gt; true</li> <li><code>IsPalindrome(1)</code> -&gt; true</li> </ul> </li> <li>Mod\u00e9lisation des pi\u00e8ce d'un ordinateur avec les classes.<ul> <li>Chaque pi\u00e8ce \u00e9lectronique d'un ordinateur est de type <code>ComputerPiece</code> et est d\u00e9finie par un prix et une consommation en watts.</li> <li>D\u00e9finir la classe <code>ComputerPiece</code> de telle fa\u00e7on \u00e0 ce que l'on ne peut pas l'instancier.</li> <li>Nous souhaitons mod\u00e9liser une classe <code>CPU</code> qui est une sorte de <code>ComputerPiece</code> avec une vitesse d'horloge et un nombre de coeurs.</li> <li>Mod\u00e9liser les classes <code>MotherBoard</code>, <code>RAM</code>, <code>GPU</code>, <code>SoundCard</code>, <code>BluetoothCard</code> en leur attribuant des propri\u00e9t\u00e9s sp\u00e9cifiques.</li> <li>La classe <code>Computer</code> contient des pi\u00e8ces requises (non nulles): 1 <code>MotherBoard</code>, 1 <code>CPU</code> et 1 <code>GPU</code>. Elle contient aussi des pi\u00e8ces optionnelles (qui peuvent \u00eatre nulles): 1 <code>SoundCard</code> et 1 <code>BluetoothCard</code>.</li> <li>Instancier un ordinateur qui n'a que les pi\u00e8ces requises</li> <li>Instancier un ordinateur qui a les pi\u00e8ces optionnelles</li> <li>Afficher les informations de chaque ordinateur en suivant ce mod\u00e8le<ul> <li>\"Ordinateur: CPU (ClockSpeed: 100, ...), GPU(ClockSpeed: 20, ...)\"</li> </ul> </li> <li>La classe <code>SliComputer</code> est un <code>Computer</code> qui contient un tableau qui peut contenir jusqu'\u00e0 9 GPU suppl\u00e9mentaires qui doivent \u00eatre du m\u00eame type que le GPU principal. Elle d\u00e9finit aussi une m\u00e9thode <code>bool IsSliCompliant()</code> qui retourne true unqiement si tout les GPU sont exactement les m\u00eames.</li> <li>Instancier un <code>SliComputer</code> avec 2 GPU suppl\u00e9mentaires identiques au GPU principal.</li> <li>Instancier un <code>SliComputer</code> avec 3 GPU suppl\u00e9mentaires diff\u00e9rents du GPU principal.</li> <li>Afficher le r\u00e9sultat de <code>IsSliCompliant()</code> \u00e0 chaque fois.</li> </ul> </li> </ol>"},{"location":"dotnet/csharp-exercices/#corrections-serie-1","title":"Corrections s\u00e9rie 1","text":"<ul> <li>Les corrections sont disponibles ci-dessous ainsi qu'en suivant ce lien</li> </ul> Exos de 1 \u00e0 5 exos de 1 \u00e0 5<pre><code>void RunExercice1()\n{\n  Console.WriteLine(\"Exercise 1\");\n  var r = new Random();\n  Console.WriteLine(r.Next());\n}\n\nvoid RunExercice2()\n{\n  Console.WriteLine(\"Exercise 2\");\n  var r = new Random(50);\n  int x = r.Next();\n  int y = r.Next();\n  if (x &lt; y)\n  {\n    Console.WriteLine($\"{x}, {y}\");\n  }\n  else\n  {\n    Console.WriteLine($\"{y}, {x}\");\n  }\n}\n\nvoid RunExercice3()\n{\n  var r = new Random();\n  int x = r.Next(50);\n  int y = r.Next(50);\n  int z = r.Next(50);\n  Console.WriteLine($\"Exercise 3: tri de {x}, {y} et {z}\");\n  if (x &lt; y)\n  {\n    if (z &lt; x)\n    {\n      Console.WriteLine($\"{z}, {x}, {y}\");\n    }\n    else if (z &lt; y)\n    {\n      Console.WriteLine($\"{x}, {z}, {y}\");\n    }\n    else\n    {\n      Console.WriteLine($\"{x}, {y}, {z}\");\n    }\n  }\n  else // y &lt;= x\n  {\n    if (z &lt; y)\n    {\n      Console.WriteLine($\"{z}, {y}, {x}\");\n    }\n    else if (z &lt; x)\n    {\n      Console.WriteLine($\"{y}, {z}, {x}\");\n    }\n    else\n    {\n      Console.WriteLine($\"{y}, {x}, {z}\");\n    }\n  }\n}\n\nvoid RunExercice4()\n{\n  var r = new Random();\n  int x = r.Next(50);\n  Console.WriteLine($\"Exercise 4: le premier nombre g\u00e9n\u00e9r\u00e9 est {x}\");\n  int nbIter = 1;\n  for (; x != r.Next(50); nbIter++)\n  { }\n  Console.WriteLine($\"Exercise 4: Nb it\u00e9ration avant de trouver {x} est de {nbIter}\");\n}\n\nvoid RunExercice5()\n{\n  var r3 = new Random();\n  var nb = r3.Next(10);\n  Console.WriteLine($\"Exercise 5: table de multiplication de {nb}:\");\n  for (int i = 0; i &lt;= 10; i++)\n  {\n    Console.WriteLine($\"{nb} x {i} = {nb * i}\");\n  }\n}\n\n\nvoid RunExercices()\n{\n  RunExercice1();\n  RunExercice2();\n  for (int i = 0; i &lt; 20; i++)\n  {\n    RunExercice3();\n  }\n\n  RunExercice4();\n  RunExercice5();\n\n}\n</code></pre> Exercice 11 Exercice 11<pre><code>class ComputerPiece\n{\n  // prorpi\u00e9t\u00e9 en lecture et \u00e9criture\n  public int WattUsage { get; set; }\n  // prorpi\u00e9t\u00e9 en lecture seule\n  public int Price { get; }\n\n  public ComputerPiece(int price)\n  {\n    Console.WriteLine(\"ComputerPiece constructor\");\n    this.Price = price;\n  }\n}\n\nclass PowerGenerator : ComputerPiece\n{\n  public PowerGenerator(int price) : base(price)\n  {\n  }\n}\n\nclass UsbPort : ComputerPiece\n{\n  public UsbPort(int price) : base(price)\n  {\n  }\n}\n\nclass CPU : ComputerPiece\n{\n  public CPU(int price) : base(price)\n  {\n  }\n  public int ClockSpeed { get; set; }\n  public int CoreCount { get; set; }\n}\n\nclass RAM : ComputerPiece\n{\n  public RAM(int price) : base(price)\n  {\n  }\n  public int Capacity { get; set; }\n}\n\nCPU cpu1 = new CPU(200);\ncpu1.WattUsage = 100;\nConsole.WriteLine(cpu1.WattUsage);\n\nCPU cpu2 = new(500);\ncpu2.WattUsage = 100;\nConsole.WriteLine(cpu2.WattUsage);\n\nCPU cpu3 = new(200)\n{\n  ClockSpeed = 100,\n  CoreCount = 8,\n  WattUsage = 10\n};\nConsole.WriteLine(cpu3);\n\n\nRAM ram1 = new(200)\n{\n  Capacity = 8000,\n  WattUsage = 10\n};\nConsole.WriteLine(ram1);\n\nComputerBox computerBox = new(10, 10, 5);\nConsole.WriteLine(computerBox);\n</code></pre>"},{"location":"dotnet/csharp-exercices/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Mod\u00e9lisation des formes g\u00e9om\u00e9triques avec les <code>Record</code><ol> <li>Cr\u00e9er un record <code>Circle</code> qui prend en param\u00e8tre du constructeur un <code>Radius</code><ul> <li>Ajouter les propri\u00e9t\u00e9s calcul\u00e9es publiques (en lecture seule): Area, <code>Circumference</code> et <code>Diameter</code></li> <li>Cr\u00e9er deux instances ayant le m\u00eame rayon et affichez les dans la console, en utilisant le ToString() propos\u00e9 par les record</li> <li>Comparer les deux cercles avec l\u2019op\u00e9rateur \u2018==\u2019. Ensuite, comparez en enlevant la nature record de Cercle. Que remarquez-vous ?</li> </ul> </li> <li>Cr\u00e9er un record abstract \u201cShape\u201d avec un constructeur vide et les propri\u00e9t\u00e9 en lecture seule abstraites: <code>Area</code> et <code>Circumference</code></li> <li>Faire en sorte que <code>Circle</code> h\u00e9rite de <code>Shape</code></li> <li>Cr\u00e9er un record \u201cRectangle\u201d qui h\u00e9rite de <code>Shape</code> et prend en param\u00e8tre du constructeur (<code>Width</code> et <code>Height</code>)<ul> <li>Impl\u00e9menter les propri\u00e9t\u00e9s calcul\u00e9es (en lecture seule): Area, <code>Circumference</code> (m\u00eame si techniquement, \u00e7a devrait s\u2019appeler <code>Perimeter</code>)</li> </ul> </li> <li>Cr\u00e9er une fonction <code>PrintShapeInfo</code> qui prend un <code>Shape</code> en param\u00e8tre et qui utilise le pattern matching pour afficher des infos diff\u00e9rentes selon le type du <code>Shape</code></li> <li>Cr\u00e9er une fonction qui g\u00e9n\u00e8re al\u00e9atoirement une liste de <code>Shape</code> de type Circle ou Rectangle avec des valeurs initiales al\u00e9atoires. Le nombre d\u2019\u00e9l\u00e9ments \u00e0 g\u00e9n\u00e9rer est pass\u00e9 en param\u00e8tre. Utiliser cette m\u00e9thode pour g\u00e9n\u00e9rer une liste de 10 <code>Shape</code></li> <li>Utiliser LINQ (<code>Select</code>, <code>Where</code>, <code>Aggregate</code>, etc.) pour g\u00e9n\u00e9rer un objet qui a deux champs: <code>SumCircleArea</code> et <code>MaxRectangleWidth</code>:<ul> <li><code>SumCircleArea</code> : la somme des surfaces de tous les cercles. <code>MaxRectangleWidth</code> : la largeur maximale des rectangles</li> <li>Faire en sorte que l\u2019objet g\u00e9n\u00e9r\u00e9 soit anonyme</li> </ul> </li> <li>Utiliser LINQ pour calculer le nombre de cercles dans la liste</li> <li>Utiliser LINQ pour calculer le nombre de rectangles dont la superficie est &gt; 10</li> <li>Utiliser LINQ pour calculer la circonf\u00e9rence moyenne des cercles (astuce: m\u00e9thode average)</li> </ol> </li> </ol>"},{"location":"dotnet/csharp-tour/","title":"Tour du langage C-Sharp","text":""},{"location":"dotnet/csharp-tour/#tour-du-langage-c-sharp","title":"Tour du langage C-Sharp","text":"<p>Nous allons faire un tour du langage C# sans forc\u00e9ment tout couvrir car le langage est tr\u00e8s riche.</p> <p>Warning</p> <p>Comme le langage C# \u00e9volue chaque ann\u00e9e et apporte des am\u00e9lioration et simplifications r\u00e9guli\u00e8rement, il se peut que les exemples de code vues ici soient diff\u00e9rents de ce que vous trouvez dans la litt\u00e9rature.</p>"},{"location":"dotnet/csharp-tour/#premiers-concepts","title":"Premiers concepts","text":"<ul> <li>Cr\u00e9ation d'un projet appel\u00e9 hello-cs avec le CLI: <code>dotnet new console -n \"hello_cs\"</code></li> <li>Configuration du projet avec le fichier csproj</li> <li>D\u00e9veloppement: Lancement de l'application avec <code>dotnet run</code> ou depuis VSCode avec F5 ou Ctrl + F5</li> <li>Concepts \u00e0 couvrir: Types de base, fonctions, conditions, boucles, tableaux, etc.</li> </ul>"},{"location":"dotnet/csharp-tour/#quelques-caracteristiques","title":"Quelques caract\u00e9ristiques","text":"<ul> <li>C# est statiquement typ\u00e9: une variable ne peut pas changer de type (contraire de dynamiquement typ\u00e9)</li> <li>C# supporte la programmation orient\u00e9 objet et fonctionnelle</li> <li>Diff\u00e9rences avec les conventions de codage java:<ul> <li>Les noms des m\u00e9thodes, propri\u00e9t\u00e9s publiques et constantes publiques commencent avec une majuscule: <code>Console.WriteLine(\"Hello World!\");</code></li> <li>Un attribut priv\u00e9 est pr\u00e9fix\u00e9 avec un <code>_</code></li> <li>Les m\u00e9thodes asynchrones sont suffix\u00e9es avec le terme <code>async</code></li> <li>Les interfaces commencent avec la lettre I (<code>IEnumerable</code>)</li> </ul> </li> <li>Autres conventions communes:<ul> <li>Une m\u00e9thode ou fonction commence par un verbe \u201cWriteLine\u201d et non \u201cLineWrite\u201d</li> <li>Le nom d\u2019une classe commence par une majuscule</li> </ul> </li> <li>C# supporte la null safety: permet d'avertir ou d'interdire la manipulation de valeurs nulles sans pr\u00e9caution pr\u00e9alable de la part du codeur.</li> </ul> <pre><code>void RunTour(){\n\n}\n// Premier tour du langage\nConsole.WriteLine(\"Hello, World!\");\n\nint intValue = 10;\nbool b = false;\nstring s = \"hello\";\n\nConsole.WriteLine(intValue);\nConsole.WriteLine(s);\n\n// Ne pas utliser la concat\u00e9nation\nConsole.WriteLine(\"La valeur de s est : \" + s + \" et la valeur de est \" + intValue);\n// Car il y a mieux \u00e0 la place avec $\"\" -&gt; interpolation de string\nConsole.WriteLine($\"La valeur de s est : {s} et la valeur de l'entier est {intValue}\");\n\n// intValue = \"Hello\"; // erreur car statiquement typ\u00e9 et intValue est un int\n\n// typage implicite: message sera de type string\nvar message = $\"La valeur de s est : {s} et la valeur de l'entier est {intValue}\";\nConsole.WriteLine(message);\n\nRandom r = new Random();\nint randomVal = r.Next(10, 20);\n\nif (randomVal &gt; 15)\n{\n  Console.WriteLine(\"gagn\u00e9\");\n}\nelse\n{\n  Console.WriteLine(\"perdu\");\n}\n\nfor (int i = 3; i &lt; 8; i++)\n{\n  Console.WriteLine($\"La valeur de i est : {i}\");\n}\n\n// Mettre un identifiant au pluriel pour les tableaux\nint[] items = { 1, 2, 4 };\n\nfor (int i = 0; i &lt; items.Length; i++)\n{\n  Console.WriteLine($\"La valeur de l'\u00e9lement d'indice {i} du tableau est : {items[i]}\");\n}\n\nforeach (var item in items)\n{\n  Console.WriteLine($\"La valeur de l'\u00e9lement courant est : {item}\");\n}\n</code></pre>"},{"location":"dotnet/csharp-tour/#programmation-oriente-objet","title":"Programmation orient\u00e9 objet","text":"<ul> <li>Le programme est vu comme un ensemble d'objets qui interagissent entre eux.</li> <li>Chaque object est d\u00e9fini par une classe qui elle m\u00eame h\u00e9riter d'autres classes ou interfaces.</li> <li>Une classes peut d\u00e9finir des propri\u00e9t\u00e9s et des m\u00e9thodes, qu'on appelle des membres.<ul> <li>Propri\u00e9t\u00e9 : une vue sur une donn\u00e9e via ses accesseurs en lecture et / ou \u00e9criture (qu'on appelle getters et setter respectivement).</li> <li>M\u00e9thode : fonction qui est d\u00e9finie au sein de la classe</li> </ul> </li> <li>Une classe enfant peut h\u00e9riter d'une seule classe parente en C#:<ul> <li>Dans ce cas, la classe enfant contiendra implicitement tous les membres de la classe m\u00e8re</li> <li>La classe enfant peut d\u00e9finir des membres suppl\u00e9mentaires qui lui seront propres</li> <li>La classe enfant peut red\u00e9finir des membres de classe parent. On appelle cela une surcharge ou override en Anglais.</li> </ul> </li> <li>Notion de Propri\u00e9t\u00e9, m\u00e9thode ou classe statique:<ul> <li>Propri\u00e9t\u00e9 d'instance : chaque instance a ses propres prori\u00e9t\u00e9s d'instances</li> <li>Propri\u00e9t\u00e9 statique : elle sera partag\u00e9e entre toutes les instances (comme une variable globale pour la classe)</li> <li>M\u00e9thode d'instance : sera ex\u00e9cut\u00e9e dans le contexte de l'instance qui l'a appel\u00e9e (accessible via <code>this</code>)</li> <li>M\u00e9thode statique : m\u00e9thode qui a comme contexte que les propri\u00e9t\u00e9 et m\u00e9thodes statiques de sa classe</li> <li>Classe statique : une classe qui ne peut pas \u00eatre instanci\u00e9e et ne contiendra donc que des propri\u00e9t\u00e9 et m\u00e9thodes statiques</li> </ul> </li> <li>M\u00e9thode, propri\u00e9t\u00e9 et classe abstraite:<ul> <li>M\u00e9thode abstraite: m\u00e9thode qui n'a pas d'impl\u00e9mentation</li> <li>Propri\u00e9t\u00e9 abstraite: propri\u00e9t\u00e9 dont les accesseurs ne sont pas d\u00e9finis</li> <li>Classe abstraite: une classe qui a au moins une propri\u00e9t\u00e9 ou m\u00e9thode abstraite</li> <li>Les membres abstraits sont destin\u00e9s \u00e0 \u00eatre d\u00e9finis par une sous classe non abstraite.</li> </ul> </li> </ul> <pre><code>// ComputerPiece.cs\nnamespace DemoOpp\n{\n    class ComputerPiece\n    {\n        // prorpi\u00e9t\u00e9 en lecture et \u00e9criture\n        public int WattUsage { get; set; }\n        // prorpi\u00e9t\u00e9 en lecture seule\n        public int Price { get; }\n\n        public ComputerPiece(int price)\n        {\n            Console.WriteLine(\"ComputerPiece constructor\");\n            this.Price = price;\n        }\n    }\n\n    class PowerGenerator : ComputerPiece, ILightable\n    {\n        public PowerGenerator(int price) : base(price)\n        {\n        }\n\n        public void TurnLightsOff()\n        {\n            throw new NotImplementedException();\n        }\n\n        public void TurnLightsOn()\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    class UsbPort : ComputerPiece, ILightable\n    {\n        public UsbPort(int price) : base(price)\n        {\n        }\n\n        public void TurnLightsOff()\n        {\n            throw new NotImplementedException();\n        }\n\n        public void TurnLightsOn()\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    class CPU : ComputerPiece\n    {\n        public CPU(int price) : base(price)\n        {\n        }\n        public int ClockSpeed { get; set; }\n        public int CoreCount { get; set; }\n    }\n\n    class RAM : ComputerPiece\n    {\n        public RAM(int price) : base(price)\n        {\n        }\n        public int Capacity { get; set; }\n    }\n}\n\n// ILightable.cs\nnamespace DemoOpp\n{\n    public interface ILightable\n    {\n        public void TurnLightsOn();\n        public void TurnLightsOff();\n    }\n}\n\n\n// IOverclockable.cs\nnamespace DemoOpp\n{\n    public interface IOverclockable\n    {\n        public int MaxPossibleClockSpeed { get; }\n        public void OverClock(int frequency);\n    }\n}\n\n\n// OopProgram.cs\n\ufeffusing DemoOpp;\n\nCPU cpu1 = new CPU(200);\ncpu1.WattUsage = 100;\nConsole.WriteLine(cpu1.WattUsage);\n\nCPU cpu2 = new(500);\ncpu2.WattUsage = 100;\nConsole.WriteLine(cpu2.WattUsage);\n\nCPU cpu3 = new(200)\n{\n    ClockSpeed = 100,\n    CoreCount = 8,\n    WattUsage = 10\n};\nConsole.WriteLine(cpu3);\n\n\nRAM ram1 = new(200)\n{\n    Capacity = 8000,\n    WattUsage = 10\n};\nConsole.WriteLine(ram1);\n\nComputerBox computerBox = new(10, 10, 5);\nConsole.WriteLine(computerBox);\n</code></pre>"},{"location":"dotnet/csharp-tour/#constructeur-vs-bloc-dinitialisation","title":"Constructeur vs bloc d'initialisation","text":"<ul> <li>Le constructeur est une m\u00e9thode sp\u00e9ciale qui est appel\u00e9e lors de l'instanciation d'une classe</li> <li>Le bloc d'initialisation est un bloc de code qui est ex\u00e9cut\u00e9 avant le constructeur</li> <li>Il y a deux styles d'initialisation des propri\u00e9t\u00e9s d'une classe: l'initialisation via le constructeur et l'initialisation via le bloc d'initialisation</li> <li>Chaque style a des avantages et inconv\u00e9nients en terme de lisibilit\u00e9 et verbosit\u00e9</li> <li>M\u00eame si on peut mixer les deux styles d'initialisation, il est recommand\u00e9 de choisir un style et de s'y tenir pour la coh\u00e9rence du code</li> </ul> Deux styles d'initialisation<pre><code>HeroWithConstructor heroWithConstructor = new(1, \"garan\", Role.Fighter);\nHeroWithoutConstructor heroWithoutConstructor = new() { Id = 2, Name = \"saraka\", Role = Role.Spport };\n\npublic enum Role\n{\n  Fighter, Mage, Spport, Shooter\n}\n\npublic class HeroWithConstructor\n{\n  public int Id { get; set; }\n  public string Name { get; set; }\n  public Role Role { get; set; }\n\n  public HeroWithConstructor(int id, string name, Role role)\n  {\n    this.Id = id;\n    this.Name = name;\n    this.Role = role;\n  }\n}\n\npublic class HeroWithoutConstructor\n{\n  public required int Id { get; set; }\n  public required string Name { get; set; }\n  public required Role Role { get; set; }\n}\n</code></pre>"},{"location":"dotnet/csharp-tour/#record","title":"record","text":"<p>Les record sont des classes avec des fonctionnalit\u00e9s suppl\u00e9mentaires qui permettent de simplifier la cr\u00e9ation de classes simples.</p> <ul> <li>Les records sont des classes immuables</li> <li>Les records sont des classes finales (non h\u00e9ritables)</li> <li>Les records ont des propri\u00e9t\u00e9s en lecture seule</li> <li>Les records ont des m\u00e9thodes <code>Equals</code>, <code>GetHashCode</code>, <code>ToString</code> et <code>With</code> g\u00e9n\u00e9r\u00e9es automatiquement</li> </ul> <pre><code>Person p1 = new(\"John\", \"Doe\");\nPerson p2 = new(\"John\", \"Doe\");\nConsole.WriteLine(p1.LastName);\n// p1.LastName = \"Hello\"; -&gt; erreur\nConsole.WriteLine(p1 == p2); // true\nConsole.WriteLine(p1); // Person { FirstName = John, LastName = Doe }\n\npublic record Person(string FirstName, string LastName);\n</code></pre>"},{"location":"dotnet/csharp-tour/#programmation-fonctionnelle","title":"Programmation fonctionnelle","text":"<ul> <li>Les fonctions sont des \u00e9l\u00e9ments de premi\u00e8re classe : Les fonctions sont comme des variables</li> <li>Utilisation intensive de fonctions pures: fonction sans effet de bord, toujours le m\u00eame r\u00e9sultat pour les m\u00eames entr\u00e9es<ul> <li>exemples de fonctions par pure: <code>WriteLine</code> (car elle change la console)</li> </ul> </li> <li>Immutabilit\u00e9<ul> <li>On ne peut pas changer la valeur d'une variable une fois initialis\u00e9e</li> <li>On ne peut pas changer les propri\u00e9t\u00e9s d'un objet une fois instanci\u00e9</li> <li>On ne peut pas ajouter ou supprimer des \u00e9l\u00e9ments d'une collection</li> </ul> </li> <li>On le code est d\u00e9velopp\u00e9 sous forme d'une cha\u00eene de traitements (comme dans une usine)</li> </ul>"},{"location":"dotnet/csharp-tour/#relation-entre-la-poo-et-la-programmation-fonctionnelle","title":"Relation entre la POO et la programmation fonctionnelle","text":"<ul> <li>La POO est la prog. fonctionnelle ne sont pas mutuellement exclusifs</li> <li>On peut d\u00e9velopper en POO avec un style fonctionnelle:<ul> <li>Les m\u00e9thodes ne font pas de mutation de chmaps de l'objet</li> <li>Les propri\u00e9t\u00e9s sont uniquement en read-only</li> <li>Les <code>records</code> simplifient la cr\u00e9ation de ce genre de classes</li> </ul> </li> </ul>"},{"location":"dotnet/csharp-tour/#autres-fonctionnalites-pratiques","title":"Autres fonctionnalit\u00e9s pratiques","text":"<ul> <li>M\u00e9thodes d'extension: permettent de rajouter une m\u00e9thode \u00e0 une classe sans passer par l'h\u00e9ritage</li> <li>Null-safety<ul> <li>Cette options est activ\u00e9e avec la propri\u00e9t\u00e9 <code>&lt;Nullable&gt;enable&lt;/Nnullable&gt;</code> au niveau du projet.</li> <li>Pour signaler des erreurs au lieu d'avertissements, utiliser la propri\u00e9t\u00e9 <code>&lt;WarningsAsErrors&gt;Nullable&lt;/WarningsAsErrors&gt;</code> au niveau du projet.</li> </ul> </li> </ul>"},{"location":"dotnet/csharp-tour/#debug-vs-release","title":"Debug vs release","text":"<ul> <li>Mode debug =&gt; \u00e0 utiliser pour le dev via <code>dotnet run</code><ul> <li>On peut d\u00e9bugger (point d'arr\u00eat, inspecter des variables et la stack frame ou stack trace)</li> <li>Programme plus lourd en espace et Moins rapide</li> <li><code>dotnet run</code> permet de g\u00e9n\u00e9rer et binaire debug et de l\u2019ex\u00e9cuter juste apr\u00e8s</li> </ul> </li> <li>Mode release: =&gt; \u00e0 utiliser pour la mise en prod<ul> <li>On peut pas d\u00e9bugger</li> <li>Programme moins spatieux et plus rapide</li> <li><code>dotnet publish -c Release \u2026</code></li> </ul> </li> </ul>"},{"location":"dotnet/csharp-tour/#mise-en-production-dun-projet-c","title":"Mise en production d'un projet <code>C#</code>","text":"<ul> <li>Pour g\u00e9n\u00e9rer le binaire selon l\u2019OS: <code>dotnet publish -c Release -r &lt;RID&gt; --self-contained (false ou true)</code><ul> <li><code>-c Release</code>: optimiser et ne pas inclure les infos de d\u00e9bogage</li> <li><code>-r &lt;RID&gt;</code>: rid est \u00e0 remplacer par l\u2019id du syst\u00e8me cible. Exemples: <code>win-x64</code>, <code>linux-x64</code>, <code>osx-x64</code>, etc.</li> <li><code>--self-contained</code>: permet d\u2019embarquer ou non le runtime dotnet dans le livrable. Pour une livraison autonome pr\u00e9f\u00e9rer le <code>--self-contained</code> \u00e0 <code>true</code> au lieu de <code>false</code></li> </ul> </li> <li>Votre livrable se trouvera dans le dossier: <code>bin\\Release\\netx.x\\&lt;rid&gt;\\publish</code></li> <li>Tous les fichiers sont \u00e0 installer dans les postes client \u00e0 part le fichier <code>...deps.json</code> et le fichier <code>... .pdb</code></li> <li>Ensuite, il faudra soit fournir les binaires dans une archive, soit fournir un installeur</li> <li>Visual Studio permet de g\u00e9n\u00e9rer des installeurs plus facilement</li> </ul>"},{"location":"dotnet/dotnet-exercices/","title":"Exercices","text":""},{"location":"dotnet/dotnet-exercices/#exercices","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Activer la null safety</li> <li>Ne pas utiliser les fonctions de tri de .Net</li> </ul>"},{"location":"dotnet/dotnet-exercices/#collections","title":"Collections","text":""},{"location":"dotnet/dotnet-exercices/#partie-1","title":"Partie 1","text":"<p>Utiliser <code>foreach</code> si besoin (et ne pas utiliser LINQ: Select, etc.):</p> <ol> <li>Cr\u00e9er une fonction qui prend une liste d'entiers en argument et affiche uniquement les entiers pairs.</li> <li>Cr\u00e9er une fonction qui prend une liste d'entiers en argument et retourne la liste des entiers pairs.</li> <li>Cr\u00e9er une fonction qui prend une cha\u00eene de caract\u00e8res en argument (string) et retourne la liste de ses consonnes (pour rappel, les voyelles sont a, i, u, e, o et y).</li> <li>Cr\u00e9er une fonction qui prend une liste de cha\u00eenes de caract\u00e8res et retourne la liste des longueurs de chaque cha\u00eene.<ul> <li>Par exemple: <code>[\"hello\", \"C#\"]</code> retourne <code>[5, 2]</code></li> </ul> </li> <li>D\u00e9finir un <code>record</code> <code>Person</code> avec les propri\u00e9t\u00e9s <code>Name</code> et <code>Age</code>. Cr\u00e9er une liste de personnes et:<ol> <li>afficher les personnes dont l'\u00e2ge est sup\u00e9rieur \u00e0 18 ans.</li> <li>afficher les personnes dont le nom commence par la lettre 'A'.</li> <li>Cr\u00e9er une fonction qui change le nom en Camel case de chaque personne.<ul> <li>Par exemple: <code>Person(\"john doe\", 20)</code> devient <code>Person(\"John Doe\", 20)</code></li> </ul> </li> <li>Cr\u00e9er un fonction qui donne l'\u00e2ge moyen des personnes.</li> </ol> </li> </ol> Corrections 1<pre><code>void PrintEvenNumbers(List&lt;int&gt; numbers)\n{\n  foreach (var number in numbers)\n  {\n    if (number % 2 == 0)\n    {\n      Console.WriteLine(number);\n    }\n  }\n}\n\nPrintEvenNumbers([1, 88, 649, -5]);\nList&lt;int&gt; numbers = [11, 7, 7179, -1215, 0, 3];\nPrintEvenNumbers(numbers);\n</code></pre> 2<pre><code>List&lt;int&gt; GetEvenNumbers(List&lt;int&gt; numbers)\n{\n  List&lt;int&gt; evenNumbers = [];\n  foreach (var number in numbers)\n  {\n    if (number % 2 == 0)\n    {\n      evenNumbers.Add(number);\n    }\n  }\n  return evenNumbers;\n}\n\nList&lt;int&gt; even1Numbers = GetEvenNumbers([1, 4, 88, 649, -5]);\nList&lt;int&gt; numbers = [11, 7, 7179, -1214, 0, 3];\nList&lt;int&gt; even2Numbers = GetEvenNumbers(numbers);\nConsole.WriteLine(string.Join(\" - \", even1Numbers));\nConsole.WriteLine(string.Join(\" - \", even2Numbers));\n</code></pre> 3<pre><code>List&lt;char&gt; GetConsonants(string text)\n{\n  List&lt;char&gt; consonants = [];\n  foreach (var c in text.ToLower())\n  {\n    if (c != 'a' &amp;&amp; c != 'u' &amp;&amp; c != 'i' &amp;&amp; c != 'o' &amp;&amp; c != 'e' &amp;&amp; c != 'y')\n    {\n      consonants.Add(c);\n    }\n  }\n  return consonants;\n}\n\nList&lt;char&gt; consontants1 = GetConsonants(\"Hello\");\nConsole.WriteLine(string.Join(\" - \", consontants1));\n</code></pre>"},{"location":"dotnet/dotnet-exercices/#partie-2","title":"Partie 2","text":"<p>Utiliser LINQ pour la partie algorithmie. Utiliser <code>foreach</code> uniquement pour l'affichage.</p> <ol> <li>Refaire les exos de la partie 1 avec LINQ.</li> <li>Cr\u00e9er une fonction qui prend un entier n. La fonction g\u00e9n\u00e8re une liste de n entiers al\u00e9atoires entre 0 et 100 et affiche le min, le max, la somme et la moyenne.<ul> <li>Par exemple: si <code>n = 5</code> g\u00e9n\u00e8re le tableau <code>[10, 20, 30, 40, 50]</code>, afficher <code>min: 10, max: 50, sum: 150, avg: 30</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend une liste de cha\u00eenes de caract\u00e8res et retourne la liste des cha\u00eenes de caract\u00e8res tri\u00e9es par ordre croissant de longueur. (\ud83d\udca1 utiliser <code>OrderBy((s) =&gt; s.Length)</code>).<ul> <li>Par exemple: <code>[\"hello\", \"C#\", \"world\"]</code> retourne <code>[\"C#\", \"hello\", \"world\"]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend une liste de cha\u00eenes de caract\u00e8res et retourne le nombre de caract\u00e8res total de toutes les cha\u00eenes.<ul> <li>Par exemple: <code>[\"hello\", \"C#\", \"world\"]</code> retourne <code>12</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend une liste de cha\u00eenes de caract\u00e8res et retourne le nombre de mots qui ont une longueur sup\u00e9rieure \u00e0 3.<ul> <li>Par exemple: <code>[\"hello\", \"C#\", \"world\"]</code> retourne <code>2</code></li> </ul> </li> <li>D\u00e9finir un <code>record</code> <code>Ninja</code> avec les propri\u00e9t\u00e9s <code>Name</code>, <code>Hp</code> et <code>IsHokage</code>. Cr\u00e9er une liste de ninjas et:<ul> <li>Afficher les noms des Hokage.<ul> <li>Par exemple: <code>Ninja(\"Naruto\", 150, true)</code> et <code>Ninja(\"Sasuke\", 120, false)</code> retourne <code>Naruto</code></li> </ul> </li> <li>Afficher le nombre de ninjas qui ont plus de 100 points de vie.<ul> <li>Par exemple: <code>Ninja(\"Naruto\", 150, true)</code> et <code>Ninja(\"Sasuke\", 120, false)</code> retourne <code>2</code></li> </ul> </li> <li>Afficher le nom ninja qui a le plus de points de vie.<ul> <li>Par exemple: <code>Ninja(\"Naruto\", 150, true)</code> et <code>Ninja(\"Sasuke\", 120, false)</code> retourne <code>Naruto</code></li> </ul> </li> </ul> </li> </ol> Corrections <pre><code>using System.Reflection.Metadata;\nusing System.Reflection.PortableExecutable;\nusing System.Text;\n\nvoid RunQ1()\n{\n  void ShowEvenNumbers(List&lt;int&gt; numbers)\n  {\n    var evenNumbers = from n in numbers where n % 2 == 0 select n;\n    Console.WriteLine(string.Join(\",\", evenNumbers));\n  }\n  Console.WriteLine(\"Exercise 1\");\n  ShowEvenNumbers([1, 2, 3, 4, 5, 6, 7]);\n  // Enumerable.Range equivalent of Python range with less features\n  ShowEvenNumbers(Enumerable.Range(-10, 20).ToList());\n}\n\nvoid RunQ2()\n{\n  // Avec la method syntax\n  List&lt;int&gt; GetEvenNumbers(List&lt;int&gt; numbers)\n  {\n    var evenNumbers = numbers.Where(n =&gt; n % 2 == 0);\n    return evenNumbers.ToList();\n  }\n  // Avec la query syntax et avec un single statement function\n  List&lt;int&gt; GetEvenNumbers2(List&lt;int&gt; numbers) =&gt;\n    (from n in numbers where n % 2 == 0 select n).ToList();\n\n  List&lt;int&gt; numbers = Enumerable.Range(1, 10).ToList();\n  Console.WriteLine(\"Exercise 2\");\n  Console.WriteLine(string.Join(\",\", GetEvenNumbers(numbers)));\n  Console.WriteLine(string.Join(\",\", GetEvenNumbers2(numbers)));\n}\n\nvoid RunQ3()\n{\n  string GetConsonants(string input)\n  {\n    string lowerCased = input.ToLower();\n    var consonants = lowerCased.Where(c =&gt; !\"aeiuyo\".Contains(c));\n    return string.Join(\"\", consonants);\n  }\n\n  string GetConsonants2(string input) =&gt;\n    string.Join(\"\", input.ToLower().Where(c =&gt; !\"aeiuyo\".Contains(c)));\n  Console.WriteLine(\"Exercise 3\");\n  Console.WriteLine(GetConsonants(\"Hello\"));\n  Console.WriteLine(GetConsonants(\"BBBBCCCC\"));\n  Console.WriteLine(GetConsonants(\"aeae\"));\n  Console.WriteLine(GetConsonants2(\"Hello\"));\n  Console.WriteLine(GetConsonants2(\"BBBBCCCC\"));\n  Console.WriteLine(GetConsonants2(\"aeae\"));\n}\n\nvoid RunQ4()\n{\n  List&lt;int&gt; GetLengths(List&lt;string&gt; texts) =&gt;\n    (from text in texts select text.Length).ToList();\n  Console.WriteLine(\"Exercise 4\");\n  Console.WriteLine(string.Join(\", \", GetLengths([\"I\", \"Love\", \"C#\"])));\n  Console.WriteLine(string.Join(\", \", GetLengths([\"LINQ\", \"Rocks\"])));\n}\n\nvoid RunQ5()\n{\n  string ToCamelCaseName(string name)\n  {\n    var transformed = name.Select((c, index) =&gt; index == 0 || name[index - 1] == ' ' ? char.ToUpper(c) : c);\n    return string.Join(\"\", transformed);\n  }\n  void PrintResults(List&lt;Person&gt; persons)\n  {\n    Console.WriteLine($\"input list: {string.Join(\",\", persons)}\");\n    var olderThan18 = persons.Where(p =&gt; p.Age &gt; 18);\n    Console.WriteLine($\"Older than 18: {string.Join(\", \", olderThan18)}\");\n    var startWithAPersons = from p in persons where p.Name.Length &gt; 1 &amp;&amp; p.Name[0] == 'A' select p;\n    Console.WriteLine($\"Start with A: {string.Join(\", \", startWithAPersons)}\");\n    var camelCased = persons.Select(p =&gt; new Person(ToCamelCaseName(p.Name), p.Age));\n    Console.WriteLine($\"Camel cased: {string.Join(\", \", camelCased)}\");\n  }\n  List&lt;Person&gt; persons = [new(\"Kakashi\", 50), new(\"Arata\", 23), new(\"j bap\", 2)];\n  PrintResults(persons);\n  Random rng = new();\n  List&lt;Person&gt; randomPersons = Enumerable.Range(1, 5)\n    .Select(\n      i =&gt; new Person($\"person number {i}\", rng.Next(10, 30))\n    ).ToList();\n  PrintResults(randomPersons);\n}\n\nRunQ1();\nRunQ2();\nRunQ3();\nRunQ4();\nRunQ5();\n\nrecord Person(string Name, int Age);\n</code></pre>"},{"location":"dotnet/dotnet-exercices/#fichiers","title":"Fichiers","text":"<ol> <li>Utiliser les <code>StreamReader</code> et / ou <code>StreamWriter</code> pour lire et un fichier et:<ul> <li>Afficher le nombre de caract\u00e8res de chaque ligne de ce fichier</li> <li>G\u00e9n\u00e8re un fichier qui ajoute un point \u00e0 la fin de chaque ligne du fichier d'origine si elle n'est pas d\u00e9j\u00e0 pr\u00e9sente</li> <li>G\u00e9n\u00e8re un fichier qui contient la ligne qui a le plus de caract\u00e8res dans le fichier lu</li> <li>G\u00e9n\u00e8re un fichier qui contient les lignes du fichier lu tri\u00e9s par ordre croissant le nombre de caract\u00e8res de la ligne</li> <li>G\u00e9n\u00e8re un fichier qui contient les lignes du fichier lu tri\u00e9s par ordre croissant du dictionnaire</li> </ul> </li> <li>Utiliser un <code>StreamWriter</code> pour \u00e9crire dans un fichier le contenu d'une cha\u00eene de caract\u00e8res au format pyramidal. Par exemple \"Je-fais-des-exos-de-C#\" donne le fichier (le dernier caract\u00e8re sera ignor\u00e9 car il ne permet pas de faire une pyramide):     <pre><code>J\ne-\nfai\ns-de\ns-exo\ns-de-C\n</code></pre></li> <li>D\u00e9finir votre propose classe de journalisation (<code>Logger</code>) qui va servir \u00e0 \u00e9crire des logs dans un fichier.<ul> <li>La classe prend en argument du constructeur le nom du fichier de logs</li> <li>La classe propose les m\u00e9thodes: <code>Info(String message)</code> et <code>Warn(String message)</code>. Chacune des m\u00e9thodes ajoute une ligne au fichier avec le format:<ul> <li>Si c'est une Info: <code>{date et heure actuelle} \u2139\ufe0f {message}</code></li> <li>Si c'est un Warn: <code>{date et heure actuelle} \u26a0\ufe0f {message}</code></li> </ul> </li> <li>\u26a0\ufe0f: Attention \u00e0 bien fermer le fichier une fois l'\u00e9criture du log faite (pour le lib\u00e9rer)</li> <li>Cr\u00e9er une instance de la classe <code>Logger</code> et ajouter quelques logs</li> <li>Ajouter les m\u00e9thodes <code>Error(String message)</code> et <code>Debug(String message)</code> avec un format adapt\u00e9 et bas\u00e9 sur le m\u00eame principe que les m\u00e9thodes d\u00e9finies plus haut.</li> <li>D\u00e9finir une m\u00e9thode <code>ShowAllWarnings()</code> qui affiche tous les logs de type <code>Warn</code> pr\u00e9sents dans le fichier de log.</li> <li>Est-ce que vous voyez des inconv\u00e9nients / contraintes avec cette m\u00e9thode de journalisation ?</li> </ul> </li> <li>Faire le probl\u00e8me 1 de advent of code 2023 en chargeant les donn\u00e9es d'entr\u00e9e depuis un fichier.<ul> <li>Par exemple pour l'exercice 1 du probl\u00e8me, cr\u00e9er \u00e0 la main (avec vscode ou l'explorateur) un fichier <code>input1.txt</code> avec le contenu ci-dessous et le lire avec un StreamReader pour r\u00e9soudre le probl\u00e8me. <pre><code>1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\n</code></pre></li> </ul> </li> </ol> Corrections <pre><code>static void PrintCountPerLine(string filePath)\n{\n  using StreamReader sr = new(filePath);\n  string? line = sr.ReadLine();\n  while (line != null)\n  {\n    Console.WriteLine(line.Length);\n    line = sr.ReadLine();\n  }\n}\n\nstatic void AddDotIfNotPresent(string filePath)\n{\n  using StreamReader sr = new(filePath);\n  using StreamWriter sw = new(\"dotted_file.txt\");\n  string? line = sr.ReadLine();\n  while (line != null)\n  {\n    if (!line.EndsWith('.'))\n    {\n      line += '.'; // autre fa\u00e7on: line = $\"{line}.\";\n    }\n    sw.WriteLine(line);\n    line = sr.ReadLine();\n  }\n}\n\nstatic void WriteLongestLine(string filePath)\n{\n  using StreamReader sr = new(filePath);\n  string? line = sr.ReadLine();\n  string? longestLine = line;\n  while (line != null)\n  {\n    line = sr.ReadLine();\n    if (longestLine?.Length &lt; line?.Length)\n    {\n      longestLine = line;\n    }\n  }\n  if (longestLine != null)\n  {\n    using StreamWriter sw = new(\"longest_line.txt\");\n    sw.WriteLine(longestLine);\n  }\n}\n\nstring filePath = \"input_file.txt\";\nPrintCountPerLine(filePath);\nAddDotIfNotPresent(filePath);\nWriteLongestLine(filePath);\n</code></pre>"},{"location":"dotnet/dotnet-exercices/#serie-2-programmation-asynchrone","title":"S\u00e9rie 2 (programmation asynchrone)","text":"<p>En C#, la m\u00e9thode recommand\u00e9e pour ex\u00e9cuter des traitements asynchrones (qui sont mis en oeuvre habituellement avec les threads et les process) consiste \u00e0 utiliser \u201cTask.Run(() =&gt; { // traitement async })\u201d. On dit que c\u2019est une programmation asynchrone bas\u00e9e sur les t\u00e2ches.</p> <ol> <li>Cr\u00e9er deux t\u00e2ches asynchrones (en faisant deux Task.Run)<ul> <li>La premi\u00e8re affiche un valeur qui s\u2019incr\u00e9mente de 1 \u00e0 1000 (une boucle for qui affiche i \u00e0 chaque it\u00e9ration)</li> <li>La deuxi\u00e8me affiche un valeur qui va de -1 \u00e0 -1000 (une boucle for de -1 \u00e0 -1000 avec un writeline)</li> <li>Pour laisser le temps aux t\u00e2ches concurrentes de finir avant la fin du thread principal, ajouter un await Task.Delay(1000); \u00e0 la fin de la t\u00e2che principale</li> <li>Ex\u00e9cuter le programme plusieurs fois, que constatez vous ?</li> <li>Afficher <code>finished 1</code> juste \u00e0 la fin de la premi\u00e8re t\u00e2che (sans utiliser <code>await</code> et <code>ContinueWith</code>)</li> <li>-&gt; solution: utiliser une callback sous forme d\u2019une fonction pass\u00e9e en param\u00e8tre</li> <li>En utilisant <code>ContinueWith</code> afficher <code>finished 1</code> juste apr\u00e8s la fin de la premi\u00e8re t\u00e2che</li> <li>Remplacer chaque <code>Task.Run</code> par <code>await Task.Run</code>. Que constatez-vous ?</li> <li>En utilisant <code>await</code>, comment afficher \u201cfinished 2\u201d d\u00e8s la fin de la deuxi\u00e8me t\u00e2che ?</li> </ul> </li> <li>Dans la premi\u00e8re t\u00e2che, ajouter une instruction \u2018return \u201ctartatin\u201d;\u2019 apr\u00e8s la boucle for. Ensuite remplacer le premier <code>await Task.Run</code> par un var <code>result = await Task.Run</code>.<ul> <li>Quel est le type et la valeur de result ?</li> <li>Enlever await, c\u2019est \u00e0 dire remplacer <code>var result = await Task.Run</code> par <code>var result = Task.Run</code></li> <li>Quel est le type et la valeur de result ?</li> <li>A quoi sert <code>await</code> ? Quel est sa relation avec le type <code>Task</code> ?</li> </ul> </li> </ol>"},{"location":"dotnet/dotnet/","title":"Le framework .Net","text":""},{"location":"dotnet/dotnet/#le-framework-net","title":"Le framework .Net","text":"<p>Le framework .Net et le framework officiel qui accompagne le langage C#.</p>"},{"location":"dotnet/dotnet/#quest-ce-quun-framework","title":"Qu'est-ce qu'un framework ?","text":"<p>On peut voir un framework comme une librairie dont l'usage est structurant dans un projet. Ils proposent g\u00e9n\u00e9ralement:</p> <ul> <li>Des outils (par exemple un CLI)</li> <li>Des librairies et API</li> <li>Un documentation</li> <li>Des langages de programmation qu\u2019il supporte</li> </ul> <p>Il faut aussi s\u2019int\u00e9resser \u00e0 son:</p> <ul> <li>Prix</li> <li>Communaut\u00e9 et le support en cas de probl\u00e8me</li> <li>Documentation</li> </ul>"},{"location":"dotnet/dotnet/#historique","title":"Historique","text":"<ul> <li>Avant les ann\u00e9es 2000, les seuls gros frameworks de MicroSoft sont les API Win32 et COM (qu'on peut coder en C++ et VB).<ul> <li>La sortie du JDK de Sun Microsystems a grandement am\u00e9lior\u00e9 l'exp\u00e9rience d\u00e9veloppeur. Microsoft a d'ailleurs d\u00e9velopp\u00e9 une d\u00e9clinaison personnalis\u00e9e (MSVM) qui a \u00e9t\u00e9 abandonn\u00e9e suite au proc\u00e8s contre SUN.</li> </ul> </li> <li>2000: MicroSoft lance .Net et \u201c.Net Framework\u201c 1.0 (C#, VB) mais qui ne sont compatibles qu'avec Windows.<ul> <li>Le code source du framework est en C++.</li> </ul> </li> <li>2004: Sortie de Mono qui est un portage .Net pour Linux OSS (Open Source) ind\u00e9pendant de MicroSoft.</li> <li>2013: Microsoft d\u00e9clare durant la conf\u00e9rence Build (Apple: WWDC, Google: Google IO) son souhait de faire de l'Open Source avec la fameuse citation: Microsoft\u2665\ufe0fLinux.</li> <li>Depuis 2014: Cr\u00e9ation de Fondation .Net et sortie de projets .Net en OSS</li> <li>.Net Core (octobre 2014), EFCore, MSBuild, VSCode, .NetStandard, etc.</li> <li>Fin 2020, sortie de .Net 5 et abandon du terme .Net Core en faveur de .Net tout court</li> </ul> <p>.Net et .Net Framework sont deux frameworks diff\u00e9rents</p> <p>Bien qu'ayant des classes et fonctions communtes, .Net Framework et .Net sont deux frameworks diff\u00e9rents. Le premier est d\u00e9pr\u00e9ci\u00e9 et n'est compatible qu'avec Windows. Le deuxim\u00e8e est d'actualit\u00e9 et est multiplatforme.</p>"},{"location":"dotnet/dotnet/#quelques-apis","title":"Quelques APIs","text":"<ul> <li>Types primitifs: System.Boolean and System.Int32, etc.</li> <li>Collections: System.Collections.Generic.List, System.Collections.Generic.Dictionary, etc.<ul> <li>Les collection d\u00e9signent les structures de donn\u00e9es ou les types qui stockent un ensemble de donn\u00e9es. Exemples: tableau, listes, dictionnaire (Map), ensembles (Set), cha\u00eene de caract\u00e8res</li> </ul> </li> <li>Types utilitaires: System.Net.Http.HttpClient, System.IO.FileStream, etc.</li> <li>Data types, such as System.Data.DataSet, and System.Data.Entity.DbSet.</li> <li>High-performance types, such as System.Span, System.Numerics.Vector, and Pipelines</li> </ul>"},{"location":"dotnet/dotnet/#langages-du-net","title":"Langages du .Net","text":"<ul> <li>.Net supporte officiellement C# et F#</li> <li>F# : langage fonctionnel pure d\u00e9velopp\u00e9 par Microsoft</li> <li>C# : langage de programmation d\u00e9velopp\u00e9 par Microsoft (inspir\u00e9 de Java et C++ \u00e0 la base et s\u2019inspire encore d\u2019autres langages)</li> <li>Le langage C# est le plus utilis\u00e9 en .net</li> </ul>"},{"location":"dotnet/dotnet/#collections","title":"Collections","text":"<p>.Net fournit les types de collections courantes et des m\u00e9thodes pour les manipuler. Il propose m\u00eame des fonctionnalit\u00e9s int\u00e9ressantes comme l'indexation \u00e0 l'envers et par intervalle.</p> <pre><code>// See https://aka.ms/new-console-template for more information\nList&lt;string&gt; messages = [\"I\", \"Love\", \"C#\"];\nmessages.Add(\"in 2024\");\nConsole.WriteLine(messages[0]);\n// ^ -&gt; indexation invers\u00e9e\nConsole.WriteLine(messages[^1]);\nConsole.WriteLine(messages);\n// string.Join Pour afficher proprement\nConsole.WriteLine(string.Join(\" $ \", messages));\nConsole.WriteLine(string.Join(\" - \", messages[1..3]));\nConsole.WriteLine(string.Join(\" - \", messages[1..^1]));\n// i..j -&gt; extraction de la sous-liste de l'indice i \u00e0 l'indice j-1\nvar subMessages = messages[1..3];\nConsole.WriteLine(subMessages[0]);\n\nforeach (var message in messages)\n{\n  Console.Write($\"{message} \");\n}\nConsole.WriteLine();\n\nforeach (var c in \"Hello\")\n{\n  Console.WriteLine($\"Current char {c}\");\n}\n\n// List of ints\nList&lt;int&gt; numbers = [5, -9, 2, 3];\nConsole.WriteLine(string.Join(\" - \", numbers));\n\n// Lists can contain any type. Here we use a record\nHero h1 = new(\"Lapin de Gar\u00e8ne\", 100);\nList&lt;Hero&gt; heroes = [h1, new(\"Raze\", 90)];\nConsole.WriteLine($\"Name of the 1st hero: {heroes[0].Name}\");\nConsole.WriteLine(string.Join(\" - \", heroes));\n\nList&lt;Hero2&gt; secondHeroes = [new() { Name = \"Siraka\", Hp = 50 }, new() { Name = \"Malfait\", Hp = 80 }];\nConsole.WriteLine(string.Join(\" - \", secondHeroes));\n\nrecord Hero(string Name, int Hp);\n\nclass Hero2\n{\n  public required string Name { get; set; }\n  public required int Hp { get; set; }\n\n  public override string ToString() =&gt; $\"Name: {Name}, HP: {Hp}\";\n}\n</code></pre>"},{"location":"dotnet/dotnet/#linq","title":"LINQ","text":"<p>LINQ fournit des fonctions et des mots-cl\u00e9s permettant de manipuler des collections de donn\u00e9es. LINQ est un acronyme pour Language Integrated Query. Deux syntaxes sont possible: la syntaxe de requ\u00eate (ressemble \u00e0 du SQL) et la syntaxe de m\u00e9thode (ressemble aux m\u00e9thodes fitler map et reduce qu'on trouve dans d'autres langages).</p> <pre><code>List&lt;int&gt; numbers = [1, 2, 3, 4, 5, 6];\n// cr\u00e9er une liste qui contient le double des nombres impairs\nList&lt;int&gt; resultNumbers = [];\nforeach (var n in numbers)\n{\n  if (n % 2 == 1)\n  {\n    resultNumbers.Add(n * 2);\n  }\n}\nConsole.WriteLine(string.Join(\", \", resultNumbers));\n\nbool isOdd(int n) =&gt; n % 2 == 0;\nFunc&lt;int, bool&gt; isOdd2 = n =&gt; n % 2 == 1;\n// LINQ Method syntax:\nvar oddNumbers = numbers.Where(n =&gt; n % 2 == 1);\nvar oddNumbers2 = numbers.Where(isOdd2);\nvar oddNumbers3 = numbers.Where(isOdd);\nConsole.WriteLine(string.Join(\", \", oddNumbers));\n\nvar doubleOddNumbers = oddNumbers.Select((n) =&gt; n * 2);\nConsole.WriteLine(string.Join(\", \", doubleOddNumbers));\n\nvar resultNumbers2 = numbers.Where(n =&gt; n % 2 == 1).Select(n =&gt; n * 2);\nConsole.WriteLine(string.Join(\", \", resultNumbers2));\n// With LINQ, we can add optimisations easily\nvar resultNumbers3 = numbers.AsParallel()\n                            .Where(n =&gt; n % 2 == 1)\n                            .Select(n =&gt; n * 2);\n\n// LINQ query syntax: resultNumbers4 is translated (intenally) into resultNumbers2\nvar resultNumbers4 = from n in numbers where n % 2 == 1 select n * 2;\n\n// G\u00e9n\u00e9rer un tableau al\u00e9atoire de 6 entier\nRandom rng = new();\nvar randomNumbers = Enumerable.Range(1, 10).Select(n =&gt; rng.Next(-10, 10)).ToList();\nConsole.WriteLine($\"Random numbers {string.Join(\", \", randomNumbers)}\");\nConsole.WriteLine(@$\"\nSum: {randomNumbers.Sum()} or {randomNumbers.Aggregate((agg, cur) =&gt; agg + cur)}\nMutliply all elements: {randomNumbers.Aggregate(1, (agg, cur) =&gt; agg * cur)}\nAverage: {randomNumbers.Average()}\nMax: {randomNumbers.Max()} or {randomNumbers.Aggregate((agg, cur) =&gt; agg &gt; cur ? agg : cur)}\nMin: {randomNumbers.Min()} or {randomNumbers.Aggregate((agg, cur) =&gt; agg &lt; cur ? agg : cur)}\n\");\n</code></pre>"},{"location":"dotnet/dotnet/#fichiers","title":"Fichiers","text":"<ul> <li>C# propose plusieurs fa\u00e7ons de manipuler des fichiers</li> <li>Les classes <code>StreamReader</code> et <code>StreamWriter</code> permettent de manipuler les fichiers sous forme de flux de donn\u00e9es synchrones.</li> <li>Il existe aussi des m\u00e9thodes utilitaires pour lire et \u00e9crire le contenu du fichier en une fois sans passer pas des streams. La Doc de C# montre comment effectuer les t\u00e2ches communes</li> </ul> <p>Les streams</p> <ul> <li>Un <code>Stream</code> (ou flux en Fran\u00e7ais) permet de manipuler des donn\u00e9es au fur et \u00e0 mesure (sans avoir \u00e0 les charger int\u00e9gralement en m\u00e9moire)</li> <li>L'avantage des streams et qu'ils permettent consommer g\u00e9n\u00e9ralement moins de m\u00e9moire et qu'il permettent de commencer \u00e0 traiter plus rapidement la donn\u00e9es car on n'est pas oblig\u00e9 d'attendre </li> <li>Les streams sont donc pariculi\u00e8rement utile quand on veut traveiller avec des fichiers ou si on fait du r\u00e9seau car les temps d'acc\u00e8s sont moins rapides qu'un</li> <li>Par contre, la donn\u00e9es est d\u00e9j\u00e0 int\u00e9gralement charg\u00e9e en m\u00e9moire, les streams ne sont pas pertinents.</li> </ul> <pre><code>StreamReader sr = new(\"hello.txt\");\n\nConsole.WriteLine(sr.ReadLine());\nConsole.WriteLine((char)sr.Read());\nConsole.WriteLine((char)sr.Read());\nConsole.WriteLine((char)sr.Peek());\n// Don't forget to close the stream to free it\nsr.Close();\n\n// With using, sr2 will be automatically closed at the end\nusing (StreamReader sr2 = new(\"hello.txt\"))\n{\n  string? line = sr2.ReadLine();\n  while (line != null)\n  {\n    Console.WriteLine($\"Ligne r\u00e9cupr\u00e9e: {line}\");\n    line = sr2.ReadLine();\n  }\n}\n\nusing (StreamWriter sw = new(\"test.txt\"))\n{\n  sw.WriteLine(\"Hello\");\n  sw.Write(\" tout le monde\");\n  sw.WriteLine(\"J'aime\");\n  sw.WriteLine(\"Le C#\");\n}\n\n// Raccourci pour lire tout le contenu d'un fichier\nstring fileContent = File.ReadAllText(\"test.txt\");\nConsole.WriteLine(fileContent);\n</code></pre>"},{"location":"dotnet/dotnet/#programmation-asynchrone","title":"Programmation asynchrone","text":"<ul> <li>Pour chaque programme que vous lancez, un processus est cr\u00e9\u00e9<ul> <li>Un processus est lanc\u00e9 avec un seul thread au d\u00e9marrage et peut en g\u00e9rer plusieurs par la suite</li> </ul> </li> <li>Les processus et les threads s\u2019ex\u00e9cutent de fa\u00e7on asynchrone (on dit aussi, de fa\u00e7on concurrente)<ul> <li>En g\u00e9n\u00e9ral, on cr\u00e9e des Thread avec un <code>new Thread()</code> ou une syntaxe similaire selon le langage</li> <li>Dans un processeur avec un seul noyau (single core), les threads s'ex\u00e9cutent sur le m\u00eame noyau</li> <li>Dans un processeur avec plusieurs noyaux (single core), les threads peuvent s'ex\u00e9cutent sur des noyaux diff\u00e9rents. On parle alors de programmation parall\u00e8le</li> </ul> </li> <li>Cependant, les processus et les threads sont des fonctionnalit\u00e9s g\u00e9r\u00e9s au niveau de votre OS et non au niveau du langage et son runtime<ul> <li>Cela rend leur manipulation et optimisation un peu compliqu\u00e9e</li> </ul> </li> <li>C'est pour cela que certains langages proposent leur propre approche de programmation asynchrone<ul> <li>Cela permet de proposer un mod\u00e8le de programmation plus simple et des optimisation plus faciles</li> </ul> </li> <li>En C#, le mod\u00e8le de programmation asynchrone repose sur les t\u00e2ches asynchrones (ou <code>async Tasks</code>)</li> </ul>"},{"location":"dotnet/maui/","title":"maui","text":""},{"location":"dotnet/maui/#maui","title":"MAUI","text":"<pre><code># Windows\ndotnet workload install maui --source https://api.nuget.org/v3/index.json\n# macOS\nsudo dotnet workload install maui --source https://api.nuget.org/v3/index.json\n# Create a new projet\ndotnet new maui -n \"MyMauiApp\"\n</code></pre>"},{"location":"dotnet/monogame/","title":"D\u00e9veloppement de jeux 2D avec monogame","text":""},{"location":"dotnet/monogame/#developpement-de-jeux-2d-avec-monogame","title":"D\u00e9veloppement de jeux 2D avec monogame","text":""},{"location":"dotnet/monogame/#modele-de-developpement-avec-monogame","title":"Mod\u00e8le de d\u00e9veloppement avec Monogame","text":"<ul> <li>Le d\u00e9veloppement de jeux avec Monogame repose sur l'ex\u00e9cution d'une boucle infinie qui ex\u00e9cute 60 it\u00e9ration par seconde (pour avoir un jeu en 60 fps)<ul> <li>Ce mod\u00e8le peut \u00eatre retrouv\u00e9 dans d'autres frameworks de jeux</li> </ul> </li> <li>Chaque it\u00e9ration effectue les actions suivantes:<ol> <li>Lire les touches du clavier</li> <li>Mettre \u00e0 jour la logique du jeu</li> <li>Afficher le rendu de l'image actuelle</li> </ol> </li> <li>Le framework Monogame permet au d\u00e9veloppeur de personnaliser le comportement des \u00e9tapes 2 et 3.<ul> <li>Cela veut dire que l'on peut coder ce qui se passe sur chaque image (ou frame) et afficher ce qu'on veut \u00e0 chaque image (frame)</li> </ul> </li> <li>Voici une repr\u00e9sentation en pseudo-code</li> </ul> <pre><code>var game = new Game();\ngame.Initialize(); // *\ngame.LoadContent(); // *\nwhile (true){\n    game.readInput();\n    game.Update(); // *\n    game.Draw(); // *\n}\n// *: peuvent \u00eatre personnalis\u00e9s (ou surcharg\u00e9s) avec l'h\u00e9ritage\n</code></pre>"},{"location":"dotnet/monogame/#lexique-monogame","title":"Lexique monogame","text":"<ul> <li>Sprite: tout \u00e9l\u00e9ment dans l'\u00e9cran (personnage, ennemis, d\u00e9cors, etc.).</li> <li><code>Texture2D</code>: c'est le rendu associ\u00e9 \u00e0 un sprite.<ul> <li>Par exemple: si on prend le sprite de Mario, alors sa Texture2D contiendra le dessin du personnage \u00e0 moustache.</li> <li>Par exemple: si on prend le premier niveau du jeu Super Mario Bros, alors sa Texture2D contiendra le dessin du terrain, des obstacles, du ciel, des herbes et des nuages.</li> </ul> </li> <li>On peut consid\u00e9rer un sprite comme un rectangle avec un rendu charg\u00e9 depuis une Texture2D.</li> <li><code>SpriteBatch</code>: une classe qui g\u00e8re et dessine \u00e0 l'\u00e9cran un ensemble de sprites<ul> <li>Par exemple: le <code>SpriteBatch</code> du premier niveau de Super Mario Bros contiendrait les sprites de: Mario, les ennemies (Goombas et Paratroopers), terrain principal, sous-terrain, le drapeau, les blocs, les bonus et le HUD (Heads Up Display) (Score, vies, temps).</li> </ul> </li> <li>Fichier <code>mgcb</code>: Fichier contenant les ressources d'un jeu Monogame (textures, sons, etc.)</li> </ul>"},{"location":"dotnet/monogame/#premiers-pas-avec-monogame","title":"Premiers pas avec Monogame","text":"<ul> <li>Ajout du mod\u00e8le de projet: <code>dotnet new install MonoGame.Templates.CSharp</code></li> <li>V\u00e9rifier qie le mod\u00e8le a \u00e9t\u00e9 ajout\u00e9 avec un <code>dotnet new list</code></li> <li>Cr\u00e9er le projet: <code>dotnet new mgdesktopgl -o first-game</code></li> <li><code>cd first-game</code></li> <li>V\u00e9rifier dans csproj que TargetFramework est la derni\u00e8re version du framework .net</li> <li>Lancer: <code>dotnet restore</code></li> <li>Puis: <code>dotnet run</code></li> </ul>"},{"location":"dotnet/monogame/#exercice-deux-carres-et-intersection","title":"Exercice: deux carr\u00e9s et intersection","text":"<ul> <li>Cr\u00e9er un jeu monogame qui affiche deux carr\u00e9s</li> <li>Le premier est situ\u00e9 au centre et est statique</li> <li>Le deuxi\u00e8me est plac\u00e9 al\u00e9atoirement dans l\u2019\u00e9cran et est contr\u00f4l\u00e9 par le joueur</li> <li>Associer une texture sous forme d'une couleur \u00e0 chacun des carr\u00e9s</li> <li>Lorsque les deux carr\u00e9s se touchent l\u2019arri\u00e8re-plan devient rouge, sinon il est bleu</li> <li>Le score du joueur augmente \u00e0 chaque frame de 1 point si les carr\u00e9s ne se touche pas, et il baisse de 5 points par frame s\u2019il se touchent</li> <li>Afficher le score en temps r\u00e9el</li> <li>Faire d\u00e9placer le premier carr\u00e9 al\u00e9atoirement de fa\u00e7on fluide (il ne faut pas qu\u2019il se t\u00e9l\u00e9porte)</li> </ul>"},{"location":"dotnet/monogame/#fichier-mgcb","title":"Fichier mgcb","text":"<ul> <li>Un fichier mgcb permet de contenir, de fa\u00e7on optimale, les ressources d\u2019un jeu XNA / MonoGame</li> <li>Afin de manipuler ce fichier, il faut installer deux outils<ul> <li>Un \u00e9diteur pour ajouter des ressources: <code>mgcb</code></li> <li>Un compilateur pour qu\u2019il puisse \u00eatre optimis\u00e9 pour l\u2019ex\u00e9cution: <code>mgcb-editor-(platforme)</code></li> </ul> </li> <li>Pour installer correctement le compilateur, il faut d\u2019abord avoir un fichier .config/dotnet-tools.json dans son projet avec la commande <code>dotnet new tool-manifest</code></li> <li>Installer le compilateur: <code>dotnet tool install dotnet-mgcb</code> (il sera lanc\u00e9 automatiquement lorsqu'on fera <code>dotnet run</code>)</li> <li>Installer l\u2019\u00e9diteur pour windows: <code>dotnet tool install dotnet-mgcb-editor</code></li> <li>Puis le lancer en lan\u00e7ant la commande <code>dotnet mgcb-editor</code></li> <li>Un fois l\u2019\u00e9diteur ouvert, cr\u00e9er un nouveau mgcb dans <code>[racine du projet]/Content/Content.mgcb</code></li> <li>Vous pouvez suivre ce guide pour voir comment ajouter et charger des ressources</li> </ul>"},{"location":"dotnet/monogame/#animations","title":"Animations","text":"<ul> <li>monogameextended propose de simplifier l'animation des sprites.</li> </ul>"},{"location":"go/","title":"Programmation Go","text":""},{"location":"go/#programmation-go","title":"Programmation Go","text":"<p>Go est un langage de programmation d\u00e9velopp\u00e9 par Google, connu pour sa simplicit\u00e9 et sa performance. Il est utilis\u00e9 pour le d\u00e9veloppement de logiciels, d'applications web et de syst\u00e8mes d'exploitation.</p>"},{"location":"go/#apprendre-go","title":"Apprendre Go","text":"<ul> <li>Tour de Go : explorez les fonctionnalit\u00e9s de base du langage Go et notez ses caract\u00e9ristiques uniques.<ul> <li>En suppl\u00e9ment Concepts de Go avec des exemples</li> </ul> </li> <li>Cr\u00e9ation d'une CLI avec Go<ul> <li>Version de 2016</li> </ul> </li> <li>D\u00e9veloppement web en Go</li> </ul>"},{"location":"go/#questions","title":"Questions","text":"<ol> <li>Quel est l'int\u00e9r\u00eat du package main en Go ?</li> <li>Quelle est la diff\u00e9rence entre <code>:=</code> et <code>=</code> en Go ?</li> <li>Quelle est la diff\u00e9rence entre <code>var</code> et <code>const</code> en Go ?</li> <li>Quelle est la diff\u00e9rence entre <code>nil</code> et <code>null</code> en Go ?</li> <li>Quelle est la diff\u00e9rence entre <code>panic</code> et <code>error</code> en Go ?</li> <li>Quel style d'import est pr\u00e9f\u00e9rable entre imports multiples et une seul import group\u00e9 ?</li> <li>Comment exporter un identifiant en Go ?</li> <li>En Go, le type vient avant ou apr\u00e8s le nom de la variable ?</li> <li>Que singifie une naked return (ou return nu) en Go ?</li> <li>Dans quel unique endroit peut-on utiliser := ?</li> <li>Est-ce que Go autorise la conversion implicite de types ?</li> <li>Combien de types de boucles en Go connaissez-vous ? Quels sont-ils ?</li> <li>Est-ce Go autorise les switch sans condition (ou sans expression apr\u00e8s le switch) ?</li> <li>Quelle est la diff\u00e9rence entre <code>[n]T</code> et <code>[]T</code> en Go ?</li> <li>Est-ce qu'un slice est un nouveau tableau ?</li> <li>Que font <code>make</code> et <code>append</code> en Go ?</li> <li>Est-ce que <code>append</code> retourne un nouveau slice ou modifie le slice existant ?</li> <li>Qu'est-ce qu'une closure en Go ?</li> <li>Est-ce que Go a des classes ? Si oui, expliquez comment elles fonctionnent. Sinon, expliquer les alternatives.</li> <li>Quelle est la diff\u00e9rence entre une un m\u00e9thode et une fonction en Go ?</li> <li>Quelles la diff\u00e9rence entre un m\u00e9thode avec un receveur de type pointeur et un receveur de type valeur ?</li> <li>Est-ce que Go renvoie une NPE quand on appelle une m\u00e9thode d'une interface nulle ?</li> <li>A quoi servent les formateurs %v, %T, %s et %d ?</li> <li>Expliquer comment g\u00e9rer les erreurs en Go. Est-ce que Go a des exceptions ?</li> </ol> R\u00e9ponses <ol> <li>Le package <code>main</code> est le point d'entr\u00e9e d'une application Go.</li> <li><code>:=</code> est utilis\u00e9 pour d\u00e9clarer et initialiser une variable, tandis que <code>=</code> assigne une valeur \u00e0 une variable d\u00e9j\u00e0 d\u00e9clar\u00e9e.</li> <li><code>var</code> d\u00e9clare une variable, alors que <code>const</code> d\u00e9clare une constante.</li> <li><code>nil</code> est utilis\u00e9 en Go pour d\u00e9signer l'absence de valeur pour les types de r\u00e9f\u00e9rence, <code>null</code> \u00e9tant un concept non applicable en Go.</li> <li><code>panic</code> est un \u00e9tat d'erreur fatale qui entra\u00eene l'arr\u00eat du programme, alors qu<code>'error</code> est une interface qui peut \u00eatre g\u00e9r\u00e9e.</li> <li>Il est pr\u00e9f\u00e9rable d'utiliser un import group\u00e9 pour am\u00e9liorer la lisibilit\u00e9 du code.</li> <li>Pour exporter un identifiant en Go, il doit commencer par une majuscule.</li> <li>En Go, le type vient apr\u00e8s le nom de la variable.</li> <li>Une naked return est une instruction de retour sans argument, qui retourne les valeurs des variables de retour nomm\u00e9es.</li> <li>On ne peut utiliser <code>:=</code> que dans une fonction.</li> <li>Go n'autorise pas la conversion implicite de types.</li> <li>Il existe un seul type de boucles en Go qui est la boucle <code>for</code>.</li> <li>Go autorise les switch sans condition, qui permettent de simplifier les conditions multiples.</li> <li><code>[n]T</code> est un tableau de taille fixe, tandis que <code>[]T</code> est une tranche de taille variable.</li> <li>Un slice est une vue sur un tableau ou un pointeur vers celui-ci.</li> <li><code>make</code> est utilis\u00e9 pour cr\u00e9er des slices, des maps et des channels, tandis que <code>append</code> est utilis\u00e9 pour ajouter des \u00e9l\u00e9ments \u00e0 un slice.</li> <li><code>append</code> retourne un nouveau slice si la capacit\u00e9 du slice est d\u00e9pass\u00e9e, sinon il modifie le slice existant.</li> <li>Une closure est une fonction qui capture les variables de son environnement.</li> <li>Go n'a pas de classes, mais utilise des structures pour d\u00e9finir des types de donn\u00e9es et des m\u00e9thodes associ\u00e9es, en plus des interfaces pour d\u00e9finir des comportements communs.</li> <li>Une m\u00e9thode est une fonction associ\u00e9e \u00e0 un type, qui peut \u00eatre appel\u00e9e sur une instance de ce type.</li> <li>Une m\u00e9thode avec un receveur de type pointeur modifie la valeur de l'instance, tandis qu'un receveur de type valeur cr\u00e9e une copie de l'instance.</li> <li>Go ne renvoie pas de NPE et appelle la m\u00e9thode avec un receveur nul si elle a un type concret. N\u00e9anmoins, si l'interface n'a pas type concret, l'appel de la m\u00e9thode entra\u00eenera une panique.</li> <li><code>%v</code> affiche la valeur de la variable, <code>%T</code> affiche le type de la variable, <code>%s</code> affiche la cha\u00eene de caract\u00e8res et <code>%d</code> affiche un entier.</li> <li>Les erreurs en Go sont g\u00e9r\u00e9es en retournant une valeur d'erreur en plus de la valeur de retour, qui peut \u00eatre v\u00e9rifi\u00e9e et trait\u00e9e par l'appelant. Go n'a pas d'exceptions, mais utilise des valeurs d'erreur pour signaler les erreurs.</li> </ol>"},{"location":"go/#quelques-programmes","title":"Quelques programmes","text":"Sqrt <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc Sqrt(x float64) float64 {\n    z := 1.0\n    previousZ := 0.0\n    epsilon := 0.000001\n    for i := 0; i &lt; 10 &amp;&amp; math.Abs(previousZ-z) &gt; epsilon; i++ {\n        previousZ = z\n        z -= (z*z - x) / (2 * z)\n        fmt.Println(z)\n    }\n    return z\n}\n\nfunc main() {\n    fmt.Println(Sqrt(2), math.Sqrt(2))\n    fmt.Println(Sqrt(9), math.Sqrt(9))\n}\n</code></pre> pic <p>A lancer depuis l'\u00e9diteur en ligne pour avoir un rendu graphique.</p> <pre><code>package main\n\nimport \"golang.org/x/tour/pic\"\n\nfunc Pic(dx, dy int) [][]uint8 {\n    columns := make([][]uint8, dx)\n    for x := 0; x &lt; dx; x++ {\n        row := make([]uint8, dy)\n        for y := 0; y &lt; dy; y++ {\n            row[y] = uint8((x + y) / 2)\n            // row[y] = uint8(x ^ y)\n        }\n        columns[x] = row\n    }\n    return columns\n}\n\nfunc main() {\n    pic.Show(Pic)\n}\n</code></pre> wordcount <pre><code>/*\nImplement WordCount. It should return a map of the counts of each \u201cword\u201d in the string s.\nThe wc.Test function runs a test suite against the provided function and prints success or failure.\n\nYou might find strings.Fields helpful.\n*/\npackage main\n\nimport (\n    \"strings\"\n\n    \"golang.org/x/tour/wc\"\n)\n\nfunc WordCount(s string) map[string]int {\n    counts := make(map[string]int)\n    for _, word := range strings.Fields(s) {\n        counts[word] = counts[word] + 1\n    }\n    return counts\n}\n\nfunc main() {\n    wc.Test(WordCount)\n}\n</code></pre> fibclosure <pre><code>package main\n\nimport \"fmt\"\n\n// fibonacci is a function that returns\n// a function that returns an int.\nfunc fibonacci() func() int {\n    nm1 := 0\n    nm2 := 0\n\n    return func() int {\n        n := nm1 + nm2\n        nm2 = nm1\n        nm1 = n\n        if n == 0 {\n            nm2 = 1\n        }\n        return n\n    }\n}\n\nfunc main() {\n    f := fibonacci()\n    for i := 0; i &lt; 10; i++ {\n        fmt.Println(f())\n    }\n}\n</code></pre> stringerdemo <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"strconv\"\n    \"strings\"\n)\n\ntype IPAddr [4]byte\n\nfunc (ipAddr IPAddr) String() string {\n    // Slice of length 0 and capacity 4 (size of array)\n    s := make([]string, 0, len(ipAddr))\n    for _, v := range ipAddr {\n        s = append(s, strconv.Itoa(int(v)))\n    }\n    return strings.Join(s, \".\")\n}\n\nfunc main() {\n    hosts := map[string]IPAddr{\n        \"loopback\":  {127, 0, 0, 1},\n        \"googleDNS\": {8, 8, 8, 8},\n    }\n    for name, ip := range hosts {\n        fmt.Printf(\"%v: %v\\n\", name, ip)\n    }\n}\n</code></pre> errordemo <pre><code>\n</code></pre> readerdemo <pre><code>\n</code></pre> rot13reader <pre><code>/*\nsource: https://go.dev/tour/methods/23\n\nA common pattern is an io.Reader that wraps another io.Reader, modifying the stream in some way.\n\nFor example, the gzip.NewReader function takes an io.Reader (a stream of compressed data) and returns a *gzip.Reader that also implements io.Reader (a stream of the decompressed data).\n\nImplement a rot13Reader that implements io.Reader and reads from an io.Reader, modifying the stream by applying the rot13 substitution cipher to all alphabetical characters.\n\nThe rot13Reader type is provided for you. Make it an io.Reader by implementing its Read method.\n*/\npackage main\n\nimport (\n    \"io\"\n    \"os\"\n    \"strings\"\n)\n\ntype rot13Reader struct {\n    r io.Reader\n}\n\nfunc (r rot13Reader) Read(b []byte) (int, error) {\n    n, err := r.r.Read(b)\n    if err != nil {\n        return 0, err\n    }\n    for i := range n {\n        if b[i] &lt; 'A' || b[i] &gt; 'z' || (b[i] &gt; 'Z' &amp;&amp; b[i] &lt; 'a') {\n            continue\n        }\n        middleLetter := 'M'\n        if b[i] &gt;= 'a' {\n            middleLetter = 'm'\n        }\n        if b[i] &gt; byte(middleLetter) {\n            b[i] -= 13\n        } else {\n            b[i] += 13\n        }\n    }\n    return n, nil\n}\n\nfunc main() {\n    s := strings.NewReader(\"Lbh penpxrq gur pbqr!\")\n    r := rot13Reader{s}\n    io.Copy(os.Stdout, &amp;r)\n}\n</code></pre>"},{"location":"go/cobra/","title":"CLI avec Cobra","text":""},{"location":"go/cobra/#cli-avec-cobra","title":"CLI avec Cobra","text":"<p>Cobra est une biblioth\u00e8que populaire en Go pour cr\u00e9er des applications en ligne de commande (CLI). Elle facilite la gestion des commandes, des sous-commandes, des flags et de la documentation int\u00e9gr\u00e9e.</p> <p>Elle peut \u00eatre coupl\u00e9e avec ces librairies pour l'\u00e9toffer :</p> <ul> <li>Viper : pour la gestion de la configuration.</li> <li>Fang : pour la cr\u00e9ation d'interfaces utilisateur textuelles (TUI).</li> <li>Lipgloss : pour la gestion des styles et des couleurs dans le terminal.</li> <li>Bubble Tea : pour la cr\u00e9ation d'interfaces utilisateur textuelles (TUI).</li> </ul> <p>Quelques exemples de projets se trouvent ici</p>"},{"location":"go/exercices/","title":"Exercices","text":"<p>Ecrire un programme qui cr\u00e9e deux variables avec des valeurs al\u00e9atoires et ensuite permute leurs valeurs via une fonction.</p> In\u00a0[14]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n  \"math/rand\"\n)\n\nfunc swap(x, y int) (int, int) {\n  return y, x\n}\n\nfunc main() {\n\ta := rand.Intn(30)\n  b := rand.Intn(30)\n  fmt.Println(a, b)\n  fmt.Println(swap(a, b))\n  i, j := swap(a, b) // i prend la valeur b et j celle de a\n  fmt.Println(i, j)\n}\n</pre> package main  import ( \t\"fmt\"   \"math/rand\" )  func swap(x, y int) (int, int) {   return y, x }  func main() { \ta := rand.Intn(30)   b := rand.Intn(30)   fmt.Println(a, b)   fmt.Println(swap(a, b))   i, j := swap(a, b) // i prend la valeur b et j celle de a   fmt.Println(i, j) } <pre>10 9\n9 10\n9 10\n</pre> <p>Impl\u00e9menter une fonction qui claclule la racine carr\u00e9e d'un entier. M\u00e9thode propos\u00e9e: chercher l'entier z pour lequel <code>z * z = x</code>. Si x n'est pas un carr\u00e9 parfait, retourner 0.</p> In\u00a0[15]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc Sqrt(x int) int {\n  for i := 1; i * i &lt;= x ; i += 1 {\n    if i * i == x {\n      return i\n    }\n  }\n  return 0\n}\n\nfunc main() {\n\tfmt.Println(Sqrt(4), Sqrt(9), Sqrt(10))\n}\n</pre> package main  import ( \t\"fmt\" )  func Sqrt(x int) int {   for i := 1; i * i &lt;= x ; i += 1 {     if i * i == x {       return i     }   }   return 0 }  func main() { \tfmt.Println(Sqrt(4), Sqrt(9), Sqrt(10)) } <pre>2 3 0\n</pre> <p>Impl\u00e9menter une fonction qui claclule la racine carr\u00e9e d'un float64. M\u00e9thode propos\u00e9e: ajuster une valeur de d\u00e9part z avec cette formule: <code>z -= (z*z - x) / (2*z)</code> \u00e0 chaque it\u00e9ration jusqu'\u00e0 ce que la diff\u00e9rence entre <code>z * z</code> et <code>x</code> soit inf\u00e9rieure \u00e0 une certaine pr\u00e9cision epsilon. D\u00e9marrer avec <code>z = 1.0</code> et prendre <code>epsilon = 0.00001</code>.</p> In\u00a0[21]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n  \"math\"\n)\n\nfunc Sqrt(x, start, epsilon float64) float64 {\n  z := start\n  fmt.Println(\"computing sqrt of\", x, \"with start\", start, \"epsilon\", epsilon)\n  for math.Abs(z*z - x) &gt; epsilon {\n    z -= (z*z - x) / (2*z)\n    fmt.Println(z, z*z, \"math.abs(z*z - x)\", math.Abs(z*z - x))\n  }\n  return z\n}\n\nfunc main() {\n\tfmt.Println(Sqrt(4, 1.0, 0.0001), Sqrt(9, 1.0, 0.0001), Sqrt(10, 1.0, 0.0001))\n}\n</pre> package main  import ( \t\"fmt\"   \"math\" )  func Sqrt(x, start, epsilon float64) float64 {   z := start   fmt.Println(\"computing sqrt of\", x, \"with start\", start, \"epsilon\", epsilon)   for math.Abs(z*z - x) &gt; epsilon {     z -= (z*z - x) / (2*z)     fmt.Println(z, z*z, \"math.abs(z*z - x)\", math.Abs(z*z - x))   }   return z }  func main() { \tfmt.Println(Sqrt(4, 1.0, 0.0001), Sqrt(9, 1.0, 0.0001), Sqrt(10, 1.0, 0.0001)) } <pre>computing sqrt of 4 with start 1 epsilon 0.0001\n2.5 6.25 math.abs(z*z - x) 2.25\n2.05 4.2025 math.abs(z*z - x) 0.20249999999999926\n2.000609756097561 4.002439396192742 math.abs(z*z - x) 0.0024393961927419733\n2.0000000929222947 4.000000371689188 math.abs(z*z - x) 3.7168918762521686e-07\ncomputing sqrt of 9 with start 1 epsilon 0.0001\n5 25 math.abs(z*z - x) 16\n3.4 11.559999999999999 math.abs(z*z - x) 2.5599999999999996\n3.023529411764706 9.141730103806228 math.abs(z*z - x) 0.14173010380622786\n3.00009155413138 9.00054933317044 math.abs(z*z - x) 0.000549333170440042\n3.000000001396984 9.000000008381903 math.abs(z*z - x) 8.38190317349087e-09\ncomputing sqrt of 10 with start 1 epsilon 0.0001\n5.5 30.25 math.abs(z*z - x) 20.25\n3.659090909090909 13.388946280991735 math.abs(z*z - x) 3.3889462809917363\n3.196005081874647 10.21444848336857 math.abs(z*z - x) 0.21444848336856936\n3.1624556228038903 10.00112556620394 math.abs(z*z - x) 0.0011255662039413904\n3.162277665175675 10.000000031668918 math.abs(z*z - x) 3.1668918418998053e-08\n2.0000000929222947 3.000000001396984 3.162277665175675\n</pre> <p>Cr\u00e9er un package <code>mysqrt</code> et y d\u00e9placer les deux fonctions d\u00e9finies plus haut.</p> <p>Solution disponible dans ce projet.</p> <p>A retenir: les packages sont identifi\u00e9s par une url. Si c'est un package local, on utilise replace pour indiquer le chemin local.</p> <p>Cr\u00e9er une fonction qui prend une string en argument et donne le nombre d'occurences de ses mots (utiliser strings.Fields) pour s\u00e9parer les mots dans un slice.</p> In\u00a0[2]: Copied! <pre>package main\n\nimport (\n\t\"strings\"\n  \"fmt\"\n)\n\nfunc WordCount(s string) map[string]int {\n\treturn map[string]int{\"x\": 1}\n}\n\nfunc main() {\n  s1 := \"I love go. Let's go\"\n\tfmt.Println(s1, WordCount(s1))\n  s2 := \"to go, or not to go. That it the question, or not that is the question\"\n\tfmt.Println(s2, WordCount(s2))\n}\n</pre> package main  import ( \t\"strings\"   \"fmt\" )  func WordCount(s string) map[string]int { \treturn map[string]int{\"x\": 1} }  func main() {   s1 := \"I love go. Let's go\" \tfmt.Println(s1, WordCount(s1))   s2 := \"to go, or not to go. That it the question, or not that is the question\" \tfmt.Println(s2, WordCount(s2)) }  <pre>I love Go. Let's go map[x:1]\n</pre>"},{"location":"go/exercices/#exercices","title":"Exercices\u00b6","text":"<ol> <li>Ecrire un programme qui cr\u00e9e deux variables avec des valeurs enti\u00e8res al\u00e9atoires entre 0 et 30. Ensuite, permuter leurs valeurs via une fonction. (utiliser <code>\"math/rand\"</code> et sa fonction <code>rand.Intn</code>)</li> <li>Impl\u00e9menter une fonction qui claclule la racine carr\u00e9e d'un entier. M\u00e9thode propos\u00e9e: chercher l'entier z pour lequel <code>z * z = x</code>. Si x n'est pas un carr\u00e9 parfait, retourner 0.</li> <li>Impl\u00e9menter une fonction qui claclule la racine carr\u00e9e d'un float64. M\u00e9thode propos\u00e9e: ajuster une valeur de d\u00e9part z avec cette formule: <code>z -= (z*z - x) / (2*z)</code> \u00e0 chaque it\u00e9ration jusqu'\u00e0 ce que la diff\u00e9rence entre <code>z * z</code> et <code>x</code> soit inf\u00e9rieure \u00e0 une certaine pr\u00e9cision epsilon. D\u00e9marrer avec <code>z = 1.0</code> et prendre <code>epsilon = 0.00001</code>.</li> <li>Cr\u00e9er un package <code>mysqrt</code> et y d\u00e9placer les deux fonctions d\u00e9finies plus haut.</li> <li>Cr\u00e9er une fonction qui prend une string en argument et donne le nombre d'occurences de ses mots (utiliser strings.Fields) pour s\u00e9parer les mots dans un slice.</li> <li>Cr\u00e9er un programme qui lit un fichier texte et affiche le nombre de mots qu'il contient.</li> </ol>"},{"location":"go/exercices/#solutions","title":"Solutions\u00b6","text":""},{"location":"go/methods-interfaces/","title":"Methods interfaces","text":"<p>Go n'est pas orient\u00e9 objet (pas de notion de class ou d'h\u00e9rirage). Par contre, on peut d\u00e9finir des m\u00e9thodes sur des types existants. Les m\u00e9thodes sur des pointeurs permettent de modifier l'\u00e9tat de l'objet.</p> In\u00a0[2]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\ntype Vertex struct {\n\tX, Y float64\n}\n\nfunc (v Vertex) Abs() float64 {\n\treturn math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc (v *Vertex) swap() {\n\tv.X, v.Y = v.Y, v.X\n}\n\nfunc main() {\n\tv := Vertex{3, 4}\n\tfmt.Println(v.Abs())\n  v.swap()\n  fmt.Println(v)\n}\n</pre> package main  import ( \t\"fmt\" \t\"math\" )  type Vertex struct { \tX, Y float64 }  func (v Vertex) Abs() float64 { \treturn math.Sqrt(v.X*v.X + v.Y*v.Y) }  func (v *Vertex) swap() { \tv.X, v.Y = v.Y, v.X }  func main() { \tv := Vertex{3, 4} \tfmt.Println(v.Abs())   v.swap()   fmt.Println(v) }  <pre>5\n{4 3}\n</pre> <p>On peut d\u00e9finir des m\u00e9thodes sur uniquement sur des types locaux (d\u00e9finis dans le m\u00eame package).</p> In\u00a0[6]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\ntype MyInt int\n\nfunc (i MyInt) reverseSign() int {\n\treturn int(-i)\n}\n\nfunc main() {\n\ti := MyInt(10)\n\tfmt.Println(i.reverseSign())\n}\n</pre> package main  import ( \t\"fmt\" \t\"math\" )  type MyInt int  func (i MyInt) reverseSign() int { \treturn int(-i) }  func main() { \ti := MyInt(10) \tfmt.Println(i.reverseSign()) }  <pre>-10\n</pre> In\u00a0[\u00a0]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\ntype Abser interface {\n\tAbs() float64\n}\n\ntype MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {\n\tif f &lt; 0 {\n\t\treturn float64(-f)\n\t}\n\treturn float64(f)\n}\n\ntype Vertex struct {\n\tX, Y float64\n}\n\nfunc (v *Vertex) Abs() float64 {\n\treturn math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc main() {\n\tvar a Abser\n\tf := MyFloat(-math.Sqrt2)\n\tv := Vertex{3, 4}\n\n\ta = f  // a MyFloat implements Abser\n\ta = &amp;v // a *Vertex implements Abser\n\n\t// In the following line, v is a Vertex (not *Vertex)\n\t// and does NOT implement Abser.\n\t//a = v\n\n\tfmt.Println(a.Abs())\n}\n</pre> package main  import ( \t\"fmt\" \t\"math\" )  type Abser interface { \tAbs() float64 }  type MyFloat float64  func (f MyFloat) Abs() float64 { \tif f &lt; 0 { \t\treturn float64(-f) \t} \treturn float64(f) }  type Vertex struct { \tX, Y float64 }  func (v *Vertex) Abs() float64 { \treturn math.Sqrt(v.X*v.X + v.Y*v.Y) }  func main() { \tvar a Abser \tf := MyFloat(-math.Sqrt2) \tv := Vertex{3, 4}  \ta = f  // a MyFloat implements Abser \ta = &amp;v // a *Vertex implements Abser  \t// In the following line, v is a Vertex (not *Vertex) \t// and does NOT implement Abser. \t//a = v  \tfmt.Println(a.Abs()) }  <pre>5\n</pre> In\u00a0[4]: Copied! <pre>package main\n\nimport \"fmt\"\n\ntype I interface {\n\tM()\n}\n\nfunc main() {\n\tvar i I\n\tdescribe(i)\n\ti.M()\n}\n\nfunc describe(i I) {\n\tfmt.Printf(\"(%v, %T)\\n\", i, i)\n}\n</pre> package main  import \"fmt\"  type I interface { \tM() }  func main() { \tvar i I \tdescribe(i) \ti.M() }  func describe(i I) { \tfmt.Printf(\"(%v, %T)\\n\", i, i) }  <pre>(&lt;nil&gt;, &lt;nil&gt;)\n</pre> <pre>panic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x2 addr=0x0 pc=0x10463ea38]\n\ngoroutine 1 [running]:\nmain.main()\n\t [[ Cell [4] Line 12 ]] /var/folders/sj/67508vy94d1346kyt0w_kcjw0000gn/T/gonb_d8a79db2/main.go:30 +0x28\nexit status 2\n</pre> <p>Il est possible de g\u00e9rer les valeur null de l'interface dans l'impl\u00e9mentation de ses m\u00e9thodes. Ces m\u00e9thodes doivent dans ce cas ipl\u00e9menter une m\u00e9thode sur un pointeur de l'interface.</p> In\u00a0[5]: Copied! <pre>package main\n\nimport \"fmt\"\n\ntype I interface {\n\tM()\n}\n\ntype T struct {\n\tS string\n}\n\nfunc (t *T) M() {\n\tif t == nil {\n\t\tfmt.Println(\"&lt;nil&gt;\")\n\t\treturn\n\t}\n\tfmt.Println(t.S)\n}\n\nfunc main() {\n\tvar i I\n\n\tvar t *T\n\ti = t\n\tdescribe(i)\n\ti.M()\n\n\ti = &amp;T{\"hello\"}\n\tdescribe(i)\n\ti.M()\n}\n\nfunc describe(i I) {\n\tfmt.Printf(\"(%v, %T)\\n\", i, i)\n}\n</pre> package main  import \"fmt\"  type I interface { \tM() }  type T struct { \tS string }  func (t *T) M() { \tif t == nil { \t\tfmt.Println(\"\") \t\treturn \t} \tfmt.Println(t.S) }  func main() { \tvar i I  \tvar t *T \ti = t \tdescribe(i) \ti.M()  \ti = &amp;T{\"hello\"} \tdescribe(i) \ti.M() }  func describe(i I) { \tfmt.Printf(\"(%v, %T)\\n\", i, i) } <pre>(&lt;nil&gt;, *main.T)\n&lt;nil&gt;\n(&amp;{hello}, *main.T)\nhello\n</pre>"},{"location":"go/methods-interfaces/#methodes-et-interfaces-en-go","title":"M\u00e9thodes et interfaces en Go\u00b6","text":""},{"location":"go/methods-interfaces/#interfaces","title":"Interfaces\u00b6","text":"<p>Est un ensemble de signatures de m\u00e9thodes. La convention en Go est de finir le nom d'une interface par \"er\" (ex: Reader, Writer, etc.). L'impl\u00e9mentation d'une interface est implicite: un type impl\u00e9mente une interface s'il d\u00e9finit toutes les m\u00e9thodes de cette interface (assimilable au duck typing).</p>"},{"location":"go/methods-interfaces/#gestion-de-la-nullabilite","title":"Gestion de la nullabilit\u00e9\u00b6","text":"<p>Une interface a une valeur <code>nil</code> par d\u00e9faut. Appeler une m\u00e9thode sur un <code>nil</code> engendre une erreur \u00e0 l'ex\u00e9cution (au runtime).</p>"},{"location":"go/projets/","title":"Projets types","text":""},{"location":"go/projets/#projets-types","title":"Projets types","text":""},{"location":"go/projets/#api-rest-avec-theme-au-choix","title":"API REST avec th\u00e8me au choix","text":"<p>D\u00e9velopper une API REST qui respecte les exigences ci-dessous. Il faudra utiliser Go et le framework Gin et persister les donn\u00e9es dans une BDD SQLite. Le th\u00e8me de votre projet est libre, mais il doit \u00eatre pertinent, int\u00e9ressant et valid\u00e9 par l'intervenant.</p>"},{"location":"go/projets/#exigences","title":"Exigences","text":"<ul> <li>Endpoints CRUD (Create, Read, Update, Delete) pour g\u00e9rer les ressources de l'application.<ul> <li>Lister tout (0.5 pt)</li> <li>Afficher une \u00e9l\u00e9ment par ID (0.5 pt)</li> <li>Lister via une recherche sur tous les champs (1 pt) (par exemple <code>/search?query=foo</code> va afficher touts les r\u00e9sultats qui contiennent la sous-cha\u00eene <code>foo</code> dans n'importe quel champ).</li> <li>Cr\u00e9er (0.5 pt)</li> <li>Mettre \u00e0 jour un \u00e9l\u00e9ment par ID (0.5 pt)</li> <li>Supprimer un \u00e9l\u00e9ment par ID (0.5 pt)</li> <li>Supprimer plusieurs \u00e9l\u00e9ments par une liste d'ID (0.5 pt)</li> <li>Mettre \u00e0 jour plusieurs \u00e9l\u00e9ments par une liste d'ID (0.5 pt)</li> <li>R\u00e9initialiser la BDD (0.5 pt) (suppression de toutes les donn\u00e9es)</li> </ul> </li> <li>Documentation OpenAPI et Swagger UI. (1 pts) et bien document\u00e9e (1 pts) (astuce).</li> <li>Authentification :<ul> <li>Table users (0.5 pt) (nom, email, mot de passe, isAdmin). Le mot de passe ne doit pas \u00eatre stock\u00e9 en clair.</li> <li>Table d\u00e9j\u00e0 initialis\u00e9e avec un admin (0.5 pt) (Qui doit rester m\u00eame apr\u00e8s une r\u00e9initialisation de la BDD).</li> <li>Verbe d'inscription (0.5 pt) (POST /user/register) : Qui cr\u00e9e un utilisateur et renvoie un JSON contenant un JWT.</li> <li>Verbe de connexion (0.5 pt) (POST /user/login) : Qui v\u00e9rifie les identifiants (email et mot de passe) et renvoie un JSON contenant un JWT.</li> <li>Tous les verbes de l'API doivent \u00eatre prot\u00e9g\u00e9s par un middleware d'authentification (0.5 pt) (astuce). Le JWT doit \u00eatre pass\u00e9 dans un header au format <code>Authorization : Bearer &lt;token&gt;</code>.</li> <li>Verbe pour qu'un utilisateur puisse mettre \u00e0 jour ses propres informations (0.5 pt).</li> <li>Prot\u00e9ger le verbe de reset de la BDD uniquement pour les admins (0.5 pt).</li> <li>Verbe pour qu'un admin puisse mettre \u00e0 jour les informations de n'importe quel utilisateur qui n'est pas admin (0.5 pt).</li> </ul> </li> <li>Un fichier (ou des fichiers) <code>requests.http</code> ou un projet bruno contenant des exemples de requ\u00eates HTTP pour tester l'API. (2 pts)</li> <li>Gestion des erreurs compl\u00e8te et validation des donn\u00e9es (code autre que 200 pour toute erreur). (3 pts)</li> <li>Logging des \u00e9v\u00e8nements (appels, informations aidant \u00e0 l'analyse) dans deux fichiers diff\u00e9rents; un pour les erreurs et un pour les logs normaux. (1 pt)</li> <li>D\u00e9ploiement sur un h\u00e9bergeur gratuit (comme alwaysdata ou render). (3 pts)</li> </ul>"},{"location":"go/projets/#consignes-de-rendu","title":"Consignes de rendu","text":"<ul> <li>Code \u00e0 jour et fonctionnel sur la branche <code>main</code> du d\u00e9p\u00f4t Git.</li> <li>Je dois \u00eatre en mesure de lancer le serveur depuis un GitHub Codespace avec un <code>go run .</code></li> <li>Ajouter un fichier <code>README.md</code> \u00e0 la racine du d\u00e9p\u00f4t contenant :<ul> <li>L'URL du serveur s'il est d\u00e9ploy\u00e9.</li> <li>Votre auto-\u00e9valuation d\u00e9taill\u00e9e (pour chaque exigence donn\u00e9e plus haut, votre auto-\u00e9valuation) et la note totale.</li> </ul> </li> </ul>"},{"location":"go/rest-api/","title":"API REST","text":""},{"location":"go/rest-api/#api-rest","title":"API REST","text":"<ul> <li>Gin est une librairie Go pour cr\u00e9er des API REST. Elle est rapide et facile \u00e0 utiliser.</li> <li>sqlite est une base de donn\u00e9es l\u00e9g\u00e8re et rapide qui tient dans un fichier et ne n\u00e9cessite pas de serveur. Le package database/sql de Go permet de se connecter \u00e0 une base de donn\u00e9es SQLite.</li> </ul>"},{"location":"go/tour/","title":"Tour de Go","text":"<p>Le point d'entr\u00e9e de toute application Go est la fonction <code>main</code> du package <code>main</code>.</p> <p>Cet exemple affiche \"Hello, \u4e16\u754c\" \u00e0 la console\u00a0(\u4e16\u754c signifie \"monde\" et se prononce \"s\u00e9kay\" en japonais).</p> In\u00a0[1]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello, \u4e16\u754c\")\n}\n</pre> package main  import \"fmt\"  func main() { \tfmt.Println(\"Hello, \u4e16\u754c\") } <pre>Hello, \u4e16\u754c\n</pre> <p>On peut regrouper les imports entre parenth\u00e8ses pour importer plusieurs packages.</p> In\u00a0[2]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tfmt.Printf(\"Now you have %g problems.\\n\", math.Sqrt(7))\n}\n</pre> package main  import ( \t\"fmt\" \t\"math\" )  func main() { \tfmt.Printf(\"Now you have %g problems.\\n\", math.Sqrt(7)) } <pre>Now you have 2.6457513110645907 problems.\n</pre> <p>La capitale initiale des noms de fonctions ou de variables rend ces \u00e9l\u00e9ments export\u00e9s et donc accessibles depuis d'autres packages. Donc, ce n'est pas juste une convention.</p> <p>Dans cet exemple <code>Println</code> est accessible depuis le package <code>fmt</code> car son nom commence par une majuscule.</p> In\u00a0[3]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tfmt.Println(math.Pi)\n}\n</pre> package main  import ( \t\"fmt\" \t\"math\" )  func main() { \tfmt.Println(math.Pi) } <pre>3.141592653589793\n</pre> <ul> <li><code>:=</code> permet de d\u00e9clarer et d'initialiser une variable en une seule instruction sans sp\u00e9cifier son type explicitement.</li> <li><code>=</code> permet d'affecter une nouvelle valeur \u00e0 une variable d\u00e9j\u00e0 d\u00e9clar\u00e9e.</li> </ul> In\u00a0[4]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n  a := 10 // int\n  f := 3.142        // float64\n  g := 0.867 + 0.5i // complex128\n  b := \"Hello\"\n\tfmt.Println(a, f, g)\n  fmt.Println(b)\n  b = \"Monde\"\n  fmt.Println(b)\n}\n</pre> package main  import \"fmt\"  func main() {   a := 10 // int   f := 3.142        // float64   g := 0.867 + 0.5i // complex128   b := \"Hello\" \tfmt.Println(a, f, g)   fmt.Println(b)   b = \"Monde\"   fmt.Println(b) } <pre>10 3.142 (0.867+0.5i)\nHello\nMonde\n</pre> <p>Alternativement, <code>var</code> permet de d\u00e9clarer des variables sans les initialiser (on peut toujours initialiser si on veut). Il est n\u00e9cessaire de sp\u00e9cifier le type dans ce cas. Je recommande d'utiliser <code>:=</code> autant que possible, et <code>var</code> lorsque la valeur initiale ne peut \u00eatre obtenue.</p> In\u00a0[5]: Copied! <pre>package main\n\nimport \"fmt\"\n\nvar c, python, java bool\nvar a, b float64 = 1.4, 2.999\n\nfunc main() {\n\tvar i int\n\tfmt.Println(i, c, python, java)\n  fmt.Println(a, b)\n}\n</pre> package main  import \"fmt\"  var c, python, java bool var a, b float64 = 1.4, 2.999  func main() { \tvar i int \tfmt.Println(i, c, python, java)   fmt.Println(a, b) } <pre>0 false false false\n1.4 2.999\n</pre> <p>Les variables d\u00e9clar\u00e9es sans valeur initiale explicite re\u00e7oivent leur valeur z\u00e9ro.</p> <ul> <li>0 pour les types num\u00e9riques,</li> <li>false pour le type bool\u00e9en, et</li> <li>\"\" (la cha\u00eene vide) pour les cha\u00eenes de caract\u00e8res.</li> </ul> In\u00a0[6]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar i int\n\tvar f float64\n\tvar b bool\n\tvar s string\n\tfmt.Printf(\"%v %v %v %q\\n\", i, f, b, s)\n}\n</pre> package main  import \"fmt\"  func main() { \tvar i int \tvar f float64 \tvar b bool \tvar s string \tfmt.Printf(\"%v %v %v %q\\n\", i, f, b, s) } <pre>0 0 false \"\"\n</pre> <p>Les constantes sont d\u00e9clar\u00e9es avec le mot-cl\u00e9 <code>const</code>. Leur valeur doit \u00eatre connue \u00e0 la compilation et ne peut pas changer. Je recommande d'utiliser des constantes par d\u00e9faut et autant que possible pour \u00e9viter les erreurs.</p> In\u00a0[7]: Copied! <pre>package main\n\nimport \"fmt\"\n\nconst Pi = 3.14\n\nfunc main() {\n\tconst World = \"\u4e16\u754c\"\n\tfmt.Println(\"Hello\", World)\n\tfmt.Println(\"Happy\", Pi, \"Day\")\n\n\tconst Truth = true\n\tfmt.Println(\"Go rules?\", Truth)\n}\n</pre> package main  import \"fmt\"  const Pi = 3.14  func main() { \tconst World = \"\u4e16\u754c\" \tfmt.Println(\"Hello\", World) \tfmt.Println(\"Happy\", Pi, \"Day\")  \tconst Truth = true \tfmt.Println(\"Go rules?\", Truth) } <pre>Hello \u4e16\u754c\nHappy 3.14 Day\nGo rules? true\n</pre> <p>Les constantes en Go supportent les grands entiers.</p> In\u00a0[8]: Copied! <pre>package main\n\nimport \"fmt\"\n\nconst (\n\t// Create a huge number by shifting a 1 bit left 100 places.\n\t// In other words, the binary number that is 1 followed by 100 zeroes.\n\tBig = 1 &lt;&lt; 100 \n\t// Shift it right again 99 places, so we end up with 1&lt;&lt;1, or 2.\n\tSmall = Big &gt;&gt; 99\n)\n\nfunc needInt(x int) int { return x*10 + 1 }\nfunc needFloat(x float64) float64 {\n\treturn x * 0.1\n}\n\nfunc main() {\n\tfmt.Println(needInt(Small))\n\tfmt.Println(needFloat(Small))\n\tfmt.Println(needFloat(Big))\n\t// fmt.Println(needInt(Big)) // erreur car bigInt ne peut pas rentrer dans un int\n}\n</pre> package main  import \"fmt\"  const ( \t// Create a huge number by shifting a 1 bit left 100 places. \t// In other words, the binary number that is 1 followed by 100 zeroes. \tBig = 1 &lt;&lt; 100  \t// Shift it right again 99 places, so we end up with 1&lt;&lt;1, or 2. \tSmall = Big &gt;&gt; 99 )  func needInt(x int) int { return x*10 + 1 } func needFloat(x float64) float64 { \treturn x * 0.1 }  func main() { \tfmt.Println(needInt(Small)) \tfmt.Println(needFloat(Small)) \tfmt.Println(needFloat(Big)) \t// fmt.Println(needInt(Big)) // erreur car bigInt ne peut pas rentrer dans un int }  <pre>21\n0.2\n1.2676506002282295e+29\n</pre> <p>Le type des variables, des arguments et des valeurs de retour est d\u00e9clar\u00e9 apr\u00e8s le nom de la variable et du nom de la fonction. Si les types sont les m\u00eames, on peut les regrouper.</p> In\u00a0[9]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc add(x int, y int) int {\n\treturn x + y\n}\n\nfunc multiply(x, y int) int {\n\treturn x * y\n}\n\nfunc main() {\n\tfmt.Println(add(42, 13))\n  fmt.Println(multiply(42, 13))\n}\n</pre> package main  import \"fmt\"  func add(x int, y int) int { \treturn x + y }  func multiply(x, y int) int { \treturn x * y }  func main() { \tfmt.Println(add(42, 13))   fmt.Println(multiply(42, 13)) } <pre>55\n546\n</pre> <p>Les fonctions peuvent retourner plusieurs valeurs.</p> In\u00a0[10]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc swap(x, y string) (string, string) {\n\treturn y, x\n}\n\nfunc main() {\n\ta, b := swap(\"hello\", \"world\")\n\tfmt.Println(a, b)\n}\n</pre> package main  import \"fmt\"  func swap(x, y string) (string, string) { \treturn y, x }  func main() { \ta, b := swap(\"hello\", \"world\") \tfmt.Println(a, b) } <pre>world hello\n</pre> <p>On peut nommer les valeurs de retour d'une fonction. Cela permet de documenter le code et de retourner les valeurs en utilisant simplement l'instruction <code>return</code> sans sp\u00e9cifier les variables \u00e0 retourner.</p> In\u00a0[11]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc split(sum int) (x, y int) {\n\tx = sum * 4 / 9\n\ty = sum - x\n\treturn\n}\n\nfunc main() {\n\tfmt.Println(split(17))\n}\n</pre> package main  import \"fmt\"  func split(sum int) (x, y int) { \tx = sum * 4 / 9 \ty = sum - x \treturn }  func main() { \tfmt.Println(split(17)) } <pre>7 10\n</pre> In\u00a0[12]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc compute(fn func(float64, float64) float64) float64 {\n\treturn fn(3, 4)\n}\n\nfunc main() {\n\thypot := func(x, y float64) float64 {\n\t\treturn math.Sqrt(x*x + y*y)\n\t}\n\tfmt.Println(hypot(5, 12))\n\n\tfmt.Println(compute(hypot))\n\tfmt.Println(compute(math.Pow))\n}\n</pre> package main  import ( \t\"fmt\" \t\"math\" )  func compute(fn func(float64, float64) float64) float64 { \treturn fn(3, 4) }  func main() { \thypot := func(x, y float64) float64 { \t\treturn math.Sqrt(x*x + y*y) \t} \tfmt.Println(hypot(5, 12))  \tfmt.Println(compute(hypot)) \tfmt.Println(compute(math.Pow)) } <pre>13\n5\n81\n</pre> In\u00a0[13]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math/cmplx\"\n)\n\nvar (\n\tToBe   bool       = false\n\tMaxInt uint64     = 1&lt;&lt;64 - 1\n\tz      complex128 = cmplx.Sqrt(-5 + 12i)\n)\n\nfunc main() {\n\tfmt.Printf(\"Type: %T Value: %v\\n\", ToBe, ToBe)\n\tfmt.Printf(\"Type: %T Value: %v\\n\", MaxInt, MaxInt)\n\tfmt.Printf(\"Type: %T Value: %v\\n\", z, z)\n}\n</pre> package main  import ( \t\"fmt\" \t\"math/cmplx\" )  var ( \tToBe   bool       = false \tMaxInt uint64     = 1&lt;&lt;64 - 1 \tz      complex128 = cmplx.Sqrt(-5 + 12i) )  func main() { \tfmt.Printf(\"Type: %T Value: %v\\n\", ToBe, ToBe) \tfmt.Printf(\"Type: %T Value: %v\\n\", MaxInt, MaxInt) \tfmt.Printf(\"Type: %T Value: %v\\n\", z, z) } <pre>Type: bool Value: false\nType: uint64 Value: 18446744073709551615\nType: complex128 Value: (2+3i)\n</pre> In\u00a0[14]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tvar x, y int = 3, 4\n\tvar f float64 = math.Sqrt(float64(x*x + y*y))\n\tvar z uint = uint(f)\n\tfmt.Println(x, y, z)\n}\n</pre> package main  import ( \t\"fmt\" \t\"math\" )  func main() { \tvar x, y int = 3, 4 \tvar f float64 = math.Sqrt(float64(x*x + y*y)) \tvar z uint = uint(f) \tfmt.Println(x, y, z) } <pre>3 4 5\n</pre> In\u00a0[15]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tsum := 0\n\tfor i := 0; i &lt; 10; i++ {\n\t\tsum += i\n\t}\n\tfmt.Println(sum)\n}\n</pre> package main  import \"fmt\"  func main() { \tsum := 0 \tfor i := 0; i &lt; 10; i++ { \t\tsum += i \t} \tfmt.Println(sum) } <pre>45\n</pre> <p>Boucle sans variable d'it\u00e9ration o\u00f9 les instructions d'initialisation et post sont absentes.</p> In\u00a0[16]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tsum := 1\n\tfor sum &lt; 1000 {\n\t\tsum += sum\n\t}\n\tfmt.Println(sum)\n}\n</pre> package main  import \"fmt\"  func main() { \tsum := 1 \tfor sum &lt; 1000 { \t\tsum += sum \t} \tfmt.Println(sum) } <pre>1024\n</pre> <p><code>if</code> ne n\u00e9cessite pas de parenth\u00e8ses autour de la condition, mais n\u00e9cessite des accolades autour du bloc de code.</p> In\u00a0[17]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc sqrt(x float64) string {\n\tif x &lt; 0 {\n\t\treturn sqrt(-x) + \"i\"\n\t}\n\treturn fmt.Sprint(math.Sqrt(x))\n}\n\nfunc main() {\n\tfmt.Println(sqrt(2), sqrt(-4))\n}\n</pre> package main  import ( \t\"fmt\" \t\"math\" )  func sqrt(x float64) string { \tif x &lt; 0 { \t\treturn sqrt(-x) + \"i\" \t} \treturn fmt.Sprint(math.Sqrt(x)) }  func main() { \tfmt.Println(sqrt(2), sqrt(-4)) } <pre>1.4142135623730951 2i\n</pre> <p><code>if</code> supporte une instruction d'initialisation avant la condition assez utile pour intialiser des variables limit\u00e9es au scope du <code>if</code> et de son <code>else</code>.</p> In\u00a0[18]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc pow(x, n, lim float64) float64 {\n\tif v := math.Pow(x, n); v &lt; lim {\n\t\treturn v\n\t} else {\n\t\tfmt.Printf(\"%g &gt;= %g\\n\", v, lim)\n\t}\n  // v n'est pas dispo ici\n\treturn lim\n}\n\nfunc main() {\n\tfmt.Println(\n\t\tpow(3, 2, 10),\n\t\tpow(3, 3, 20),\n\t)\n}\n</pre> package main  import ( \t\"fmt\" \t\"math\" )  func pow(x, n, lim float64) float64 { \tif v := math.Pow(x, n); v &lt; lim { \t\treturn v \t} else { \t\tfmt.Printf(\"%g &gt;= %g\\n\", v, lim) \t}   // v n'est pas dispo ici \treturn lim }  func main() { \tfmt.Println( \t\tpow(3, 2, 10), \t\tpow(3, 3, 20), \t) }  <pre>27 &gt;= 20\n9 20\n</pre> <p><code>switch</code> est un <code>if</code> raccourci. Les <code>break</code> sont implicites \u00e0 la fin de chaque cas.</p> In\u00a0[19]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n)\n\nfunc main() {\n\tfmt.Print(\"Go runs on \")\n\tswitch os := runtime.GOOS; os {\n\tcase \"darwin\":\n\t\tfmt.Println(\"macOS.\")\n\tcase \"linux\":\n\t\tfmt.Println(\"Linux.\")\n\tdefault:\n\t\t// freebsd, openbsd,\n\t\t// plan9, windows...\n\t\tfmt.Printf(\"%s.\\n\", os)\n\t}\n}\n</pre> package main  import ( \t\"fmt\" \t\"runtime\" )  func main() { \tfmt.Print(\"Go runs on \") \tswitch os := runtime.GOOS; os { \tcase \"darwin\": \t\tfmt.Println(\"macOS.\") \tcase \"linux\": \t\tfmt.Println(\"Linux.\") \tdefault: \t\t// freebsd, openbsd, \t\t// plan9, windows... \t\tfmt.Printf(\"%s.\\n\", os) \t} } <pre>Go runs on macOS.\n</pre> <p>On peut omettre l'expression dans un <code>switch</code> pour faire un <code>switch</code> sur <code>true</code>. Cela permet d'\u00e9crire des conditions plus complexes.</p> In\u00a0[20]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tt := time.Now()\n\tswitch {\n\tcase t.Hour() &lt; 12:\n\t\tfmt.Println(\"Good morning!\")\n\tcase t.Hour() &lt; 17:\n\t\tfmt.Println(\"Good afternoon.\")\n\tdefault:\n\t\tfmt.Println(\"Good evening.\")\n\t}\n}\n</pre> package main  import ( \t\"fmt\" \t\"time\" )  func main() { \tt := time.Now() \tswitch { \tcase t.Hour() &lt; 12: \t\tfmt.Println(\"Good morning!\") \tcase t.Hour() &lt; 17: \t\tfmt.Println(\"Good afternoon.\") \tdefault: \t\tfmt.Println(\"Good evening.\") \t} } <pre>Good afternoon.\n</pre> <p><code>defer</code> permet de diff\u00e9rer l'ex\u00e9cution d'une fonction jusqu'\u00e0 la fin de la fonction englobante. C'est particuli\u00e8rement utile pour fermer des ressources (fichiers, connexions r\u00e9seau, etc.) de mani\u00e8re s\u00fbre et lisible.</p> In\u00a0[21]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tdefer fmt.Println(\"world\")\n\n\tfmt.Println(\"hello\")\n}\n</pre> package main  import \"fmt\"  func main() { \tdefer fmt.Println(\"world\")  \tfmt.Println(\"hello\") } <pre>hello\nworld\n</pre> In\u00a0[22]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\ti, j := 42, 2701\n\n\tp := &amp;i         // point to i\n\tfmt.Println(*p) // read i through the pointer\n\t*p = 21         // set i through the pointer\n\tfmt.Println(i)  // see the new value of i\n\n\tp = &amp;j         // point to j\n\t*p = *p / 37   // divide j through the pointer\n\tfmt.Println(j) // see the new value of j\n}\n</pre> package main  import \"fmt\"  func main() { \ti, j := 42, 2701  \tp := &amp;i         // point to i \tfmt.Println(*p) // read i through the pointer \t*p = 21         // set i through the pointer \tfmt.Println(i)  // see the new value of i  \tp = &amp;j         // point to j \t*p = *p / 37   // divide j through the pointer \tfmt.Println(j) // see the new value of j } <pre>42\n21\n73\n</pre> In\u00a0[23]: Copied! <pre>package main\n\nimport \"fmt\"\n\ntype Vertex struct {\n\tX int\n\tY int\n}\n\nfunc main() {\n\tv := Vertex{1, 2}\n\tv.X = 4\n\tfmt.Println(v.X)\n}\n</pre> package main  import \"fmt\"  type Vertex struct { \tX int \tY int }  func main() { \tv := Vertex{1, 2} \tv.X = 4 \tfmt.Println(v.X) } <pre>4\n</pre> <p>Si on a un pointeur vers une struct, on peut acc\u00e9der \u00e0 ses champs directement avec le point (<code>.</code>) sans avoir \u00e0 d\u00e9r\u00e9f\u00e9rencer explicitement le pointeur.</p> In\u00a0[24]: Copied! <pre>package main\n\nimport \"fmt\"\n\ntype Vertex struct {\n\tX int\n\tY int\n}\n\nfunc main() {\n\tv := Vertex{1, 2}\n\tp := &amp;v\n\tp.X = 1e9 // au lieu de (*p).X\n\tfmt.Println(v)\n}\n</pre> package main  import \"fmt\"  type Vertex struct { \tX int \tY int }  func main() { \tv := Vertex{1, 2} \tp := &amp;v \tp.X = 1e9 // au lieu de (*p).X \tfmt.Println(v) } <pre>{1000000000 2}\n</pre> <p>Diff\u00e9rentes fa\u00e7ons de cr\u00e9ation d'une struct\u00a0via les litt\u00e9raux de struct\u00a0:</p> In\u00a0[25]: Copied! <pre>package main\n\nimport \"fmt\"\n\ntype Vertex struct {\n\tX, Y int\n}\n\nvar (\n\tv1 = Vertex{1, 2}  // has type Vertex\n\tv2 = Vertex{X: 1}  // Y:0 is implicit\n\tv3 = Vertex{}      // X:0 and Y:0\n\tp  = &amp;Vertex{1, 2} // has type *Vertex\n)\n\nfunc main() {\n\tfmt.Println(v1, p, v2, v3)\n}\n</pre> package main  import \"fmt\"  type Vertex struct { \tX, Y int }  var ( \tv1 = Vertex{1, 2}  // has type Vertex \tv2 = Vertex{X: 1}  // Y:0 is implicit \tv3 = Vertex{}      // X:0 and Y:0 \tp  = &amp;Vertex{1, 2} // has type *Vertex )  func main() { \tfmt.Println(v1, p, v2, v3) } <pre>{1 2} &amp;{1 2} {1 0} {0 0}\n</pre> In\u00a0[26]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar a [2]string\n\ta[0] = \"Hello\"\n\ta[1] = \"World\"\n\tfmt.Println(a[0], a[1])\n\tfmt.Println(a)\n\n\tprimes := [6]int{2, 3, 5, 7, 11, 13}\n\tfmt.Println(primes)\n}\n</pre> package main  import \"fmt\"  func main() { \tvar a [2]string \ta[0] = \"Hello\" \ta[1] = \"World\" \tfmt.Println(a[0], a[1]) \tfmt.Println(a)  \tprimes := [6]int{2, 3, 5, 7, 11, 13} \tfmt.Println(primes) } <pre>Hello World\n[Hello World]\n[2 3 5 7 11 13]\n</pre> <p>Un slice est une r\u00e9f\u00e9rence vers un tableau ou un sous-tableau existant. On peut r\u00e9cup\u00e9rer un slice d'un tableau avec <code>a[low : high]</code> o\u00f9 <code>low</code> est l'indice de d\u00e9but (inclusif) et <code>high</code> l'indice de fin (exclusif). <code>low</code> et <code>high</code> sont optionnels\u00a0: si <code>low</code> est omis, il vaut 0, et si <code>high</code> est omis, il vaut la longueur du tableau. Les slices suivants sont \u00e9quivalents\u00a0:</p> <pre>a[0:10]\na[:10]\na[0:]\na[:] \n</pre> In\u00a0[27]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tprimes := [6]int{2, 3, 5, 7, 11, 13}\n\n\tvar s []int = primes[1:4]\n\tfmt.Println(s)\n}\n</pre> package main  import \"fmt\"  func main() { \tprimes := [6]int{2, 3, 5, 7, 11, 13}  \tvar s []int = primes[1:4] \tfmt.Println(s) } <pre>[3 5 7]\n</pre> In\u00a0[28]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tnames := [4]string{\n\t\t\"John\",\n\t\t\"Paul\",\n\t\t\"George\",\n\t\t\"Ringo\",\n\t}\n\tfmt.Println(names)\n\n\ta := names[0:2]\n\tb := names[1:3]\n\tfmt.Println(a, b)\n\n\tb[0] = \"XXX\"\n\tfmt.Println(a, b)\n\tfmt.Println(names)\n}\n</pre> package main  import \"fmt\"  func main() { \tnames := [4]string{ \t\t\"John\", \t\t\"Paul\", \t\t\"George\", \t\t\"Ringo\", \t} \tfmt.Println(names)  \ta := names[0:2] \tb := names[1:3] \tfmt.Println(a, b)  \tb[0] = \"XXX\" \tfmt.Println(a, b) \tfmt.Println(names) }  <pre>[John Paul George Ringo]\n[John Paul] [Paul George]\n[John XXX] [XXX George]\n[John XXX George Ringo]\n</pre> <p>On peut cre\u00e9r un slice avec les litt\u00e9raux de slice qui ressemblent aux litt\u00e9aux de tableaux sans le type. Dans ce cas, un tableau sous-jacent est cr\u00e9\u00e9 automatiquement et on n'a pas acc\u00e8s \u00e0 ce tableau directement, mais on peut manipuler le slice comme n'importe quel autre tableau. La syntaxe <code>[]Type{valeurs}</code></p> In\u00a0[29]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tq := []int{2, 3, 5, 7, 11, 13}\n\tfmt.Println(q)\n\n\tr := []bool{true, false, true, true, false, true}\n\tfmt.Println(r)\n\n\ts := []struct {\n\t\ti int\n\t\tb bool\n\t}{\n\t\t{2, true},\n\t\t{3, false},\n\t\t{5, true},\n\t\t{7, true},\n\t\t{11, false},\n\t\t{13, true},\n\t}\n\tfmt.Println(s)\n}\n</pre> package main  import \"fmt\"  func main() { \tq := []int{2, 3, 5, 7, 11, 13} \tfmt.Println(q)  \tr := []bool{true, false, true, true, false, true} \tfmt.Println(r)  \ts := []struct { \t\ti int \t\tb bool \t}{ \t\t{2, true}, \t\t{3, false}, \t\t{5, true}, \t\t{7, true}, \t\t{11, false}, \t\t{13, true}, \t} \tfmt.Println(s) } <pre>[2 3 5 7 11 13]\n[true false true true false true]\n[{2 true} {3 false} {5 true} {7 true} {11 false} {13 true}]\n</pre> <ul> <li>La longueur d'un slice est le nombre d'\u00e9l\u00e9ments qu'il contient et se r\u00e9cup\u00e8re avec la fonction int\u00e9gr\u00e9e <code>len</code>.</li> <li>La capacit\u00e9 d'un slice est la taille du tableau sous-jacent \u00e0 partir de l'indice de d\u00e9but du slice et se r\u00e9cup\u00e8re avec la fonction int\u00e9gr\u00e9e <code>cap</code>.</li> </ul> In\u00a0[30]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\ts := []int{2, 3, 5, 7, 11, 13}\n\tprintSlice(s)\n\n\t// Slice the slice to give it zero length.\n\ts = s[:0]\n\tprintSlice(s)\n\n\t// Extend its length.\n\ts = s[:4]\n\tprintSlice(s)\n\n\t// Drop its first two values.\n\ts = s[2:]\n\tprintSlice(s)\n}\n\nfunc printSlice(s []int) {\n\tfmt.Printf(\"len=%d cap=%d %v\\n\", len(s), cap(s), s)\n}\n</pre> package main  import \"fmt\"  func main() { \ts := []int{2, 3, 5, 7, 11, 13} \tprintSlice(s)  \t// Slice the slice to give it zero length. \ts = s[:0] \tprintSlice(s)  \t// Extend its length. \ts = s[:4] \tprintSlice(s)  \t// Drop its first two values. \ts = s[2:] \tprintSlice(s) }  func printSlice(s []int) { \tfmt.Printf(\"len=%d cap=%d %v\\n\", len(s), cap(s), s) }  <pre>len=6 cap=6 [2 3 5 7 11 13]\nlen=0 cap=6 []\nlen=4 cap=6 [2 3 5 7]\nlen=2 cap=4 [5 7]\n</pre> <p>La valeur z\u00e9ro d'un slice est <code>nil</code>. Un slice <code>nil</code> n'a ni tableau sous-jacent, ni longueur, ni capacit\u00e9.</p> In\u00a0[31]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar s []int\n\tfmt.Println(s, len(s), cap(s))\n\tif s == nil {\n\t\tfmt.Println(\"nil!\")\n\t}\n}\n</pre> package main  import \"fmt\"  func main() { \tvar s []int \tfmt.Println(s, len(s), cap(s)) \tif s == nil { \t\tfmt.Println(\"nil!\") \t} }  <pre>[] 0 0\nnil!\n</pre> <p><code>make</code> permet de cr\u00e9er des slices, des maps et des channels. Pour les slices, on peut sp\u00e9cifier la longueur et la capacit\u00e9 initiales.</p> <pre>a := make([]int, 5)  // len(a)=5\nb := make([]int, 1, 5) // len(b)=1, cap(b)=5\n</pre> In\u00a0[32]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\ta := make([]int, 5)\n\tprintSlice(\"a\", a)\n\n\tb := make([]int, 0, 5)\n\tprintSlice(\"b\", b)\n\n\tc := b[:2]\n\tprintSlice(\"c\", c)\n\n\td := c[2:5]\n\tprintSlice(\"d\", d)\n}\n\nfunc printSlice(s string, x []int) {\n\tfmt.Printf(\"%s len=%d cap=%d %v\\n\",\n\t\ts, len(x), cap(x), x)\n}\n</pre> package main  import \"fmt\"  func main() { \ta := make([]int, 5) \tprintSlice(\"a\", a)  \tb := make([]int, 0, 5) \tprintSlice(\"b\", b)  \tc := b[:2] \tprintSlice(\"c\", c)  \td := c[2:5] \tprintSlice(\"d\", d) }  func printSlice(s string, x []int) { \tfmt.Printf(\"%s len=%d cap=%d %v\\n\", \t\ts, len(x), cap(x), x) }  <pre>a len=5 cap=5 [0 0 0 0 0]\nb len=0 cap=5 []\nc len=2 cap=5 [0 0]\nd len=3 cap=3 [0 0 0]\n</pre> <p>On peut utiliser l'op\u00e9rateur <code>append</code> pour ajouter des \u00e9l\u00e9ments \u00e0 un slice. Si la capacit\u00e9 du slice est d\u00e9pass\u00e9e, un nouveau tableau sous-jacent est allou\u00e9 automatiquement.</p> In\u00a0[33]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar s []int\n\tprintSlice(s)\n\n\t// append works on nil slices.\n\ts = append(s, 0)\n\tprintSlice(s)\n\n\t// The slice grows as needed.\n\ts = append(s, 1)\n\tprintSlice(s)\n\n\t// We can add more than one element at a time.\n\ts = append(s, 2, 3, 4)\n\tprintSlice(s)\n}\n\nfunc printSlice(s []int) {\n\tfmt.Printf(\"len=%d cap=%d %v\\n\", len(s), cap(s), s)\n}\n</pre> package main  import \"fmt\"  func main() { \tvar s []int \tprintSlice(s)  \t// append works on nil slices. \ts = append(s, 0) \tprintSlice(s)  \t// The slice grows as needed. \ts = append(s, 1) \tprintSlice(s)  \t// We can add more than one element at a time. \ts = append(s, 2, 3, 4) \tprintSlice(s) }  func printSlice(s []int) { \tfmt.Printf(\"len=%d cap=%d %v\\n\", len(s), cap(s), s) }  <pre>len=0 cap=0 []\nlen=1 cap=1 [0]\nlen=2 cap=2 [0 1]\nlen=5 cap=6 [0 1 2 3 4]\n</pre> <p>Exemples de slice multidimensionnel (un slice sont les \u00e9l\u00e9ments sont des slices eux-m\u00eames)\u00a0:</p> In\u00a0[34]: Copied! <pre>package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// Create a tic-tac-toe board.\n\tboard := [][]string{\n\t\t[]string{\"_\", \"_\", \"_\"},\n\t\t[]string{\"_\", \"_\", \"_\"},\n\t\t[]string{\"_\", \"_\", \"_\"},\n\t}\n\n\t// The players take turns.\n\tboard[0][0] = \"X\"\n\tboard[2][2] = \"O\"\n\tboard[1][2] = \"X\"\n\tboard[1][0] = \"O\"\n\tboard[0][2] = \"X\"\n\n\tfor i := 0; i &lt; len(board); i++ {\n\t\tfmt.Printf(\"%s\\n\", strings.Join(board[i], \" \"))\n\t}\n}\n</pre> package main  import ( \t\"fmt\" \t\"strings\" )  func main() { \t// Create a tic-tac-toe board. \tboard := [][]string{ \t\t[]string{\"_\", \"_\", \"_\"}, \t\t[]string{\"_\", \"_\", \"_\"}, \t\t[]string{\"_\", \"_\", \"_\"}, \t}  \t// The players take turns. \tboard[0][0] = \"X\" \tboard[2][2] = \"O\" \tboard[1][2] = \"X\" \tboard[1][0] = \"O\" \tboard[0][2] = \"X\"  \tfor i := 0; i &lt; len(board); i++ { \t\tfmt.Printf(\"%s\\n\", strings.Join(board[i], \" \")) \t} }  <pre>X _ X\nO _ X\n_ _ O\n</pre> In\u00a0[35]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n  var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\n  \n\tfor i, v := range pow {\n\t\tfmt.Printf(\"2**%d = %d\\n\", i, v)\n\t}\n\n\tfor i := range pow {\n\t\tpow[i] = 1 &lt;&lt; uint(i) // == 2**i\n\t}\n\tfor _, value := range pow {\n\t\tfmt.Printf(\"%d\\n\", value)\n\t}\n}\n</pre> package main  import \"fmt\"  func main() {   var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}    \tfor i, v := range pow { \t\tfmt.Printf(\"2**%d = %d\\n\", i, v) \t}  \tfor i := range pow { \t\tpow[i] = 1 &lt;&lt; uint(i) // == 2**i \t} \tfor _, value := range pow { \t\tfmt.Printf(\"%d\\n\", value) \t} } <pre>2**0 = 1\n2**1 = 2\n2**2 = 4\n2**3 = 8\n2**4 = 16\n2**5 = 32\n2**6 = 64\n2**7 = 128\n1\n2\n4\n8\n16\n32\n64\n128\n</pre> In\u00a0[36]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n  type Vertex struct {\n    Lat, Long float64\n  }\n\n  var m map[string]Vertex\n\n\tm = make(map[string]Vertex)\n\tm[\"Bell Labs\"] = Vertex{\n\t\t40.68433, -74.39967,\n\t}\n\tfmt.Println(m[\"Bell Labs\"])\n\n  var m2 = map[string]Vertex{\n    \"Bell Labs\": Vertex{\n      40.68433, -74.39967,\n    },\n    \"Google\": Vertex{\n      37.42202, -122.08408,\n    },\n  }\n\n  // Forme la plus simple\n  var m = map[string]Vertex{\n    \"Bell Labs\": {40.68433, -74.39967},\n    \"Google\":    {37.42202, -122.08408},\n  }\n  fmt.Println(m2)\n}\n</pre> package main  import \"fmt\"  func main() {   type Vertex struct {     Lat, Long float64   }    var m map[string]Vertex  \tm = make(map[string]Vertex) \tm[\"Bell Labs\"] = Vertex{ \t\t40.68433, -74.39967, \t} \tfmt.Println(m[\"Bell Labs\"])    var m2 = map[string]Vertex{     \"Bell Labs\": Vertex{       40.68433, -74.39967,     },     \"Google\": Vertex{       37.42202, -122.08408,     },   }    // Forme la plus simple   var m = map[string]Vertex{     \"Bell Labs\": {40.68433, -74.39967},     \"Google\":    {37.42202, -122.08408},   }   fmt.Println(m2) }   # gonb_9f099a67 Cell[36]: Line 28 ./main.go:108:7:  m redeclared in this block    }    // Forme la plus simple   var m = map[string]Vertex{     \"Bell Labs\": {40.68433, -74.39967},     \"Google\":    {37.42202, -122.08408},   Cell[36]: Line 10 \t./main.go:90:7:  other declaration of m      Lat, Long float64   }    var m map[string]Vertex  \tm = make(map[string]Vertex)   <pre>failed to run \"/opt/homebrew/bin/go build -o /var/folders/sj/67508vy94d1346kyt0w_kcjw0000gn/T/gonb_9f099a67/gonb_9f099a67\": exit status 1</pre> <p>Manipulation d'une map\u00a0:</p> In\u00a0[\u00a0]: Copied! <pre>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tm := make(map[string]int)\n\n\tm[\"Answer\"] = 42\n\tfmt.Println(\"The value:\", m[\"Answer\"])\n\n\tm[\"Answer\"] = 48\n\tfmt.Println(\"The value:\", m[\"Answer\"])\n\n\tdelete(m, \"Answer\")\n\tfmt.Println(\"The value:\", m[\"Answer\"])\n\n\tv, ok := m[\"Answer\"]\n\tfmt.Println(\"The value:\", v, \"Present?\", ok)\n}\n</pre> package main  import \"fmt\"  func main() { \tm := make(map[string]int)  \tm[\"Answer\"] = 42 \tfmt.Println(\"The value:\", m[\"Answer\"])  \tm[\"Answer\"] = 48 \tfmt.Println(\"The value:\", m[\"Answer\"])  \tdelete(m, \"Answer\") \tfmt.Println(\"The value:\", m[\"Answer\"])  \tv, ok := m[\"Answer\"] \tfmt.Println(\"The value:\", v, \"Present?\", ok) } <pre>The value: 42\nThe value: 48\nThe value: 0\nThe value: 0 Present? false\n</pre>"},{"location":"go/tour/#tour-de-go","title":"Tour de Go\u00b6","text":"<p>Bas\u00e9 sur le tour officiel de Go.</p>"},{"location":"go/tour/#variables","title":"Variables\u00b6","text":""},{"location":"go/tour/#fonctions","title":"Fonctions\u00b6","text":""},{"location":"go/tour/#fonctions-comme-des-citoyens-de-premiere-classe","title":"Fonctions comme des citoyens de premi\u00e8re classe\u00b6","text":"<p>On peut les assigner \u00e0 des variables, les passer en arguments \u00e0 d'autres fonctions et les retourner depuis des fonctions. On dit que les fonctions sont aussi des valeurs.</p>"},{"location":"go/tour/#les-types-de-base","title":"Les types de base\u00b6","text":"<pre><code>txt\nbool\n\nstring\n\nint  int8  int16  int32  int64\nuint uint8 uint16 uint32 uint64 uintptr\n\nbyte // alias for uint8\n\nrune // alias for int32\n     // represents a Unicode code point\n\nfloat32 float64\n\ncomplex64 complex128\n</code></pre>"},{"location":"go/tour/#typage-fort","title":"Typage fort\u00b6","text":"<p>Go est un langage \u00e0 typage fort. Les conversions de types doivent \u00eatre explicites (contrairement au C et au JavaScript).</p>"},{"location":"go/tour/#structures-de-controle","title":"Structures de contr\u00f4le\u00b6","text":"<p>Boucles avec une variable qui s'incr\u00e9mente \u00e0 chaque it\u00e9ration. Dans cette forme, <code>i := 0;</code> s'appelle une instruction d'initialisation, <code>i &lt; 10;</code> est la condition de boucle, et <code>i++</code> est l'instruction post qui s'ex\u00e9cute \u00e0 la fin de chaque it\u00e9ration. Les instructions d'initialisation et post sont optionnelles.</p>"},{"location":"go/tour/#pointeurs","title":"Pointeurs\u00b6","text":"<p>Un pointeur est une variable qui stocke l'adresse m\u00e9moire d'une autre variable. Les pointeurs sont utiles pour partager des donn\u00e9es entre diff\u00e9rentes parties du code sans faire de copies.</p> <p>Pour une variable <code>x</code> de type <code>T</code>\u00a0:</p> <ul> <li><code>&amp;x</code> est un pointeur vers <code>x</code>, de type <code>*T</code></li> <li><code>*p</code> est la valeur point\u00e9e par le pointeur <code>p</code>, de type <code>T</code>. On appelle cela la d\u00e9r\u00e9f\u00e9renciation ou l'indirection.</li> </ul> <p>Go ne propose pas d'arithm\u00e9tique de pointeurs comme en C.</p>"},{"location":"go/tour/#struct","title":"struct\u00b6","text":"<p>Collection de champs. Peuvent \u00eatre comparar\u00e9s aux structs en C ou aux classes en Python/Java (sans les m\u00e9thodes).</p>"},{"location":"go/tour/#tableaux-et-slices","title":"Tableaux et slices\u00b6","text":"<p>Les tableaux ont une taille fixe en Go. Le type s'\u00e9crit <code>[n]T</code> o\u00f9 <code>n</code> est la taille et <code>T</code> le type des \u00e9l\u00e9ments.</p>"},{"location":"go/tour/#range","title":"Range\u00b6","text":"<p>Permet d'it\u00e9rer sur les \u00e9l\u00e9ments d'un tableau, d'un slice, d'une map ou d'une cha\u00eene de caract\u00e8res. Chaque it\u00e9ration retourne deux valeurs\u00a0: l'index (ou la cl\u00e9 pour les maps) et la valeur de l'\u00e9l\u00e9ment courant. On peut ignorer l'une des deux valeurs en utilisant le caract\u00e8re <code>_</code>.</p>"},{"location":"go/tour/#maps-dictionnaires","title":"Maps (dictionnaires)\u00b6","text":"<p>Les maps sont des collections de paires cl\u00e9-valeur. Les litt\u00e9raux de map permettent de cr\u00e9er et d'initialiser une map en une seule instruction sans avoir \u00e0 pr\u00e9ciser son type.</p>"},{"location":"go/tour/#rappels-sur-quelques-concepts","title":"Rappels sur quelques concepts\u00b6","text":"<ul> <li>Typage statique: le type des variables est connu \u00e0 la compilation et ne change pas.</li> <li>Typage fort: les conversions de types doivent \u00eatre explicites.</li> <li>Type explicite: le type des variables est d\u00e9clar\u00e9 explicitement.</li> <li>Type inf\u00e9r\u00e9: le type des variables est d\u00e9duit par le compilateur \u00e0 partir de la valeur initiale.</li> </ul>"},{"location":"iot/","title":"IoT: Internet of Things","text":""},{"location":"iot/#iot-internet-of-things","title":"IoT: Internet of Things","text":"<p>IoT est l'acronyme de l'expression anglaise \"Internet of Things\" qui signifie \"Internet des objets\". Il s'agit d'un concept qui d\u00e9signe l'interconnexion des objets du quotidien \u00e0 internet. Ces objets peuvent \u00eatre des appareils \u00e9lectrom\u00e9nagers, des v\u00e9hicules, des b\u00e2timents, des objets portables, etc. L'objectif de l'IoT est de permettre \u00e0 ces objets de communiquer entre eux et avec des serveurs distants pour collecter, analyser et \u00e9changer des donn\u00e9es.</p>"},{"location":"iot/#principes-de-liot","title":"Principes de l'IoT","text":"<p>L'IoT repose sur plusieurs principes fondamentaux. En voici quelques uns :</p> <ul> <li>Interconnexion : Les objets doivent \u00eatre capables de communiquer entre eux et avec des serveurs distants.</li> <li>Collecte et analyse de donn\u00e9es : Les objets doivent \u00eatre capables de collecter des donn\u00e9es sur leur environnement.     Les donn\u00e9es collect\u00e9es doivent \u00eatre analys\u00e9es pour en extraire des informations utiles.</li> <li>Automatisation : Les objets doivent \u00eatre capables de prendre des d\u00e9cisions et d'agir de mani\u00e8re autonome.</li> <li>S\u00e9curit\u00e9 : Les donn\u00e9es \u00e9chang\u00e9es entre les objets doivent \u00eatre s\u00e9curis\u00e9es pour \u00e9viter tout risque de piratage.</li> <li>Int\u00e9gration : Les objets doivent \u00eatre compatibles avec les standards de communication et d'interop\u00e9rabilit\u00e9.</li> </ul>"},{"location":"iot/#applications-de-liot","title":"Applications de l'IoT","text":"<p>L'IoT trouve de nombreuses applications dans diff\u00e9rents domaines.</p> <ul> <li>Domotique : Contr\u00f4le \u00e0 distance des appareils \u00e9lectrom\u00e9nagers, chauffage, \u00e9clairage, etc.</li> <li>Sant\u00e9 : Suivi \u00e0 distance de patients, monitoring de param\u00e8tres physiologiques, etc.</li> <li>Agriculture : Surveillance des cultures, gestion de l'irrigation, etc.</li> <li>Industrie : Maintenance pr\u00e9dictive, suivi des \u00e9quipements, etc.</li> <li>Ville intelligente : Gestion des d\u00e9chets, \u00e9clairage public, Suivi des v\u00e9hicules, gestion du trafic, etc.</li> </ul>"},{"location":"iot/#technologies-de-liot","title":"Technologies de l'IoT","text":"<p>L'IoT repose sur plusieurs technologies cl\u00e9s. En voici quelques unes :</p> <ul> <li>Capteurs : Permettent de collecter des donn\u00e9es sur l'environnement.</li> <li>Cloud computing : Permet de stocker, traiter et analyser les donn\u00e9es collect\u00e9es.</li> <li>Intelligence artificielle : Permet d'analyser les donn\u00e9es et de prendre des d\u00e9cisions de mani\u00e8re autonome.</li> <li>Protocole r\u00e9seau : Permet aux objets de se connecter \u00e0 internet de communiquer entre eux.     On peut trouver du WiFi, du Bluetooth, du Zigbee, du LoRa, Ethernet, etc.</li> <li>Protocole de communication : Permet aux objets de communiquer entre eux et avec des serveurs distants.     On trouve diff\u00e9rents protocoles de communication comme MQTT, CoAP, HTTP, etc.</li> </ul>"},{"location":"iot/#schema-classique-dun-systeme-iot","title":"Sch\u00e9ma classique d'un syst\u00e8me IoT","text":"<p>Un syst\u00e8me IoT est g\u00e9n\u00e9ralement compos\u00e9 des \u00e9l\u00e9ments suivants :</p> <ul> <li>Capteurs : Permettent de collecter des donn\u00e9es sur l'environnement.</li> <li>Actionneurs : Permettent d'agir sur l'environnement en fonction des d\u00e9cisions prises.</li> <li>Passerelle : Permet de collecter les donn\u00e9es des cap.     Certains capteurs sont autonomes et peuvent communiquer directement avec un serveur.</li> <li>Broker de message : Permet d'\u00e9changer efficacement les diff\u00e9rents \u00e9l\u00e9ments du syst\u00e8me.     Broker signifie courtier en fran\u00e7ais.     Exemple de technologies de broker: MQTT, CoAP, etc.</li> <li>Serveur(s) : Permet de stocker, traiter et analyser les donn\u00e9es collect\u00e9es.</li> <li>Application(s) : Permet de visualiser les donn\u00e9es et de prendre des d\u00e9cisions.</li> </ul> <p>Plusieurs architectures sont possibles en fonction des besoins et des contraintes du syst\u00e8me. Voici deux exemples ci-dessous.</p>"},{"location":"iot/#schema-typique-avec-passerelle-et-sans-serveur","title":"Sch\u00e9ma typique avec passerelle et sans serveur","text":"<p>Voici un exemple de sch\u00e9ma o\u00f9 les capteurs communiquent avec une passerelle :</p> <pre><code>graph LR\n    Capteurs --&gt;|Mesures : temp\u00e9rature, \u00e9tat allumage, etc.| Passerelle\n    Passerelle --&gt;|Mesures| Application\n    Application --&gt;|Commandes: allumer, r\u00e9gler l'intensit\u00e9, etc.| Passerelle\n    Passerelle --&gt;|Commandes| Capteurs</code></pre> <p>Voici un sch\u00e9ma qui montre les technologies utilis\u00e9es</p> <pre><code>graph LR\n    Capteurs &lt;--&gt;|ZigBee, LoRa, etc.| Passerelle\n    Passerelle &lt;--&gt;|R\u00e9seau: LAN, Internet, Mobile, etc.. Protocole: MQTT, WebSocket, etc.| Application</code></pre>"},{"location":"iot/#schema-typique-sans-passerelle-avec-un-broker-de-message","title":"Sch\u00e9ma typique sans passerelle avec un broker de message","text":"<p>Voici un exemple de sch\u00e9ma o\u00f9 les capteurs communiquent directement avec un serveur MQTT :</p> <pre><code>graph LR\n    A[Capteurs autonomes] --&gt;|Mesures : temp\u00e9rature, \u00e9tat allumage, etc.| Broker\n    Broker --&gt;|Mesures| Application\n    Application --&gt;|Commandes: allumer, r\u00e9gler l'intensit\u00e9, etc.| Broker\n    Broker --&gt;|Commandes| A</code></pre> <p>Voici un sch\u00e9ma qui montre les technologies utilis\u00e9es</p> <pre><code>graph LR\n    A[Capteurs autonomes] &lt;--&gt;|R\u00e9seau LAN ou Internet. Protocole: MQTT ou autre| Broker\n    Broker &lt;--&gt;|R\u00e9seau LAN ou Internet. Protocole: MQTT ou autre| Application</code></pre> <p>On peut aussi ajouter un serveur qui collecte les donn\u00e9es et les stocke pour les analyser plus tard.</p> <pre><code>graph LR\n    A[Capteurs autonomes] --&gt;|Mesures : temp\u00e9rature, \u00e9tat allumage, etc.| Broker\n    Broker --&gt;|Mesures| Serveur\n    Broker --&gt;|Mesures| Application\n    Serveur --&gt;|Graphes et statistiques| Application\n    Application --&gt;|Commandes: allumer, r\u00e9gler l'intensit\u00e9, etc.| Broker\n    Broker --&gt;|Commandes| A</code></pre>"},{"location":"iot/deviot/","title":"Initiation au d\u00e9veloppement IoT","text":""},{"location":"iot/deviot/#initiation-au-developpement-iot","title":"Initiation au d\u00e9veloppement IoT","text":"<p>Voici les \u00e9l\u00e9ments que l'on va utiliser :</p> <ul> <li>Capteurs et actionneurs : on va utiliser une carte de d\u00e9veloppement munie de WiFi comme le ESP32-DevKitC V4.     Celle-ci sera reli\u00e9e \u00e0 de capteurs et d'actionneurs.</li> <li>Passerelle : on va utiliser un serveur MQTT pour \u00e9changer des messages entre les capteurs et l'application.</li> <li>Application : on va d\u00e9velopper une application web pour visualiser les donn\u00e9es et envoyer des commandes.</li> </ul>"},{"location":"iot/deviot/#brokers-mqtt","title":"Brokers MQTT","text":"<p>MQTT suit le mod\u00e8le de publication/abonnement (pub/sub) o\u00f9 les clients s'abonnent \u00e0 des topics pour recevoir des messages et publient des messages sur des topics. Les clients peuvent \u00eatres des capteurs, des actionneurs ou des applications.</p> <pre><code>graph LR\n    A[Client 1] --&gt;|pub topic1| E((Broker))\n    B[Client 2] &lt;--&gt;|sub topic1| E\n    C[Client 3] --&gt;|pub topic2| E\n    D[Client 4] --&gt;|pub topic2| E\n    D[Client 4] &lt;--&gt;|sub topic1| E</code></pre> <p>Quelques brokers MQTT gratuits : shiftr.io/cloud, cloudamqp, hivemq, flespi.</p> <ul> <li>Cr\u00e9er un compte gratuit sur un des brokers MQTT ci-dessus. On prendra hivemq pour cet exemple.</li> <li>D\u00e9ployer une nouvelles instance de broker MQTT.</li> <li>Configurer un nouvel utilisateur et un mot de passe pour se connecter au broker.</li> <li>Tester le broker depuis le client web int\u00e9gr\u00e9 ou depuis mqttx.</li> </ul>"},{"location":"iot/deviot/#developpement-dun-client-mqtt-web","title":"D\u00e9veloppement d'un client MQTT Web","text":""},{"location":"iot/deviot/#utilisation-de-la-librairie-mqtt","title":"Utilisation de la librairie MQTT","text":"<p>Nous allons cr\u00e9er une webapp qui se connecte au broker MQTT et qui peut envoyer un message et en recevoir sur le topic <code>\"test\"</code>.</p> <ul> <li>Cr\u00e9er une application vanilla avec Vite : <code>npm create vite</code></li> <li>Installer la librairie du client MQTT : <code>npm install mqtt</code></li> <li>Ajouter un fichier <code>.env</code> qui contient l'URL de connexion. <code>VITE_MQTT_URL=\"wss://[identifiant]:[mdp]@[url_du_broker]:8884/mqtt\"</code></li> <li> <p>Ajouter le contenu suivant dans le fichier <code>main.js</code> :</p> <pre><code>import mqtt from 'mqtt'\n\nconst client = mqtt.connect(import.meta.env.VITE_MQTT_URL);\n\nclient.on('connect', asyync () =&gt; {\nconsole.log('connected')\nawait client.subscribeAsync(\"test\");\nawait client.publishAsync(\"presence\", \"Client web connect\u00e9\")\n});\n\nclient.on('message', (topic, message) =&gt; {\nconsole.log('received', topic, message)\n});\n</code></pre> </li> <li> <p>Lancer le serveur de d\u00e9veloppement : <code>npm run dev</code></p> </li> <li>Ouvrir la console du navigateur pour voir les messages re\u00e7us. Envoyer des messages depuis le client web int\u00e9gr\u00e9 du broker vers le topic <code>\"test\"</code> pour les recevoir dans l'application (v\u00e9rifier la console du navigateur).</li> </ul>"},{"location":"iot/deviot/#utilisation-de-la-librairie-chartjs","title":"Utilisation de la librairie chart.js","text":"<p>Cette librairie permet d'afficher des graphiques en temps r\u00e9el. C'est tr\u00e8s utile pour visualiser les donn\u00e9es des capteurs.</p> <ul> <li>Installer la librairie : <code>npm install chart.js</code></li> <li> <p>Ajouter un canvas dans le fichier <code>index.html</code> :</p> <pre><code>&lt;canvas id=\"myChart\" width=\"400\" height=\"400\"&gt;&lt;/canvas&gt;\n</code></pre> </li> <li> <p>Dans <code>main.js</code>, initialiser un graph de type line chart</p> </li> <li>S'abonner au topic <code>\"temperature\"</code>. On suppose que les messages re\u00e7us sont des nombres repr\u00e9sentant la temp\u00e9rature. Les messages sont re\u00e7us au format texte brut (pas de JSON) comme <code>\"25.5\"</code>.</li> <li>A chaque r\u00e9ception d'un message dans le topic <code>\"temperature\"</code>, ajouter une nouvelle donn\u00e9e au graphique comme indiqu\u00e9 dans la documentation officielle.</li> </ul>"},{"location":"iot/deviot/#programmation-embarquee","title":"Programmation embarqu\u00e9e","text":"<p>On va utiliser une carte de d\u00e9veloppement ESP32 pour ce tutoriel. Celle-ci est \u00e9quip\u00e9e de WiFi, de Bluetooth et de nombreux GPIO pour connecter des capteurs et des actionneurs. Plus pr\u00e9cis\u00e9ment, on va utiliser un simulateur de cette carte propos\u00e9 par wokwi.com.</p> <p></p> <ul> <li>Ouvrir la page wokwi.com/micropython et explorer quelques exemples de projets pour comprendre comment \u00e7a marche.</li> <li>Si on souhaite d\u00e9marrer un nouveau projet, des mod\u00e8les sont disponibles ici</li> <li>umqtt.simple est la librairie MQTT pour MicroPython.</li> </ul>"},{"location":"iot/deviot/#quelques-projets","title":"Quelques projets","text":"<ul> <li>ESP32 + LED</li> <li>ESP32 + DHT22</li> <li>LED + Bouton</li> <li>Ecran SSD 1306</li> <li>Contr\u00f4le d'une LED avec MQTT</li> </ul> Connexion \u00e0 un serveur MQTT en SSL/TLS <pre><code>import network\nimport time\nfrom machine import Pin\nimport dht\nimport ujson\nfrom umqtt.simple import MQTTClient\nimport ssl as ssl_lib\n\n# constants.py defines MQTT_CLIENT_ID, MQTT_BROKER, MQTT_USER, MQTT_PASSWORD\nfrom constants import *\n\nsensor = dht.DHT22(Pin(15))\n\nprint(\"Connecting to WiFi\", end=\"\")\nsta_if = network.WLAN(network.STA_IF)\nsta_if.active(True)\nsta_if.connect(\"Wokwi-GUEST\", \"\")\nwhile not sta_if.isconnected():\n    print(\".\", end=\"\")\n    time.sleep(0.1)\nprint(\" Connected!\")\n\nprint(\"Connecting to MQTT server... \", end=\"\")\nssl_params = {\"server_hostname\": MQTT_BROKER}\nclient = MQTTClient(\n    MQTT_CLIENT_ID, MQTT_BROKER, user=MQTT_USER, password=MQTT_PASSWORD, ssl=ssl_lib\n)\nclient.connect()\n\nprint(\"Connected!\")\n\nprev_weather = \"\"\nwhile True:\n    print(\"Measuring weather conditions... \", end=\"\")\n    sensor.measure()\n    message = ujson.dumps(\n        {\n            \"temp\": sensor.temperature(),\n            \"humidity\": sensor.humidity(),\n        }\n    )\n    if message != prev_weather:\n        print(\"Updated!\")\n        print(\"Reporting to MQTT topic {}: {}\".format(MQTT_TOPIC, message))\n        client.publish(MQTT_TOPIC, message)\n        prev_weather = message\n    else:\n        print(\"No change\")\n    time.sleep(1)\n</code></pre>"},{"location":"iot/deviot/#travailler-avec-une-vraie-carte-esp32","title":"Travailler avec une vraie carte ESP32","text":"<ul> <li>Flasher le firmware MicroPython sur la carte ESP32. Ce firmware fait deux choses : il installe un interpr\u00eateur Python int\u00e9grant la librairie MicroPython et il lance les fichiers <code>boot.py</code> et <code>main.py</code>, dans cet ordre, s'ils existent.<ul> <li>Sous Windows, installer les drivers USB pour la carte ESP32. G\u00e9n\u00e9ralement, il s'agit du CP210x Universal Windows Driver disponible ici ou via ce lien direct.</li> <li>T\u00e9l\u00e9charger le firmware correspondant \u00e0 votre carte. Pour la carte ESP32-VROOM, la page de firmware is ici</li> <li>Installer esptool : <code>pip install esptool</code> ou sur macOS: <code>brew install esptool</code></li> <li>Tester la connexion avec la carte : <code>esptool flash-id</code></li> <li>R\u00e9initialiser la carte : <code>esptool erase-flash</code></li> <li>Flasher le firmware : <code>esptool write-flash 0x1000 fichier_firmware.bin</code></li> </ul> </li> <li>Utiliser un IDE comme mu Editor ou Thonny pour \u00e9crire et ex\u00e9cuter le code MicroPython. Nous allons utiliser Mu pour cet exemple.<ul> <li>Connecter la carte \u00e0 l'ordinateur via un c\u00e2ble USB.</li> <li>Ouvrir le panneau fichier</li> </ul> </li> <li>Installer des librairies et copier des fichiers sur l'ESP32 avec <code>mpremote</code><ul> <li>Installer <code>mpremote</code> : <code>pip install mpremote</code> ou sur macOS: <code>brew install mpremote</code></li> <li>Brancher l'ESP32 \u00e0 l'ordinateur et fermer toute application l'utilisant (comme Mu)</li> <li>Ouvrir un terminal classique (pas le REPL).</li> <li>V\u00e9rifier que le port s\u00e9rie est bien connect\u00e9 : <code>mpremote connect list</code></li> <li>Installer une librairie avec <code>mpremote mip</code> : <code>mpremote mip install ssd1306</code></li> <li>Copier un fichier : <code>mpremote fs cp fichierlocal :destination</code>. Exemple: <code>mpremote fs cp main.py :main.py</code></li> </ul> </li> </ul>"},{"location":"iot/deviot/#autres-competences-a-avoir-pour-faire-de-liot","title":"Autres comp\u00e9tences \u00e0 avoir pour faire de l'IoT","text":"<ul> <li>La soudure</li> <li>Les bases de l'\u00e9lectricit\u00e9 et l'\u00e9lectronique</li> </ul>"},{"location":"iot/deviot/#lexique","title":"Lexique","text":"<ul> <li>GND: (Ground) la terre ou le 0V</li> <li>VCC: (Voltage Common Collector) le +5V ou +3.3V. La tension d'alimentation.</li> <li>GP: (General Purpose) broche \u00e0 usage g\u00e9n\u00e9ral (broche I/O)</li> </ul>"},{"location":"iot/deviot/#sources-et-references","title":"Sources et r\u00e9f\u00e9rences","text":"<ul> <li>Simulateur de carte de d\u00e9veloppement alternatif mais qui ne propose pas de ESP32 tinkercad.com/circuits</li> <li>Getting started with MicroPython on the ESP32</li> </ul>"},{"location":"iot/exo_embedded/","title":"Exercices sur la programmation embarqu\u00e9e","text":""},{"location":"iot/exo_embedded/#exercices-sur-la-programmation-embarquee","title":"Exercices sur la programmation embarqu\u00e9e","text":"<p>Utiliser de pr\u00e9f\u00e9rence un ESP32 comme carte de d\u00e9veloppement.</p>"},{"location":"iot/exo_embedded/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Cr\u00e9er un syst\u00e8me embarqu\u00e9 qui permet de commander l'allumage et l'extinction d'une LED \u00e0 partir d'un bouton poussoir. C'est-\u00e0-dire, quand j'appuie sur le bouton, la LED s'allume et quand j'appuie une deuxi\u00e8me fois, elle s'\u00e9teint. (solution)</li> <li>Cr\u00e9er un syst\u00e8me embarqu\u00e9 qui affiche la temp\u00e9rature d'un capteur de temp\u00e9rature sur un \u00e9cran SSD 1306.</li> <li>Cr\u00e9er un syst\u00e8me embarqu\u00e9 qui affiche la temp\u00e9rature d'un capteur de temp\u00e9rature sur un \u00e9cran SSD 1306. Quand on appuie sur un bouton poussoir, le syst\u00e8me permute entre l'affichage de la temp\u00e9rature et de l'humidit\u00e9. (solution)</li> </ol>"},{"location":"iot/exo_embedded/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Cr\u00e9er un syst\u00e8me embarqu\u00e9 qui permet de commander l'allumage et l'extinction d'une LED \u00e0 partir d'un message MQTT.</li> <li>Cr\u00e9er un syst\u00e8me embarqu\u00e9 qui permet d'envoyer les donn\u00e9es d'un capteur de temp\u00e9rature \u00e0 un serveur MQTT. Une interface web lanc\u00e9e depuis le navigateur de votre ordinateur affiche la derni\u00e8re temp\u00e9rature re\u00e7ue.</li> <li>Cr\u00e9er un syst\u00e8me embarqu\u00e9 qui allume et \u00e9teint une LED toute les 0.5 secondes. Le syst\u00e8me envoie l'\u00e9tat de LED vers un serveur MQTT. Une interface web lanc\u00e9e depuis le navigateur de votre ordinateur permet de voir en temps r\u00e9el l'\u00e9tat de la LED.</li> </ol>"},{"location":"iot/exo_mqtt/","title":"Exercices MQTT","text":""},{"location":"iot/exo_mqtt/#exercices-mqtt","title":"Exercices MQTT","text":""},{"location":"iot/exo_mqtt/#serie-1","title":"S\u00e9rie 1","text":"<p>Cr\u00e9er un broker MQTT. Ensuite, cr\u00e9er une application web <code>Vanilla</code> avec vite et y ajouter les fonctionnalit\u00e9s suivantes :</p> <ol> <li>Proposer deux champs <code>input</code> et un bouton. Quand on clique sur le bouton, envoyer un message MQTT sur le topic saisi dans le premier <code>input</code> avec le contenu du 2\u00e8me deux champ <code>input</code>.</li> <li>Afficher les messages re\u00e7us sur le topic test dans une liste.</li> <li>Ajouter un <code>input</code> et un bouton <code>\"Souscrire\"</code>. Quand on clique sur le bouton, souscrire au topic saisi dans l'<code>input</code>. Une fois souscrit, afficher les messages re\u00e7us sur ce topic dans une liste.</li> <li>Afficher la liste de tous les topics souscrits. Ajouter un bouton <code>\"Se d\u00e9sabonner\"</code> \u00e0 c\u00f4t\u00e9 de chaque topic pour se d\u00e9sabonner.</li> <li>Ajouter un bouton <code>\"Se d\u00e9sabonner de tous les topics\"</code> pour se d\u00e9sabonner de tous les topics.</li> <li>Appliquer du CSS pour enjoliver l'affichage des messages re\u00e7us.</li> </ol>"},{"location":"iot/exo_mqtt/#serie-2","title":"S\u00e9rie 2","text":"<p>Cr\u00e9er un broker MQTT. Ensuite, cr\u00e9er une application web <code>Vanilla</code> avec vite et y ajouter les fonctionnalit\u00e9s suivantes :</p> <ol> <li>Afficher un histogramme (bar chart) en temps r\u00e9el des messages re\u00e7us sur le topic <code>temperature</code>. L'histogramme doit compter le nombre de temp\u00e9rature dans les intervalles suivantes <code>[0,9], [10, 19], [20,29], [30,39], [40,49]</code>. Les autres temp\u00e9ratures sont ignor\u00e9es.</li> <li>Afficher un histogramme (bar chart) en temps r\u00e9el de la derni\u00e8re temp\u00e9rature re\u00e7u dans les topic <code>maison/salon/temperature</code>, <code>garage/temperature</code>, <code>piscine/temperature</code>. Chaque colonne de l'histogramme affiche la derni\u00e8re temp\u00e9rature re\u00e7ue pour chaque topic.</li> </ol>"},{"location":"iot/projects/","title":"Projets","text":""},{"location":"iot/projects/#projets","title":"Projets","text":""},{"location":"iot/projects/#projet-1-plateforme-iot-pour-la-maison","title":"Projet 1: plateforme IoT pour la maison","text":"<p>R\u00e9aliser une plateforme IoT pour la maison qui devra g\u00e9rer ces appareils :</p> <ul> <li>Un ESP32 qui contient :</li> <li>Un capteur de DHT11 pour la temp\u00e9rature et l'humidit\u00e9</li> <li>Un capteur de mouvement</li> <li>Un afficheur OLED qui permet de visualiser en temps r\u00e9el l'\u00e9tat du capteur de mouvement et les donn\u00e9es du DHT11</li> <li>Deux boutons qui permettent de basculer l'envoi des informations en MQTT</li> <li>Un ESP32 qui contient :</li> <li>Un buzzer</li> <li>Une LED RGB</li> </ul> <p>Il est aussi demand\u00e9 de d\u00e9velopper une application web moderne et responsive qui permet de visualiser les donn\u00e9es des capteurs en temps r\u00e9el et d'envoyer des commandes aux actionneurs. Par exemple, activer ou d\u00e9sactiver le buzzer, allumer ou \u00e9teindre la LED RGB.</p> <p>Autres fonctionnalit\u00e9s demand\u00e9es:</p> <ul> <li>Si le capteur de mouvement d\u00e9tecte une pr\u00e9sence, le buzzer doit \u00e9mettre un son et la LED RGB doit clignoter en diff\u00e9rentes couleurs. Il ne peut \u00eatre</li> </ul> <p>Les deux ESP32 ainsi que la webapp communiquent en MQTT avec un broker MQTT h\u00e9berg\u00e9 sur un serveur distant.</p>"},{"location":"java/","title":"Bienvenue au cours \"D\u00e9veloppement Java\"","text":"","tags":["introduction"]},{"location":"java/#bienvenue-au-cours-developpement-java","title":"Bienvenue au cours \"D\u00e9veloppement Java\"","text":"","tags":["introduction"]},{"location":"java/#introduction","title":"Introduction","text":"","tags":["introduction"]},{"location":"java/#pre-requis","title":"Pr\u00e9-requis","text":"<ul> <li>Installer Java via un gestionnaire de paquets (je vous d\u00e9conseille d'utiliser l'installateur officiel)<ul> <li>Sous Windows via scoop</li> <li>Sous macOS ou Linux via SDKMAN!</li> </ul> </li> <li>Visual studio Code (VSCode) et l'extension pack java.</li> </ul>","tags":["introduction"]},{"location":"java/#ressources-et-liens-utiles","title":"Ressources et liens utiles","text":"<ul> <li>emojipedia</li> <li>Complete list of github markdown emoji markup</li> <li>mkdocs material</li> </ul>","tags":["introduction"]},{"location":"java/#license-credits-et-remerciements","title":"License, cr\u00e9dits et remerciements","text":"<ul> <li>Le cours est r\u00e9alis\u00e9 avec MKDocs et Material for MKDocs</li> <li>Ce support de cours est disponible sous licence Creative Commons Attribution 4.0 International (CC BY 4.0)</li> <li>Certaines images sont g\u00e9n\u00e9r\u00e9es via IA (Hotpot.ai)</li> </ul>","tags":["introduction"]},{"location":"java/java-exercices-1/","title":"Exercices initiaux","text":""},{"location":"java/java-exercices-1/#exercices-initiaux","title":"Exercices initiaux","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> </ul>"},{"location":"java/java-exercices-1/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Cr\u00e9er un programme Java qui permet de jouer \u00e0 pile ou face, le programme lance une pi\u00e8ce au hasard et demande \u00e0 l'utilisateur de saisir pile ou face au clavier. Le programme affiche le r\u00e9sultat et si l'utilisateur a gagn\u00e9 ou perdu.</li> <li>Cr\u00e9er un programme Java qui permet de jouer au jeu de \"devine un nombre\". Le programme g\u00e9n\u00e8re un nombre al\u00e9atoire entre 1 et 20 (1 et 20 sont inclus) et demande \u00e0 l'utilisateur de deviner ce nombre. Le programme affiche, pour chaque proposition de l'utilisateur, si le nombre est plus grand ou plus petit que le nombre choisi. Si l'utilisateur trouve le nombre, Le programme affiche le nombre d'essais qu'il lui a fallu pour trouver ce nombre.</li> <li>\u00c9crire un programme Java qui permet d'afficher l'inverse d'une cha\u00eene de caract\u00e8res. Par exemple, si l'utilisateur saisit \"Bonjour\", le programme affiche \"ruojnoB\". Ne pas utiliser de m\u00e9thodes de la classe String (comme reverse). La cha\u00eene en entr\u00e9e est pass\u00e9 en argument de la ligne de commande.</li> <li>\u00c9crire un programme Java qui permet de dire si une cha\u00eene de caract\u00e8res est un palindrome. Un palindrome est un mot qui se lit de la m\u00eame fa\u00e7on de gauche \u00e0 droite et de droite \u00e0 gauche. Par exemple, \"radar\" est un palindrome. Ne pas utiliser de m\u00e9thode de la classe String. Faire l'exercice avec et sans la m\u00e9thode <code>equals</code>. La cha\u00eene en entr\u00e9e est pass\u00e9 en argument de la ligne de commande.<ul> <li>Exemples:<ul> <li>Si on passe \"radar\" en entr\u00e9e, le programme affiche \"Palindrome\"</li> <li>Si on passe \"bonjour\" en entr\u00e9e, le programme affiche \"Pas un palindrome\"</li> </ul> </li> </ul> </li> <li>\u00c9crire un programme Java qui permet de saisir un nombre entier et de calculer la somme de ses chiffres. Le programme affiche la somme des chiffres ainsi que le d\u00e9tail du calcul. Le nombre en entr\u00e9e est pass\u00e9 en argument de la ligne de commande.<ul> <li>Exemples :<ul> <li>Si on passe 123 en entr\u00e9e, le programme affiche \"6 (1 + 2 + 3 = 6)\"</li> <li>Si on passe 1234 en entr\u00e9e, le programme affiche \"10 (1 + 2 + 3 + 4 = 10)\"</li> </ul> </li> </ul> </li> <li>Cr\u00e9er un programme Java qui permet de saisir un entier et de v\u00e9rifier si cet entier est un nombre premier. Le nombre en entr\u00e9e est r\u00e9cup\u00e9r\u00e9 via le <code>Scanner</code>. Rappel : un nombre premier est un nombre qui est divisible par exactement deux entiers distincts (qui sont 1 et le nombre-m\u00eame). 0 et 1 ne sont pas des nombres premiers par d\u00e9finition (1 n'est pas divisible par deux nombres distincts).</li> </ol> Guess the number <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\nimport java.util.Scanner;\nimport java.util.random.RandomGenerator;\n\npublic class GuessNumber {\n\n  public static void main(String... args) {\n    // var permet de faire du typage implicite\n    var randomGenerator = RandomGenerator.getDefault();\n    int numberToGuess = randomGenerator.nextInt(1, 21);\n\n    Scanner scanner = new Scanner(System.in);\n\n    int proposition = scanner.nextInt();\n    while (proposition != numberToGuess) {\n      if (proposition &lt; numberToGuess) {\n        System.out.println(\"Plus\");\n      } else {\n        System.out.println(\"Moins\");\n      }\n      proposition = scanner.nextInt();\n    }\n    System.out.println(\"Gagn\u00e9\");\n    scanner.close();\n  }\n}\n</code></pre> Heads or Tails <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\nimport java.util.Scanner;\nimport java.util.random.RandomGenerator;\n\npublic class HeadsOrTails {\n\n  public static void main(String... args) {\n\n    var randomGenerator = RandomGenerator.getDefault();\n    boolean isHeads = randomGenerator.nextBoolean();\n    // Op\u00e9rateur ternaire ? : (ternainre: trois op\u00e9randes)\n    String side = isHeads ? \"pile\" : \"face\";\n    // \u00e9quivalent \u00e0 \u00e7a\n    if (isHeads) {\n      side = \"pile\";\n    } else {\n      side = \"face\";\n    }\n\n    var s = new Scanner(System.in);\n    var answer = s.nextLine();\n    s.close();\n\n    System.out.println(side);\n\n    if (side.equals(answer)) {\n      System.out.println(\"Gagn\u00e9\");\n    } else {\n      System.out.println(\"perdu\");\n    }\n  }\n}\n</code></pre> Reverse a string <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\npublic class ReverseManual {\n\n  public static void main(String... args) {\n    if (args.length == 0) {\n      System.err.println(\"Usage: ReverseManual inputString\");\n      exit(1);\n    }\n\n    // R\u00e9cup\u00e9ration de l'argument pass\u00e9 en ligne de commande\n    String input = args[0];\n    String output = \"\";\n    // StringBuffer propose la m\u00e9thode setCharAt non disponible dans String\n    StringBuffer reversedStringBuffer = new StringBuffer();\n    reversedStringBuffer.setLength(input.length());\n\n    for (int i = 0; i &lt; input.length(); i++) {\n      output = input.charAt(i) + output;\n      reversedStringBuffer.setCharAt(input.length() - i - 1, input.charAt(i));\n    }\n\n    System.out.println(\"solution 1: \" + output);\n    System.out.println(\"solution 2: \" + reversedStringBuffer);\n  }\n}\n</code></pre> Reverse many strings <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\npublic class ReverseManualMany {\n\n  public static void main(String... args) {\n    if (args.length == 0) {\n      System.err.println(\"Usage: ReverseManual inputString\");\n      exit(1);\n    }\n\n    for (String input : args) {\n      String output = \"\";\n      for (int i = 0; i &lt; input.length(); i++) {\n        output = input.charAt(i) + output;\n      }\n\n      System.out.println(output);\n    }\n  }\n}\n</code></pre> Palindrome <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\npublic class Palindrome {\n\n  public static boolean isPalindromeWithEquals(String input) {\n    String reversed = \"\";\n    for (int i = 0; i &lt; input.length(); i++) {\n      reversed = input.charAt(i) + reversed;\n    }\n    return input.equalsIgnoreCase(reversed);\n  }\n\n  public static boolean isPalindromeWithoutEquals(String input) {\n    for (int i = 0; i &lt; input.length() / 2; i++) {\n      if (input.charAt(i) != input.charAt(input.length() - 1 - i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static void main(String... args) {\n    if (args.length == 0) {\n      System.err.println(\"Usage: Palindrome inputString\");\n      exit(1);\n    }\n    System.out.println(\"Is palindrome with equals\");\n    System.out.println(isPalindromeWithEquals(args[0]) ? \"Palindrome\" : \"Pas un Palindrome\");\n    System.out.println(\"Is palindrome without equals: \");\n    System.out.println(isPalindromeWithoutEquals(args[0]) ? \"Palindrome\" : \"Pas un Palindrome\");\n  }\n}\n</code></pre> Count digits <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\npublic class CountDigits {\n\n  public static void main(String... args) {\n    if (args.length == 0) {\n      System.err.println(\"Usage: CountDigits inputNumber\");\n      exit(1);\n    }\n    int input = Integer.parseInt(args[0]);\n    String detail = \" (\";\n    int sum = 0;\n    // Pour ne pas afficher le + dans le d\u00e9tail du calcul du premier nombre\n    boolean isFirst = true;\n    while (input != 0) {\n      int digit = input % 10;\n      String prefix = isFirst ? \"\" : \" + \";\n      detail += prefix + digit;\n      isFirst = false;\n      input = input / 10;\n      sum += digit;\n    }\n    detail += \")\";\n\n    System.out.println(sum + detail);\n  }\n}\n</code></pre> Is prime ? <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\nimport java.util.Scanner;\n\npublic class IsPrime {\n\n  public static void main(String... args) {\n    System.out.println(\"Veuillez saisir un entier positif et on vous dira s'il est premier.\");\n\n    Scanner scanner = new Scanner(System.in);\n    long input = scanner.nextLong();\n    scanner.close();\n    if (input &lt; 0) {\n      System.err.println(\"ce n'est pas un nombre positif\");\n      exit(1);\n    } else if (input &lt; 2) {\n      System.out.println(\"ce n'est pas un nombre premier\");\n      exit(1);\n    } else if (input == 2) {\n      System.out.println(\"c'est un nombre premier\");\n      exit(0);\n    }\n\n    for (long i = 2; i &lt; input / 2; i++) {\n      if (input % i == 0) {\n        System.out.println(\"Ce n'est pas un nombre premier\");\n        exit(1);\n      }\n    }\n    System.out.println(\"C'est un nombre premier\");\n  }\n}\n</code></pre>"},{"location":"java/java-exercices-1/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Cr\u00e9er une application Java qui g\u00e9n\u00e8re continuellement des nombres al\u00e9atoires entre 1 et 5 (inclus) et s'arr\u00eate d\u00e8s que le nombre 3 est g\u00e9n\u00e9r\u00e9 5 fois. Avant de s'arr\u00eater, le programme affiche la somme et la moyenne des nombres g\u00e9n\u00e9r\u00e9s. Ne pas utiliser de tableaux.</li> <li>Cr\u00e9er une application Java qui affiche les 10 premiers termes de la suite de Fibonacci. La suite de Fibonacci est une suite de nombres dans laquelle chaque nombre est la somme des deux pr\u00e9c\u00e9dents. Les deux premiers termes de la suite sont 0 et 1. Par exemple, les 10 premiers termes de la suite de Fibonacci sont : 0, 1, 1, 2, 3, 5, 8, 13, 21, 34.</li> <li>Cr\u00e9er une application Java qui calcule le plus grand diviseur commun (PGCD) de deux entiers. Le PGCD de deux entiers est le plus grand entier qui divise les deux entiers sans reste. Par exemple, le PGCD de 12 et 18 est 6. Le programme affiche les pgcd des couples suivants: 12 et 18 (le pgcd est 6), 48 et 18 (le pgcd est 6), 56 et 42 (le pgcd est 14), 101 et 10 (le pgcd est 1), 100 et 25 (le pgcd est 25).</li> <li>Cr\u00e9er une application Java qui simule le d\u00e9roulement d'un jeu d'action 1D. La carte du jeu est repr\u00e9sent\u00e9e par une chaine de caract\u00e8res. Le joueur est repr\u00e9sent\u00e9 par un \"J\", les ennemis par des E, le potions par des P, les cases vides par . et la sortie par S. Le joueur se d\u00e9place de gauche \u00e0 droite d'une case \u00e0 chaque tour. Tout le reste est immobile (ennemis, potions et sortie). Chaque rencontre avec un ennemi fait perdre 1 point de vie et un tour et fait gagner 1 magolon (la monnaie locale). Chaque potion ramass\u00e9e fait gagner 1 point de vie et fait perdre un tour. Le joueur commence avec 3 points de vie et 0 magolons. Le jeu s'arr\u00eate lorsque le joueur n'a plus de points de vie ou lorsqu'il a atteint une sortie.<ul> <li>Pour chaque carte donn\u00e9e, le programme affiche le nombre de tours effectu\u00e9s pour atteindre la sortie ou mourir, le nombre de magolons gagn\u00e9s, le nombre de points de vie restants et s'il a r\u00e9ussi ou \u00e9chou\u00e9.</li> <li>Par exemple, pour la carte suivante : <code>\"J..E..P..S\"</code>, le programme affiche \"Le joueur a r\u00e9ussi \u00e0 atteindre la sortie en 11 tours avec 1 magolon et 3 points de vie restants\".</li> <li>Afficher le r\u00e9sultat du jeu pour les cartes suivantes : <code>\"J...S\"</code> (4 tour, 0 magolons, vivant), <code>\"J..E..P..S\"</code> (11 tours, 1 magolon, vivant), <code>\"J..EE.E..S\"</code> (9 tours, 0 magolons, mort), <code>\"J..E..P..E..P..S\"</code>, <code>\"J..E..PP..EEE..P..E..S\"</code>.</li> <li>Afficher le r\u00e9sultat du jeu pour les cartes suivantes: <code>\"..J..S...EP\"</code>, <code>\"E.PSJ..EPPP...S.EP\"</code>, <code>\"SE.SPE.J..EPEE.EPEE.PEPE..S.PSP\"</code>.</li> </ul> </li> <li>Supposons qu'on ait deux cercles : un cercle de centre A et de rayon Ra, et un cercle de centre B et de rayon Rb. Les coordonn\u00e9es de A sont not\u00e9es <code>(xa, ya)</code> et les coordonn\u00e9es de B sont not\u00e9es <code>(xb, yb)</code>. On souhaite \u00e9crire une fonction permettant de dire si les deux cercles entrent en collision. La distance entre les deux centres A et B est: <code>sqrt((xb-xa)\u00b2 + (yb-ya)\u00b2)</code><ul> <li>Donner la condition qui permet de savoir s\u2019il y a collision (ou pas) entre les cercles.</li> <li>Exprimer cette condition sans racine carr\u00e9e.</li> <li>Ecrire une fonction <code>isCollision</code> qui prend les informations de deux cercles en arguments et renvoie <code>true</code> s\u2019il y a collision entre les deux cercles, sinon <code>false</code>.</li> <li>Faire cet exercice en d\u00e9finissant une classe <code>Circle</code> et une m\u00e9thode <code>isCollision</code>.</li> </ul> </li> </ol> Solutions ContinuousRandomStats<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\nimport java.util.random.RandomGenerator;\n\npublic class ContinuousRandomStats {\n\n  public static void main(String... args) {\n    RandomGenerator randomGenerator = RandomGenerator.getDefault();\n    int foundCount = 0;\n    int sum = 0;\n    int generatedIntCount = 0;\n    while (foundCount &lt; 5) {\n      int generatedInt = randomGenerator.nextInt(1, 6);\n      if (generatedInt == 3) {\n        foundCount += 1;\n        System.out.println(String.format(\"Found 3 %d times\", foundCount));\n      }\n      sum += generatedInt;\n      generatedIntCount += 1;\n    }\n    int mean = sum / generatedIntCount;\n    System.out.println(String.format(\"Sum: %d, count: %d, mean: %d\", sum, generatedIntCount, mean));\n  }\n}\n</code></pre> FibonacciInitial<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\nimport java.util.logging.Logger;\n\npublic class FibonacciInitial {\n\n  public static void main(String... args) {\n    Logger.getGlobal().info(String.format(\"F(0): %d\", 0));\n    Logger.getGlobal().info(String.format(\"F(1): %d\", 1));\n    int secondToLast = 0;\n    int last = 1;\n    for (int i = 2; i &lt; 10; i++) {\n      int current = secondToLast + last;\n      Logger.getGlobal().info(String.format(\"F(%d): %d\", i, current));\n      secondToLast = last;\n      last = current;\n    }\n  }\n}\n</code></pre> pgcd<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\npublic class pgcd {\n\n  public static int computePgcd(int a, int b) {\n    int min = a &lt;= b ? a : b;\n    int pgcd = 1;\n    // On trouve le diviseur commun de 1 jusqu'a plus petit des deux arguments\n    for (int i = 1; i &lt;= min; i++) {\n      // Si on trouve un nouveau diviseur plus grand (car i s'incr\u00e9mente), on \u00e9crase\n      // la variable pgcd\n      if (a % i == 0 &amp;&amp; b % i == 0) {\n        System.out.println(String.format(\"Trouv\u00e9 nouveau pgcd %d\", i));\n        pgcd = i;\n      }\n    }\n    return pgcd;\n  }\n\n  public static int computePgcdFaster(int a, int b) {\n    int min = a &lt;= b ? a : b;\n    // On d\u00e9marre directement du min et on s'arr\u00eate d\u00e8s qu'on trouve un diviseur\n    // commun\n    for (int i = min; i &gt;= 1; i--) {\n      if (a % i == 0 &amp;&amp; b % i == 0) {\n        System.out.println(String.format(\"pgcd trouv\u00e9 %d\", i));\n        return i;\n      }\n    }\n    return 1;\n  }\n\n  public static void main(String... args) {\n    System.out.println(String.format(\"pgcd(3, 6)=%d\", computePgcd(3, 6)));\n    System.out.println(String.format(\"pgcd(77, 11)=%d\", computePgcd(77, 11)));\n    System.out.println(String.format(\"pgcd(31, 107)=%d\", computePgcd(31, 107)));\n\n    System.out.println(\"Faster\");\n    System.out.println(String.format(\"pgcd(3, 6)=%d\", computePgcdFaster(3, 6)));\n    System.out.println(String.format(\"pgcd(77, 11)=%d\", computePgcdFaster(77, 11)));\n    System.out.println(String.format(\"pgcd(31, 107)=%d\", computePgcdFaster(31, 107)));\n  }\n}\n</code></pre> adventure1d<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\n// Un record est une class plus concise (syntaxe plus courte et simple)\nrecord LevelResult(int hp, int magolon, int turnCount) {\n  @Override\n  public final String toString() {\n    return String.format(\"Hero has %d hp, %d magolon. He %s the level after %d turns\",\n        this.hp, this.magolon, this.hp &lt;= 0 ? \"failed\" : \"succeeded\", this.turnCount);\n  }\n}\n\npublic class adventure1d {\n  // throw est une sorte de return alternatif pour les cas d'erreur (object\n  // Exception)\n  public static LevelResult playLevel(String level) throws Exception {\n    int hp = 3;\n    int turnCount = 0;\n    int magolon = 0;\n    // D'abord trouver l'indice du joueur dans la carte\n    int playerInitialPosition = 0;\n    for (; level.charAt(playerInitialPosition) != 'J'\n        &amp;&amp; playerInitialPosition &lt; level.length(); playerInitialPosition++) {\n    }\n    // V\u00e9rifier que la position du joueur est au moins l'avant derni\u00e8re case\n    if (playerInitialPosition &gt;= level.length() - 1) {\n      Exception exception = new Exception(\"Position intiale du joueur invalide\");\n      throw exception;\n    }\n    System.out.format(\"Initiall player position %d\\n\", playerInitialPosition);\n    // D\u00e9rouler le niveau\n    for (int i = playerInitialPosition + 1; i &lt; level.length(); i++) {\n      turnCount += 1;\n      char currentTile = level.charAt(i);\n      if (currentTile == 'S') {\n        break;\n      } else if (currentTile == 'E') {\n        turnCount += 1;\n        hp -= 1;\n        if (hp == 0) {\n          break;\n        }\n        magolon += 1;\n      } else if (currentTile == 'P') {\n        turnCount += 1;\n        hp += 1;\n      } else if (currentTile != '.') {\n        throw new Exception(String.format(\"Incorrect tile %c\", currentTile));\n      }\n    }\n    return new LevelResult(hp, magolon, turnCount);\n  }\n\n  public static void main(String... args) throws Exception {\n    String[] firstLevels = {\n        \"J..S\", \"J..E..P..S\", \"J..EE.E..S\", \"J..E..P..E..P..S\", \"J..E..PP..EEE..P..E..S\"\n    };\n    for (String level : firstLevels) {\n      LevelResult levelResult = playLevel(level);\n      System.out.format(\"Playing level '%s'. Result: %s\\n\", level, levelResult);\n    }\n    for (String level : new String[] {\n        \"..J..S...EP\", \"E.PSJ..EPPP...S.EP\", \"SE.SPE.J..EPEE.EPEE.PEPE..S.PSP\"\n    }) {\n      LevelResult levelResult = playLevel(level);\n      System.out.format(\"Playing level '%s'. Result: %s\\n\", level, levelResult);\n    }\n\n    for (String level : new String[] {\n        \"..J.J.S..\", \"JN\", \"...\"\n    }) {\n      try {\n        LevelResult levelResult = playLevel(level);\n        System.out.format(\"Playing level '%s'. Result: %s\\n\", level, levelResult);\n      } catch (Exception e) {\n        System.out.format(\"Skipping incorrect level. Cause: %s\\n\", e.getMessage());\n      }\n    }\n  }\n}\n</code></pre> CircleCollisionDetector<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\npublic class CircleCollisionDetector {\n  public static void main(String[] args) {\n    CircleCollisionDetector circleCollisionDetector = new CircleCollisionDetector();\n    circleCollisionDetector.isColliding(0, 0, 10, 10, 0, 10);\n  }\n\n  /**\n   * La distance entre les deux cercles est plus petite que la somme des rayons\n   * \n   * @param xa\n   * @param ya\n   * @param ra\n   * @param xb\n   * @param yb\n   * @param rb\n   * @return\n   */\n  boolean isColliding(int xa, int ya, int ra, int xb, int yb, int rb) {\n    return Math.pow(xb - xa, 2) + Math.pow(yb - ya, 2) &lt; Math.pow(rb + ra, 2);\n  }\n}\n</code></pre>"},{"location":"java/java-exercices-arrays/","title":"Exercices sur les tableaux","text":""},{"location":"java/java-exercices-arrays/#exercices-sur-les-tableaux","title":"Exercices sur les tableaux","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> </ul>"},{"location":"java/java-exercices-arrays/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Cr\u00e9er un programme Java qui g\u00e9n\u00e8re un tableau al\u00e9atoire de 10 entiers compris entre -10 et 10 et affiche (Il faut calculer vous-m\u00eame les valeurs avec une boulce for) :<ul> <li>La plus grande valeur</li> <li>La plus petite valeur</li> <li>La moyenne</li> <li>L'\u00e9cart type dont la formule est : <code>racine carr\u00e9e (somme((x - moyenne)\u00b2) / n)</code></li> <li>Le nombre de valeurs positives et le nombre de valeurs n\u00e9gatives</li> <li>Le nombre de valeurs paires et le nombre de valeurs impaires</li> </ul> </li> <li>Cr\u00e9er une programme Java qui met dans un tableau les 10 premiers nombres premiers posifitfs.<ul> <li>Rappel : un nombre premier est un nombre qui qui est divisible par exactement deux entiers disctints (qui sont 1 et le nombre-m\u00eame). 0 et 1 ne sont pas des nombres premiers par d\u00e9finition (1 n'est pas divisible par deux nombres distincts).</li> </ul> </li> <li>Cr\u00e9er un fonction Java qui calcule le schtroumph de deux tableaux qui ne sont pas forc\u00e9ment de la m\u00eame taille (source). Pour calculer le schtroumpf, il faut multiplier chaque \u00e9l\u00e9ment du premier tableau par chaque \u00e9l\u00e9ment du deuxi\u00e8me, et additionner le tout.<ul> <li>Par exemple si l'on a : Tableau 1 -&gt; {4, 8, 7, 12}, Tableau 2 : {3, 6}. Le Schtroumpf sera : 3 \u2217 4 + 3 \u2217 8 + 3 \u2217 7 + 3 \u2217 12 + 6 \u2217 4 + 6 \u2217 8 + 6 \u2217 7 + 6 \u2217 12 = 279</li> <li>Cr\u00e9er un programme Java qui g\u00e9n\u00e8re deux tableaux de tailles al\u00e9atoire (entre 3 et 8) et de valeurs al\u00e9atoires (entre -10 et 10 inclus)  et qui calcule leur schtroumpf.</li> </ul> </li> <li>Cr\u00e9er une fonction qui prend un tableau d\u2019entiers (<code>int[] numbers</code>) et affiche la plus grande valeur et la plus petite valeur (Il faut calculer vous-m\u00eame le max et le min)<ul> <li>G\u00e9n\u00e9rer un tableau de 10 entier al\u00e9atoires et afficher le max et le min</li> <li>G\u00e9n\u00e9rer un tableau de 10 entiers saisis au clavier et afficher le max et le min</li> </ul> </li> <li>Cr\u00e9er une fonction <code>int countVowels(String[] words)</code> qui compte le nombre total de voyelles du tableau de mots pass\u00e9 en argument. Utiliser une boucle for (ou for each) imbriqu\u00e9e pour r\u00e9soudre cet exercice.<ul> <li>Par exemple, pour <code>{\"Bonjour\", \"le\", \"monde\"}</code>, le r\u00e9sultat sera 6 (3 + 1 + 2).</li> <li>Cr\u00e9er un programme Java qui g\u00e9n\u00e8re une liste de 5 mots pris al\u00e9atoirement depuis la liste donn\u00e9es ci-apr\u00e8s et qui affiche le nombre total de voyelles de cette liste. Les mots disponibles sont : <code>{\"Bonjour\", \"le\", \"monde\", \"Java\", \"est\", \"un\", \"langage\", \"de\", \"programmation\", \"orient\u00e9\", \"objet\"}</code>.</li> </ul> </li> </ol> Solutions stats<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport java.util.random.RandomGenerator;\n\npublic class Serie2Ex1 {\n\n  public static void main(String... args) {\n    int numbers[] = new int[10];\n    RandomGenerator rng = RandomGenerator.getDefault();\n    int sum = 0;\n    int oddCount = 0; // odd : impair\n    int evenCount = 0; // even : pair\n    // Si on n'a pas encore g\u00e9n\u00e9r\u00e9 d'\u00e9l\u00e9ments, on initialise min et max avec les\n    // extr\u00eames\n    int minFirstLoop = Integer.MAX_VALUE;\n    int maxFirstLoop = Integer.MIN_VALUE;\n    // g\u00e9n\u00e9ration et calcul de la somme, min et max\n    for (int i = 0; i &lt; numbers.length; i++) {\n      numbers[i] = rng.nextInt(-10, 10);\n      System.out.print(numbers[i] + \", \");\n      sum += numbers[i];\n      if (numbers[i] % 2 == 0) {\n        evenCount += 1;\n      } else {\n        oddCount += 1;\n      }\n      if (minFirstLoop &gt; numbers[i]) {\n        minFirstLoop = numbers[i];\n      } else if (maxFirstLoop &lt; numbers[i]) {\n        maxFirstLoop = numbers[i];\n      }\n    }\n    double average = (double) sum / (double) numbers.length;\n\n    System.out.format(\"First loop data. sum %d, mean %f, evenCount %d, oddCount %d, min %d, max %d\\n\", sum, average,\n        evenCount, oddCount,\n        minFirstLoop, maxFirstLoop);\n\n    // On connait d\u00e9j\u00e0 les \u00e9l\u00e9ments, plus besoin d'initialiser avec les extr\u00eames\n    int min = numbers[0];\n    int max = numbers[0];\n    // min, max, \u00e9crat type\n    double standardDeviation = 0; // ecart type\n    for (int i = 0; i &lt; numbers.length; i++) {\n      standardDeviation += Math.pow(numbers[i] - average, 2);\n      if (min &gt; numbers[i]) {\n        min = numbers[i];\n      } else if (max &lt; numbers[i]) {\n        max = numbers[i];\n      }\n    }\n    // SQRT: SQuare RooT -&gt; racine carr\u00e9e\n    standardDeviation = Math.sqrt(standardDeviation / (double) numbers.length);\n    System.out.format(\"Results 2nd loop -&gt; min: %d, max: %d, Standard deviation: %f\\n\", min, max, standardDeviation);\n  }\n}\n</code></pre> 10 premiers nombres premiers<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\npublic class First10Prime {\n\n  public static void main(String... args) {\n    System.out.println(\"Hello World\");\n\n    int[] firstTenPrimes = new int[10];\n    firstTenPrimes[2] = 2;\n    int i = 1;\n    for (int currentInt = 3; i &lt; firstTenPrimes.length; currentInt++) {\n\n      // check if currentInt is prime\n      int j = 2;\n      for (; j &lt; currentInt; j++) {\n        if (currentInt % j == 0) {\n          break;\n        }\n      }\n      if (j == currentInt) {\n        firstTenPrimes[i] = currentInt;\n        i++;\n      }\n    }\n\n    System.out.println(\"R\u00e9sutat -&gt;\");\n    for (int j = 0; j &lt; firstTenPrimes.length; j++) {\n      System.out.print(firstTenPrimes[j] + \", \");\n    }\n  }\n}\n</code></pre> Schtroumphons \ud83d\udcbb<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport java.util.random.RandomGenerator;\n\npublic class Schtroumph2Arrays {\n\n  public static int computeSchtroumph(int[] leftItems, int[] rightItems) {\n    int restult = 0;\n    for (int i = 0; i &lt; rightItems.length; i++) {\n      for (int j = 0; j &lt; leftItems.length; j++) {\n        int mulitplication = rightItems[i] * leftItems[j];\n        restult += mulitplication;\n        System.out.format(\"%d x %d = %d\", rightItems[i], leftItems[j], mulitplication);\n        if (j &lt; leftItems.length - 1) {\n          // Ajouter un \", \" \u00e0 l'affichage pour tous les \u00e9l\u00e9ments sauf le dernier\n          System.out.print(\", \");\n        }\n      }\n      System.out.println();\n    }\n    return restult;\n  }\n\n  public static int[] generateRandomArray() {\n    RandomGenerator randomGenerator = RandomGenerator.getDefault();\n    // Nombre d'\u00e9l\u00e9ments al\u00e9atoires\n    int length = randomGenerator.nextInt(2, 5);\n    int[] numbers = new int[length];\n    System.out.print(\"[\");\n    for (int i = 0; i &lt; numbers.length; i++) {\n      numbers[i] = randomGenerator.nextInt(-10, 10);\n      System.out.print(numbers[i]);\n      if (i != length - 1) {\n        // Ajouter un \", \" \u00e0 l'affichage pour tous les \u00e9l\u00e9ments sauf le dernier\n        System.out.print(\", \");\n      }\n    }\n    System.out.println(\"]\");\n    return numbers;\n  }\n\n  public static void main(String... args) {\n    System.out.println(\"Tableaux donn\u00e9s en exemple\");\n    int[] exampleLeftItems = new int[] { 4, 8, 7, 12 };\n    int[] exampleRightItems = new int[] { 3, 6 };\n    int exampleResult = computeSchtroumph(exampleLeftItems, exampleRightItems);\n    System.out.println(exampleResult);\n\n    System.out.println(\"Tableaux al\u00e9atoires\");\n    int[] rightItems = generateRandomArray();\n    int[] leftItems = generateRandomArray();\n    int result = computeSchtroumph(leftItems, rightItems);\n    System.out.println(result);\n  }\n}\n</code></pre> Random min and max<pre><code>///usr/bin/env jbang --enable-preview \"$0\" \"$@\" ; exit $?\n\nimport java.util.random.RandomGenerator;\n\npublic class RandomMinMax {\n\n  public static void printMinMax(int[] numbers) {\n    if (numbers.length == 0) {\n      return;\n    }\n\n    int min = numbers[0];\n    int max = numbers[0];\n\n    for (int number : numbers) {\n      min = number &lt; min ? number : min;\n      max = number &gt; max ? number : max;\n    }\n    System.out.format(\"min: %d, max: %d\\n\", min, max);\n  }\n\n  public static void main(String... args) {\n    RandomGenerator generator = RandomGenerator.getDefault();\n    int[] numbers = new int[10];\n    for (int i = 0; i &lt; numbers.length; i++) {\n      numbers[i] = generator.nextInt();\n      System.out.format(\"%d, \", numbers[i]);\n    }\n    System.out.println();\n    printMinMax(numbers);\n  }\n}\n</code></pre> CountVowels<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\npublic class CountVowels {\n\n  static int countVowels(String[] words) {\n    int vowelCount = 0;\n    for (String word : words) {\n      for (int i = 0; i &lt; word.length(); i++) {\n        char c = word.toLowerCase().charAt(i);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n          vowelCount += 1;\n        }\n      }\n    }\n    return vowelCount;\n  }\n\n  public static void main(String... args) {\n    String[] firstWords = new String[] { \"Bonjour\", \"le\", \"monde\" };\n    System.out.format(\"%d\\n\", countVowels(firstWords));\n\n    String[] secondWords = new String[] { \"Bonjour\", \"le\", \"monde\", \"Java\", \"est\", \"un\", \"langage\", \"de\",\n        \"programmation\", \"orient\u00e9\", \"objet\" };\n    System.out.format(\"%d\\n\", countVowels(secondWords));\n  }\n}\n</code></pre>"},{"location":"java/java-exercices-arrays/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Un spaceshooter est un type de jeu dans lequel un vaisseau, vu du dessus, parcourt le niveau du bas vers le haut. Un niveau du spaceshoorter est repr\u00e9sent\u00e9 par un tableau 2D de 10 lignes et 10 colonnes. Chaque case du tableau peut \u00eatre vide ou contenir un ennemi. Un ennemi est repr\u00e9sent\u00e9 par un caract\u00e8re <code>E</code> et une case vide par un caract\u00e8re <code>.</code>. Le vaisseau est repr\u00e9sent\u00e9 par le caract\u00e8re <code>V</code>. On va consid\u00e9rer que la ligne 0 repr\u00e9sente la fin du niveau et la ligne 9 son d\u00e9but.<ul> <li>Cr\u00e9er un niveau de jeu en remplissant al\u00e9atoirement le tableau 2D d'ennemis, de vides et d'un joueur avec les contraintes suivantes:<ul> <li>Le joueur doit \u00eatre sur la ligne 9 (la derni\u00e8re ligne) au milieu du tableau (colonne 4 ou 5 al\u00e9atoire)</li> <li>Il doit y avoir au maximum 7 ennemis dans le niveau.</li> <li>Il n'y a pas d'ennemis sur les 2 premi\u00e8res lignes du niveau (lignes 9 et 8).</li> </ul> </li> <li>Afficher le niveau de jeu dans la console.</li> <li>Astuces : utiliser <code>char[][]</code> comme type de tableau.</li> </ul> </li> <li>On souhaite d\u00e9velopper un mode d\u00e9mo dans lequel le jeu joue automatiquement en suivant cet algorithme:<ul> <li>Le vaisseau se d\u00e9place d'une case vers le haut s'il n'y a pas d'ennemis.</li> <li>S'il y a un obstacle, le vaisseau se d\u00e9place d'une case vers la droite tant qu'il y a un ennemi dans la case du dessus. S'il n'y a plus d'ennemis, il se d\u00e9place d'un case vers le haut.</li> <li>Si le vaisseau ne peut plus se d\u00e9placer \u00e0 droite, il se d\u00e9place vers la gauche d'un case tant qu'il y a un ennemi au dessus. S'il atteint le mur gauche et ne peut plus se d\u00e9placer, c'est la fin du jeu (game over).</li> <li>Si le joueur atteint la ligne 0, il a gagn\u00e9 (win).</li> <li>G\u00e9n\u00e9rer une carte de jeu al\u00e9atoire et afficher le d\u00e9roulement du jeu dans la console. A la fin de la partie, afficher le nombre de d\u00e9placements total et si le vaisseau a atteint la fin ou s'il a perdu.</li> </ul> </li> </ol> Solution <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport java.util.random.RandomGenerator;\n\npublic class Spaceshooter {\n\n  public static void printLevelMap(char[][] levelMap) {\n    System.out.println(\"Current Level map\");\n    for (int i = 0; i &lt; levelMap.length; i++) {\n      for (int j = 0; j &lt; levelMap[i].length; j++) {\n        System.out.format(\"%c \", levelMap[i][j]);\n      }\n      System.out.println();\n    }\n    System.out.println(\"End of current Level map\\n\");\n  }\n\n  public static void main(String... args) {\n    char[][] levelMap = new char[10][10];\n    // Boucle for imbriqu\u00e9e qui remplit le niveau de vide\n    for (int i = 0; i &lt; levelMap.length; i++) {\n      for (int j = 0; j &lt; levelMap[i].length; j++) {\n        levelMap[i][j] = '.';\n        // printLevelMap(levelMap);\n      }\n    }\n    RandomGenerator randomGenerator = RandomGenerator.getDefault();\n    // Permet de placer le vaisseau \u00e0 peu pr\u00e8s au milieu\n    int shipColumn = randomGenerator.nextInt(levelMap[0].length / 2, levelMap[0].length / 2 + 2);\n    int shipRow = levelMap.length - 1;\n    levelMap[shipRow][shipColumn] = 'V';\n    printLevelMap(levelMap);\n\n    System.out.println(\"Adding enemies\");\n    putEnemiesWithExerciseConstraint(levelMap);\n    // Commenter au dessus et d\u00e9commenter en dessous pour avoir une variante\n    // putEnemiesNoTwoAdjacentOnRow(levelMap);\n\n    boolean hasShipFailed = false;\n    while (!hasShipFailed) {\n      levelMap[shipRow][shipColumn] = '.';\n      if (shipRow == 0) {\n        break;\n      }\n      int columnMovement = +1;\n      // V\u00e9rifier que le vaisseau peut se d\u00e9placer\n      while (levelMap[shipRow - 1][shipColumn] == 'E') {\n        if (columnMovement &gt; 0) {\n          if (shipColumn + columnMovement &lt; levelMap[shipRow].length\n              &amp;&amp; levelMap[shipRow][shipColumn + columnMovement] != 'E') {\n            shipColumn += columnMovement;\n            System.out.println(\"\u27a1\ufe0f Movement\");\n          } else {\n            System.out.println(\"Start to move left \u2b05\ufe0f\");\n            columnMovement = -1;\n          }\n        } else {\n          if (shipColumn + columnMovement &gt; 0\n              &amp;&amp; levelMap[shipRow][shipColumn + columnMovement] != 'E') {\n            shipColumn += columnMovement;\n            System.out.println(\"\u2b05\ufe0f Movement\");\n          } else {\n            System.out.println(\"Oops, impossible to move \u2b05\ufe0f\");\n            levelMap[shipRow][shipColumn] = '*';\n            hasShipFailed = true;\n            break;\n          }\n        }\n      }\n      if (hasShipFailed) {\n        System.out.println(\"BOOM \ud83d\udca5\");\n        break;\n      }\n      shipRow -= 1;\n      levelMap[shipRow][shipColumn] = 'V';\n      printLevelMap(levelMap);\n    }\n    System.out.println(\"Final level map\");\n    printLevelMap(levelMap);\n    System.out.format(\"Ship has failed ? %s\\n\", hasShipFailed ? \"yes\" : \"no\");\n  }\n\n  public static void putEnemiesWithExerciseConstraint(char[][] levelMap) {\n    RandomGenerator randomGenerator = RandomGenerator.getDefault();\n    int enemyShipCount = 0;\n    while (enemyShipCount &lt; 40) {\n      // Les ennemis ne sont pas dans les deux derni\u00e8res lignes\n      int randomLine = randomGenerator.nextInt(0, levelMap.length - 2);\n      int randomColumn = randomGenerator.nextInt(0, levelMap[0].length);\n      if (levelMap[randomLine][randomColumn] != 'E') {\n        levelMap[randomLine][randomColumn] = 'E';\n        enemyShipCount += 1;\n      } else {\n        System.out.format(\"Skip enemy because constraints not satisified at position (%d, %d)\\n\", randomLine,\n            randomColumn);\n      }\n      printLevelMap(levelMap);\n    }\n  }\n\n  /**\n   * Exemple de placement d'ennemeis avec la containte suppl\u00e9mentaire qu'il ne\n   * faut en avoir deux d'adjacents sur la m\u00eame ligne\n   */\n  public static void putEnemiesNoTwoAdjacentOnRow(char[][] levelMap) {\n    RandomGenerator randomGenerator = RandomGenerator.getDefault();\n    int enemyShipCount = 0;\n    while (enemyShipCount &lt; 7) {\n      // Les ennemus sont entre les lignes 0 et 7\n      int randomLine = randomGenerator.nextInt(0, levelMap.length - 2);\n      int randomColumn = randomGenerator.nextInt(0, levelMap[0].length);\n\n      boolean isAlreadyEnemy = levelMap[randomLine][randomColumn] == 'E';\n      // Op\u00e9rateur ternaire correspond \u00e0 une \"if ? then : else\" en une seule ligne\n      // valeur = condition ? r\u00e9sultat si vrai : r\u00e9sultat si faux\n      boolean hasEnemyOnLeft = randomColumn == 0 ? false : levelMap[randomLine][randomColumn - 1] == 'E';\n      boolean hasEnemyOnRight = randomColumn == levelMap[randomLine].length - 1 ? false\n          : levelMap[randomLine][randomColumn + 1] == 'E';\n      if (!isAlreadyEnemy &amp;&amp; !hasEnemyOnLeft &amp;&amp; !hasEnemyOnRight) {\n        levelMap[randomLine][randomColumn] = 'E';\n        enemyShipCount += 1;\n      } else {\n        System.out.format(\"Skip enemy because constraints not satisified at position (%d, %d)\\n\", randomLine,\n            randomColumn);\n      }\n      printLevelMap(levelMap);\n    }\n  }\n}\n</code></pre>"},{"location":"java/java-exercices-lists-maps/","title":"Exercices listes et dictionnaires","text":""},{"location":"java/java-exercices-lists-maps/#exercices-listes-et-dictionnaires","title":"Exercices listes et dictionnaires","text":"<p>Consignes</p> <ul> <li>Ne pas se faire aider par des IA ou genAI</li> </ul>"},{"location":"java/java-exercices-lists-maps/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Cr\u00e9er une fonction qui g\u00e9n\u00e8re une liste d'entiers al\u00e9atoires, entre -2 et 2 inclus. La g\u00e9n\u00e9ration s'arr\u00eate lorsque le m\u00eame nombre est g\u00e9n\u00e9r\u00e9 3 fois d'affil\u00e9e. Cr\u00e9er une autre fonction qui prend une liste d'entiers en argument et qui g\u00e9n\u00e8re un dictionnaire dont les cl\u00e9s sont les entiers distincts de ce tableau et les valeurs sont le nombre de r\u00e9p\u00e9tition dans la liste. Afficher le r\u00e9sultat de cette fonction sur une liste g\u00e9n\u00e9r\u00e9e avec la premi\u00e8re fonction.<ul> <li>Exemple : <code>{1, 1, -1, 2, 0, 0, 1, 1, 1}</code> =&gt; <code>{1: 5, -1: 1, 2: 1, 0: 2}</code></li> </ul> </li> <li>Impl\u00e9menter la fonction <code>Map&lt;String, Integer&gt; countWords(String text)</code> qui prend un long texte et renvoie un dictionnaire dont les cl\u00e9s sont les mots distincts et les valeurs sont le nombre d'occurrences de chaque mot dans la liste. Astuce, utiliser <code>String.split(\" \")</code> pour s\u00e9parer les mots. Par exemple, pour le texte suivant : <code>Il y a un chat et un chien. Le chat est noir et le chien est blanc.</code> le r\u00e9sultat sera : <code>{Il: 1, y: 1, a: 1, un: 2, chat: 2, et: 2, chien.: 1, Le: 1, est: 2, noir: 1, blanc.: 1}</code>.<ul> <li>Afficher le r\u00e9sultat de cette fonction sur le texte suivant : <code>Le feu \u00e7a br\u00fble et \u00e7a fait mal et l'eau \u00e7a mouille mais \u00e7a moins mal que le feu</code>.</li> </ul> </li> <li>Les dictionnaires sont souvent utilis\u00e9s pour la mise en cache et la m\u00e9morisation de r\u00e9sultats pr\u00e9c\u00e9dents (ou la m\u00e9moisation).<ul> <li>Cr\u00e9er une fonction <code>int countA(List&lt;String&gt; words)</code> qui compte le nombre total de a ou A dans la liste de mots.<ul> <li>Afficher le r\u00e9sultat de cette fonction avec cette liste de mots : <code>List.of(\"I\", \"love\", \"Java\", \"and\", \"the\", \"JVM\", \"which\", \"is\", \"the\", \"Java\", \"Virtual\", \"Machine\")</code>. Le r\u00e9sultat doit \u00eatre <code>7</code>.</li> <li>Dans cette liste, le calcul doit \u00eatre fait une seule fois pour <code>Java</code> et le r\u00e9sultat est r\u00e9utilis\u00e9 pour l'occurrence suivante. Pareil pour <code>the</code>.</li> </ul> </li> <li>Cr\u00e9er une fonction <code>int compteFibonacci(int n)</code> qui calcule le Fibonacci et qui utilise la m\u00e9moisation afin d'optimiser le calcul.<ul> <li>En d'autres termes, si <code>compteFibonacci(10)</code> =&gt; <code>55</code> et <code>compteFibonacci(9)</code> =&gt; <code>34</code> sont d\u00e9j\u00e0 ex\u00e9cut\u00e9s. Alors <code>compteFibonacci(11)</code> calcule depuis le dictionnaire et renvoie <code>89</code> sans recalculer <code>compteFibonacci(10)</code> et <code>compteFibonacci(9)</code>.</li> <li>Aussi, si <code>compteFibonacci(10)</code> est d\u00e9j\u00e0 ex\u00e9cut\u00e9, alors <code>cache</code> contient tous les Fibonacci de <code>0</code> \u00e0 <code>10</code>.</li> </ul> </li> </ul> </li> </ol> Solutions Generate random integers and count<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.random.RandomGenerator;\n\npublic class randnumcount {\n\n  public static List&lt;Integer&gt; generateRandomeIntegers() {\n    List&lt;Integer&gt; integers = new ArrayList&lt;&gt;();\n    RandomGenerator randomGenerator = RandomGenerator.getDefault();\n    int lastGeneratedInt = 10;\n    int repeatCount = 0;\n    while (repeatCount &lt; 3) {\n      int randomInt = randomGenerator.nextInt(-2, 3);\n      integers.add(randomInt);\n      if (lastGeneratedInt == randomInt) {\n        repeatCount += 1;\n      } else {\n        repeatCount = 1;\n        lastGeneratedInt = randomInt;\n      }\n    }\n    return integers;\n  }\n\n  public static Map&lt;Integer, Integer&gt; countOccurences(List&lt;Integer&gt; integers) {\n    Map&lt;Integer, Integer&gt; counts = new HashMap&lt;&gt;();\n    for (Integer i : integers) {\n      if (counts.containsKey(i)) {\n        // Add 1 to number of occurences (appearances)\n        counts.put(i, counts.get(i) + 1);\n      } else {\n        // First time an int is found\n        counts.put(i, 1);\n      }\n    }\n    return counts;\n  }\n\n  public static void main(String... args) {\n    List&lt;Integer&gt; randomIntegers = generateRandomeIntegers();\n    Map&lt;Integer, Integer&gt; counts = countOccurences(randomIntegers);\n    for (Integer integer : randomIntegers) {\n      System.out.format(\"%d, \", integer);\n    }\n    System.out.println();\n    for (var entry : counts.entrySet()) {\n      System.out.format(\"Key: %d, value %d \\n\", entry.getKey(), entry.getValue());\n    }\n  }\n}\n</code></pre> Count repeating words of sentence<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class countrepeatingwords {\n  public static Map&lt;String, Integer&gt; countWords(String sentence) {\n    Map&lt;String, Integer&gt; counts = new HashMap&lt;&gt;();\n    // On supprime les points et les virgules\n    String[] words = sentence\n        .replaceAll(\"[\\\\.\\\\,]\", \"\")\n        .toLowerCase()\n        .split(\" \");\n    for (String word : words) {\n      if (counts.containsKey(word)) {\n        // Add 1 to number of occurences (appearances)\n        counts.put(word, counts.get(word) + 1);\n      } else {\n        // First time an int is found\n        counts.put(word, 1);\n      }\n    }\n    return counts;\n  }\n\n  public static void main(String... args) {\n    String sentence = \"Il y a un chat et un chien. Le chat est noir et le chien est blanc\";\n    Map&lt;String, Integer&gt; counts = countWords(sentence);\n    System.out.format(\"Count repeating words of sentence: %s \\n\", sentence);\n    for (var entry : counts.entrySet()) {\n      System.out.format(\"Key: %s, value %d \\n\", entry.getKey(), entry.getValue());\n    }\n  }\n}\n</code></pre> Count the numbers of a with cache<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class countacache {\n\n  public static Map&lt;String, Integer&gt; cache = new HashMap&lt;&gt;();\n\n  public static int countAs(String word) {\n    int count = 0;\n    word = word.toLowerCase();\n    if (cache.containsKey(word)) {\n      count = cache.get(word);\n      System.out.format(\"('%s', %d) already in cache \\n\", word, count);\n      return count;\n    }\n    for (int i = 0; i &lt; word.length(); i++) {\n      if (word.charAt(i) == 'a') {\n        count += 1;\n      }\n    }\n    System.out.format(\"Adding ('%s', %d) to cache\\n\", word, count);\n    cache.put(word, count);\n    return count;\n  }\n\n  public static int countAs(List&lt;String&gt; words) {\n    int result = 0;\n    for (String word : words) {\n      result += countAs(word);\n    }\n    return result;\n  }\n\n  public static void main(String... args) {\n    List&lt;String&gt; words = List.of(\"I\", \"love\", \"Java\", \"and\", \"the\", \"JVM\", \"which\", \"is\", \"the\", \"Java\", \"Virtual\",\n        \"Machine\");\n    int count = countAs(words);\n    System.out.format(\"The numbers of a in the list is %d\\n\", count);\n  }\n}\n</code></pre>"},{"location":"java/java-exercices-lists-maps/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>D\u00e9velopper une fonction qui g\u00e9n\u00e8re une liste de personnages RPG. La fonction demande \u00e0 l'utilisateur de saisir le nom du premier personnage et sa classe (parmi les classe <code>Fighter</code> et <code>Mage</code> qui h\u00e9ritent de la classe <code>Hero</code>). Ensuite, la fonction demande si l'utilisateur souhaite ajouter un personne ou non, si ou un nouveau personnage est cr\u00e9\u00e9 comme pr\u00e9c\u00e9demment, sinon, la fonction renvoie la liste des personnages cr\u00e9\u00e9s.<ul> <li>Cr\u00e9er un programme qui appelle cette fonction et qui affiche la liste des personnages cr\u00e9\u00e9s.</li> <li>Exemple : <code>Fighter: Bob, Mage: Alice</code>.</li> </ul> </li> <li> <p>Nous souhaitons enrichir la fonction pr\u00e9c\u00e9dents en ajoutant la g\u00e9n\u00e9ration des attributs des personnages. Voici la listes des attributs initiaux pour les classes <code>Fighter</code> et <code>Mage</code> list\u00e9s dans ce tableau:</p> Attribut Fighter Mage Points de vie entre 20 et 25 entre 5 et 10 Force entre 10 et 15 entre 1 et 5 Intelligence entre 1 et 5 entre 5 et 10 Agilit\u00e9 entre 5 et 10 entre 5 et 10 <ul> <li>Modifier la fonction de g\u00e9n\u00e9ration de personnages pour g\u00e9n\u00e9rer al\u00e9atoirement les attributs des personnages en respectant les contraintes ci-dessus et les affiche \u00e0 l'utilisateur. La fonction demande \u00e0 l'utilisateur s'il accepte les valeurs g\u00e9n\u00e9r\u00e9es ou s'il souhaite tenter une nouvelle g\u00e9n\u00e9ration d'attributs.</li> <li>Modifier le programme pour afficher les attributs des personnages cr\u00e9\u00e9s en respectant le format suivant : <code>Fighter: Bob [P: 22, F: 12, I: 2, A: 8]. Mage: Alice [P: 7, F: 11, I: 6, A: 9]</code>.</li> </ul> </li> </ol>"},{"location":"java/java-exercices-misc/","title":"Exercices divers","text":""},{"location":"java/java-exercices-misc/#exercices-divers","title":"Exercices divers","text":""},{"location":"java/java-exercices-misc/#exercice-1","title":"Exercice 1","text":"<p>Pour cet exercice, cr\u00e9er le projet avec <code>gradle init</code> et utiliser les annotations li\u00e9es \u00e0 la Null Safety.</p> <ul> <li>Cr\u00e9er une classe Java <code>IntCalculator</code> qui permet de faire des op\u00e9rations arithm\u00e9tiques sur des entiers \u00e0 partir d'une cha\u00eene de caract\u00e8res au format <code>op\u00e9rande1 op\u00e9ration op\u00e9rande2</code> et retourne le r\u00e9sultat de cette op\u00e9ration.<ul> <li>les op\u00e9randes sont des entiers</li> <li>Op\u00e9ration est soit +, -, / ou *</li> <li>Vous pouvez utiliser <code>split</code> pour s\u00e9parer les diff\u00e9rentes parties</li> <li>Utilise les streams au maximum (utiliser les boucles au minimum)</li> </ul> </li> <li>Votre calculatrice m\u00e9morise toutes les op\u00e9rations et leurs r\u00e9sultats.</li> <li>Ecrire un programme Java qui permet de soit saisir un op\u00e9ration soit afficher l'historique des op\u00e9rations selon les commandes de l'utilisateur.<ul> <li>Si l'utilisateur saisit une op\u00e9ration du type <code>op\u00e9rande1 op\u00e9ration op\u00e9rande2</code>, afficher le r\u00e9sultat et l'ajouter \u00e0 l'historique.</li> <li>Si l'utilisateur saisit <code>h</code>, afficher l'historique des op\u00e9rations.</li> <li>Si l'utilisateur saisit <code>+</code>, <code>-</code>, , afficher l'historique des op\u00e9rations pour cette op\u00e9rande.</li> <li>Si l'utilisateur saisit <code>exit</code>, le programme s'arr\u00eate.</li> <li>Si l'utilisateur saisit un entier, sa valeur est affich\u00e9e et il est rajout\u00e9 dans l'historique</li> </ul> </li> <li>G\u00e9rer les exceptions, notamment celle li\u00e9es aux erreurs de saisie</li> </ul> exemple d'ex\u00e9cution<pre><code>#  '&gt;' signifie que c'est une entr\u00e9e de l'utilisateur. Ce n'est pas un symble \u00e0 inclure dans votre saisie\n&gt; 2 + 5\n7\n&gt; 100 - 2000\n-1900\n&gt; 42\n42\n&gt; h\n2 + 5 = 7\n100 - 2000 = -1900\n42\n&gt; +\n2 + 5 = 7\n&gt; toto\nsaisie incorrecte\n&gt; 88 - 33 * 2\nsaisie incorrecte\n&gt; exit\nbye bye\n</code></pre>"},{"location":"java/java-exercices-misc/#exercice-2","title":"Exercice 2","text":"<p>Pour cet exercice, cr\u00e9er le projet avec <code>gradle init</code> et utiliser les annotations li\u00e9es \u00e0 la null safety.</p> <ul> <li>Cr\u00e9er une classe Java <code>ImprovedIntCalculator</code> qui permet de faire des op\u00e9rations arithm\u00e9tiques sur des entiers \u00e0 partir d'une cha\u00eene de caract\u00e8res au format <code>op\u00e9rande1 op\u00e9ration op\u00e9rande2 op\u00e9ration2 op\u00e9rande3 ...</code> et retourne le r\u00e9sultat de cette op\u00e9ration.<ul> <li>les op\u00e9randes sont des entiers</li> <li>Les op\u00e9randes \u00e9crites avec l'identifiant mi ou i est un entier permet de remplacer mi par le r\u00e9sultat dans l'historique d'indice i.</li> <li>Op\u00e9ration est soit +, -, / ou *</li> <li>Utilise les streams au maximum (utiliser les boucles au minimum)</li> <li>/ et * sont plus prioritaires que + et -</li> </ul> </li> <li>Votre calculatrice m\u00e9morise toutes les op\u00e9rations et leurs r\u00e9sultats.</li> <li>Ecrire un programme Java qui permet de soit saisir un op\u00e9ration soit afficher l'historique des op\u00e9rations selon les commandes de l'utilisateur.<ul> <li>Si l'utilisateur saisit une op\u00e9ration du type <code>op\u00e9rande1 op\u00e9ration op\u00e9rande2</code>, afficher le r\u00e9sultat et l'ajouter \u00e0 l'historique.</li> <li>Si l'utilisateur saisit <code>h</code>, afficher l'historique des op\u00e9rations.</li> <li>Si l'utilisateur saisit <code>+</code>, <code>-</code>, , afficher l'historique des op\u00e9rations pour cette op\u00e9rande.</li> </ul> </li> <li>G\u00e9rer les exceptions, notamment celle li\u00e9es aux erreurs de saisie</li> </ul> exemple d'ex\u00e9cution<pre><code>#  '&gt;' signifie que c'est une entr\u00e9e de l'utilisateur. Ce n'est pas un symble \u00e0 inclure dans votre saisie\n&gt; 2 + 5\n7\n&gt; 100 - 2000 + 5\n-1895\n&gt; h\n2 + 5 = 7\n100 - 2000 + 5 = -1895\n&gt; +\n2 + 5 = 7\n100 - 2000 + 5 = -1895\n&gt; toto\nsaisie incorrecte\n&gt; 88 - 33 * 2\n22\n&gt; 88 - 33 * 2 / 3 + 5\n67\n&gt; 7 + m0\n14\n&gt; m2\n22\n&gt; exit\nbye bye\n</code></pre>"},{"location":"java/java-exercices-misc/#exercice-3","title":"Exercice 3","text":"<p>Kotlin Heroes 2024, Problem A: 1-3-5.</p> <p>In Berland, coins of worth 1, 3 and 5 burles are commonly used (burles are local currency).</p> <p>Eva has to pay exactly \ud835\udc5b burles in a shop. She has an infinite amount of coins of all three types. However, she doesn't like to pay using coins worth 1 burle \u2014 she thinks they are the most convenient to use.</p> <p>Help Eva to calculate the minimum number of coins worth 1 burle she has to use, if she has to pay exactly \ud835\udc5b burles. Note that she can spend any number of coins worth 3 and/or 5 burles.</p> <ul> <li>Input<ul> <li>The first line contains one integer \ud835\udc61 (1\u2264\ud835\udc61\u2264100 ) \u2014 the number of test cases.</li> <li>Each test case consists of one line, containing one integer \ud835\udc5b(1\u2264\ud835\udc5b\u2264100).</li> </ul> </li> <li>Output<ul> <li>For each test case, print one integer \u2014 the minimum number of 1-burle coins Eva has to use.</li> </ul> </li> </ul> input<pre><code>5\n7\n8\n42\n2\n11\n</code></pre> output<pre><code>1\n0\n0\n2\n0\n</code></pre>"},{"location":"java/java-exercices-streams/","title":"Exercices sur les streams","text":""},{"location":"java/java-exercices-streams/#exercices-sur-les-streams","title":"Exercices sur les streams","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> </ul>"},{"location":"java/java-exercices-streams/#exercice-1","title":"Exercice 1","text":"<ul> <li>On souhaite mod\u00e9liser une collection de consoles et jeux r\u00e9tro. Les consoles (classe <code>VideoGameConsole</code>) et les jeux r\u00e9tro (classe <code>VideoGame</code>) sont des appareils de divertissement ayant les propri\u00e9t\u00e9s: <code>name</code>, <code>releaseYear</code> en commun. Les consoles ont en plus la propri\u00e9t\u00e9: <code>companyName</code> (la soci\u00e9t\u00e9 qui l'a cr\u00e9\u00e9). Les jeux vid\u00e9os ont comme propri\u00e9t\u00e9 suppl\u00e9mentaire l'\u00e9diteur du jeu (celui qui le distribue) ainsi que son d\u00e9veloppeur. On aimerait aussi savoir s'il est ind\u00e9pendant ou pas.</li> <li>D\u00e9finir les classes n\u00e9cessaires.</li> <li>Chaque jeu vid\u00e9o tient une liste des consoles compatibles (pour les jeux cross-platform) via la propri\u00e9t\u00e9: <code>platforms</code>.</li> <li><code>VideoGameConsole</code> contient en plus la propri\u00e9t\u00e9: <code>companyName</code> de type string.</li> <li>Compl\u00e9ter la d\u00e9finition des classes et instancier les jeux et consoles suivantes:<ul> <li>Console: <code>name: My first 16 bit Console</code>, <code>releaseYear: 1987</code>, <code>companyName: SEGA</code></li> <li>Console: <code>name: Another 16 bit console</code>, <code>releaseYear: 1991</code>, <code>companyName: Nintendo</code></li> <li>Console: <code>name: Awesome 3D console</code>, <code>releaseYear: 1996</code>, <code>companyName: Sony</code></li> <li>Console: <code>name: 3D console with weird joystick</code>, <code>releaseYear: 1997</code>, <code>companyName: Nintendo</code></li> <li>Jeu: <code>name: Alex Kidd</code>, <code>releaseYear: 1988</code>, <code>publisher: SEGA</code></li> <li>Jeu: <code>name: Sonic</code>, <code>releaseYear: 1990</code>, <code>publisher: SEGA</code></li> <li>Jeu: <code>name: Mario RPG</code>, <code>releaseYear: 1996</code>, <code>publisher: Nintendo</code></li> <li>Jeu: <code>name: Final Fantasy 6</code>, <code>releaseYear: 1994</code>, <code>publisher: Square</code></li> </ul> </li> <li>En utilisant les streams:<ul> <li>Afficher les jeux sortis \u00e0 partir de l'ann\u00e9e 1990 tri\u00e9s par ordre croissant de l'ann\u00e9e.</li> <li>Afficher le nom des consoles de la compagnie SEGA.</li> <li>Afficher le nom des consoles dont le nom contient le mot 16 bits.</li> <li>Le nom du premier jeu sorti</li> <li>Trouver le nombre de jeux de chaque \u00e9diteur en calculant dictionnaire dont la cl\u00e9 est l'\u00e9diteur ou son nom et en valeur le nombre de jeux</li> <li>Pour chaque \u00e9diteur, l'ann\u00e9e de sortie du premier jeu en calculant dictionnaire dont la cl\u00e9 est l'\u00e9diteur ou son nom et en valeur une ann\u00e9e</li> </ul> </li> </ul> Corrig\u00e9 <pre><code>\n</code></pre> <pre><code>\n</code></pre>"},{"location":"java/java-exercices-streams/#exercice-2","title":"Exercice 2","text":"<p>Les m\u00e9thodes <code>Stream.iterate</code> et <code>Stream.generate</code> combin\u00e9es avec <code>limite</code> permettent de cr\u00e9er des streams. Voici quelques exemples d'utilisation de ces m\u00e9thodes: </p> <pre><code>// This will create a stream of 10 elements starting from -4 and incrementing by 2\nStream&lt;Integer&gt; streamIterated = Stream.iterate(-4, n -&gt; n + 2).limit(10);\nstreamIterated.forEach(System.out::println);\n\n// This will create a stream of 10 randome integers between 0 and 100\nStream&lt;Integer&gt; streamGenerated2 = Stream.generate(() -&gt; RandomGenerator.getDefault().nextInt(0, 100)).limit(10);\nstreamGenerated2.forEach(System.out::println);\n</code></pre> <p>R\u00e9pondez aux questions suivantes en utilisant les streams (pas de boucle <code>for</code>):</p> <ol> <li>Cr\u00e9er un Stream de 10 entiers al\u00e9atoires compris entre -10 et 10. Afficher la somme, le min, le max et les \u00e9l\u00e9ments sup\u00e9rieurs \u00e0 la moyenne.</li> <li>Cr\u00e9er un <code>Stream&lt;Character&gt;</code> qui g\u00e9n\u00e8re 10 voyelles al\u00e9atoires. Compter le nombre de fois qu'appara\u00eet la lettre <code>a</code>.</li> </ol>"},{"location":"java/java-exercices-streams/#exercice-3","title":"Exercice 3","text":"<p>La classe <code>IntStream</code> est une classe sp\u00e9cialis\u00e9e sur les streams d'entiers. Elle est \u00e9galement le r\u00e9sultat d'une conversion d'une string en stream (chaque caract\u00e8re est repr\u00e9sent\u00e9 par son code en entier). Voici quelques exemples d'utilisation de cette classe:</p> <pre><code>// This will create a stream of 10 elements starting from -4 and incrementing by 2\nIntStream streamIterated = IntStream.iterate(-4, n -&gt; n + 2).limit(10);\nstreamIterated.forEach(System.out::println);\n\n// This will create a stream of 10 randome integers between 0 and 100\nIntStream streamGenerated2 = IntStream.generate(() -&gt; RandomGenerator.getDefault().nextInt(0, 100)).limit(10);\nstreamGenerated2.forEach(System.out::println);\n\n//Convert a string to a stream of characters (each character is an integer)\nIntStream streamOfChars = \"hello\".chars();\nstreamOfChars.forEach(System.out::println);\n\n//count the number of l in a string\nlong count = \"hello\".chars().filter(ch -&gt; ch == 'l').count();\nSystem.out.println(count);\n</code></pre> <p>R\u00e9pondez aux questions suivantes en utilisant les streams (pas de boucle <code>for</code>):</p> <ol> <li>Calculer le nombre de voyelles dans une cha\u00eene de caract\u00e8res.</li> <li>G\u00e9n\u00e9rer un <code>IntStream</code> de 10 voyelles al\u00e9atoires. Compter le nombre de fois qu'appara\u00eet la lettre <code>a</code>.</li> <li>Calculer le nombre d'occurences de chaque lettre dans une cha\u00eene de caract\u00e8res.</li> </ol>"},{"location":"java/java-tour/","title":"Tour du langage Java","text":""},{"location":"java/java-tour/#tour-du-langage-java","title":"Tour du langage Java","text":"<p>Nous allons faire un tour du langage Java sans forc\u00e9ment tout couvrir car il est tr\u00e8s riche en fonctionnalit\u00e9s.</p> <p>Warning</p> <p>Comme le langage Java \u00e9volue apporte fr\u00e9quemment des am\u00e9lioration et simplifications, il se peut que les exemples de code vues ici soient diff\u00e9rents de ce que vous trouvez dans la litt\u00e9rature.</p>"},{"location":"java/java-tour/#premiers-pas","title":"Premiers pas","text":"Hello world<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\npublic class helloworld {\n\n  // main est appel\u00e9 un point d'entr\u00e9e\n  public static void main(String... args) {\n    out.println(\"Hello World\");\n  }\n}\n</code></pre> Premi\u00e8res instructions<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\nclass Calculator {\n  public int a;\n  public int b;\n  static double PI = 3.14;\n\n  public double add() {\n    return a + b + Calculator.PI;\n  }\n\n  static double multiply(int x, int y) {\n    return x * y * PI;\n  }\n}\n\nclass Calculator2 {\n  public int a;\n  public int b;\n\n  public int add() {\n    return a + b;\n  }\n}\n\npublic class hello {\n\n  public static void main(String... args) {\n    out.println(\"Hello World\");\n    // typage explicite (on donne le nom du type)\n    int i = 10;\n    long j = 1_000_000;\n    // var permet de faire du typage implicite (le type est d\u00e9duit par Java)\n    var message = \"hello\";\n    message = \"world\";\n\n    // Instruction ill\u00e9gale car java fait du typage statique\n    // -&gt; i est un entier et ne peut pas changer en String\n    // L'oppos\u00e9 de typage statique est typage dynamique\n    // i = \"Hello\";\n    // message = 10;\n\n    var c = new Calculator();\n    c.add();\n\n    Calculator.multiply(10, 1);\n  }\n}\n</code></pre> Op\u00e9rations de base<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\npublic class operators {\n\n  public static void main(String... args) {\n    // unary operator: takes one operand and return a value\n    System.out.println(+3);\n    int x = 55;\n    System.out.println(-x);\n    // Binary operator: takes two operands and returns a value\n    System.out.println(5 * 4);\n    System.out.println(-x / 4);\n    // % is the remainder of the division\n    System.out.println(9 % 2);\n    // Binary operators for comparison: &gt;, ==, !=, &lt;, &gt;=, &lt;= takes two comparable\n    // values (numbers and booleans in Java)\n    System.out.println(x &gt; 10);\n    // Unary operator for boolean algebra: !\n    boolean comparison = x % 5 == 0;\n    System.out.println(!comparison);\n  }\n}\n</code></pre> Types primitifs<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\npublic class BaseTypesDemo {\n  public BaseTypesDemo() {\n    System.out.println(\"Tour demo constructor\");\n  }\n\n  public void showSomeVariables() {\n    System.out.println(\"some vars\");\n    byte b = 10; // de -127 \u00e0 128. 1 octet\n    short s = 2; // -32,768 \u00e0 32,767. 2 octets\n    int i = 10; // -2^(31) \u00e0 2^(31)-1. 4 Octets (32 bits)\n    long l = 100_000_000; // -2^(63) \u00e0 2^(63) - 1. 8 octets (64 bits)\n    System.out.println(b);\n    String message = \"I love Java\";\n    String text = String.format(\"s = %d, i = %d, l = %d, message = %s\", s, i, l, message);\n    System.out.println(text);\n\n    // nombre \u00e0 virgule flottante. Attention \u00e0 la pr\u00e9cision !\n    float x = 10.1f;\n    double y = 10.1;\n    System.out.println(String.format(\"x: %.2f, y: %f\", x, y));\n    System.out.println(\"x: \" + x + \", y: \" + y);\n  }\n\n  public String getMessage() {\n    return \"Hello\";\n  }\n\n  public static void main(String[] args) {\n    System.out.println(\"Base types demo\");\n    BaseTypesDemo baseTypesDemo = new BaseTypesDemo();\n    baseTypesDemo.showSomeVariables();\n  }\n}\n</code></pre> Lire au clavier<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport java.util.Scanner;\n\npublic class ScannerDemo {\n\n  public static void main(String... args) {\n    Scanner scanner = new Scanner(System.in);\n    int p1 = scanner.nextInt();\n    System.out.println(p1);\n    if (p1 == 10) {\n      System.out.println(\"Is 10\");\n    } else {\n      System.out.println(\"Is not 10\");\n    }\n    float p2 = scanner.nextFloat();\n    System.out.println(p2);\n    String input = scanner.next();\n    if (input.equals(\"Java\")) {\n      System.out.println(\"I love Java\");\n    } else {\n      System.out.println(String.format(\"You love %s\", input));\n    }\n    // Fermer le scanner d\u00e8s qu'on n'en n'a plus besoin\n    scanner.close();\n  }\n}\n</code></pre> Nombres al\u00e9atoires<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport java.util.random.RandomGenerator;\n\npublic class RandomDemo {\n\n  public static void main(String... args) {\n    RandomGenerator randomGenerator = RandomGenerator.getDefault();\n    // i++ -&gt; i = i + 1 -&gt; i += 1\n    for (int i = 0; i &lt; 10; i++) {\n      int randomInt = randomGenerator.nextInt(1, 21);\n      System.out.println(randomInt);\n    }\n\n  }\n}\n</code></pre>"},{"location":"java/java-tour/#classes-heritage-et-interfaces","title":"Classes, h\u00e9ritage et interfaces","text":"<ul> <li>En java, une classe ne peut h\u00e9riter que d'une seule classe (h\u00e9ritage simple) et peut impl\u00e9menter (terme utilis\u00e9 quand une classe h\u00e9rite d'une interface) plusieurs interfaces.<ul> <li>Pour info, Python et C++ permettent l'h\u00e9ritage multiple.</li> </ul> </li> <li>Une classe qui impl\u00e9mente une interface doit impl\u00e9menter toutes les m\u00e9thodes de cette interface.</li> <li>Interface: une  classe o\u00f9 il n'y a que les synopsis des m\u00e9thodes dans leur impl\u00e9mentation.<ul> <li>Synopsis (ou la signature): le nom, les arguments et le type de retour de la m\u00e9thode</li> </ul> </li> <li>Les classes mod\u00e9lisent la relation \u00eatre, tandis que les interfaces mod\u00e9lisent des attributs, des traits ou des caract\u00e9ristiques.</li> <li>Visibilit\u00e9 des propri\u00e9t\u00e9s et m\u00e9thodes d'une classe:<ul> <li>Priv\u00e9 : <code>private</code> : visible uniquement dans la classe</li> <li>Public : <code>public</code> : visible dans tout le projet</li> <li>Prot\u00e9g\u00e9 : <code>protected</code> : visible dans la classe, les sous-classes et les classes du m\u00eame package</li> </ul> </li> </ul> <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\ninterface Gamer {\n  public void play();\n\n  public void takeABreak();\n}\n\ninterface HungryEater {\n  public void eat();\n}\n\nclass Human {\n  private String name;\n\n  public Human() {\n    this(\"anonymous\");\n  }\n\n  public Human(String name) {\n    this.name = name;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n}\n\nclass HumanGamer extends Human implements Gamer {\n  @Override\n  public void play() {\n    System.out.println(\"Je joue\");\n  }\n\n  @Override\n  public void takeABreak() {\n    System.out.println(\"Pause\");\n  }\n}\n\nclass HungryGamerHuman extends Human implements HungryEater, Gamer {\n\n  @Override\n  public void eat() {\n    System.out.println(\"Je mange en \u00e9tant affam\u00e9\");\n  }\n\n  @Override\n  public void play() {\n    System.out.println(\"Je joue mais j'ai faim\");\n  }\n\n  @Override\n  public void takeABreak() {\n    System.out.println(\"Je fais dodo\");\n  }\n}\n\nclass Lion implements HungryEater {\n  @Override\n  public void eat() {\n  }\n}\n\nclass Student extends Human {\n  private String idNumbeString;\n\n  public Student(String name, String idNumbeString) {\n    super(name);\n    this.idNumbeString = idNumbeString;\n  }\n\n  public String getIdNumberString() {\n    return idNumbeString;\n  }\n\n  public void setIdNumberString(String idNumbeString) {\n    this.idNumbeString = idNumbeString;\n  }\n}\n\npublic class ClasseInterface {\n\n  static void giveFood(HungryEater eater) {\n    System.out.println(\"miam mia pour un HungryEater\");\n    eater.eat();\n  }\n\n  static void runGame(Gamer gamer) {\n    System.out.println(\"Lancement d'un jeu\");\n    gamer.play();\n  }\n\n  public static void main(String... args) {\n    out.println(\"Hello World\");\n    HungryGamerHuman hungryGamerHuman = new HungryGamerHuman();\n    Lion lion = new Lion();\n\n    giveFood(hungryGamerHuman);\n    giveFood(lion);\n\n    runGame(hungryGamerHuman);\n  }\n}\n</code></pre>"},{"location":"java/java-tour/#les-record","title":"Les record","text":"<ul> <li>Un <code>record</code> est une classe qui ne peut pas \u00eatre \u00e9tendue et qui ne peut pas avoir de m\u00e9thodes abstraites.</li> <li>Il est utilis\u00e9 pour repr\u00e9senter des donn\u00e9es immuables.</li> <li>Les m\u00e9thodes <code>equals</code>, <code>hashCode</code> et <code>toString</code> sont automatiquement g\u00e9n\u00e9r\u00e9es par le compilateur.</li> </ul> <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\nclass ViennoiserieClass {\n  private String name;\n  private String texture;\n  private int price;\n\n  public ViennoiserieClass(String name, String texture, int price) {\n    this.name = name;\n    this.texture = texture;\n    this.price = price;\n  }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public String getTexture() {\n    return texture;\n  }\n\n  public int getPrice() {\n    return price;\n  }\n\n  @Override\n  public String toString() {\n    return String.format(\"name: %s, texture %s, price %d\", this.getName(), this.getTexture(), this.getPrice());\n  }\n\n  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 1;\n    result = prime * result + ((name == null) ? 0 : name.hashCode());\n    result = prime * result + ((texture == null) ? 0 : texture.hashCode());\n    result = prime * result + price;\n    return result;\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    ViennoiserieClass other = (ViennoiserieClass) obj;\n    if (name == null) {\n      if (other.name != null)\n        return false;\n    } else if (!name.equals(other.name))\n      return false;\n    if (texture == null) {\n      if (other.texture != null)\n        return false;\n    } else if (!texture.equals(other.texture))\n      return false;\n    if (price != other.price)\n      return false;\n    return true;\n  }\n\n}\n\n// Equivalent of the above class\nrecord Viennoiserie(String name, String texture, int price) {\n}\n\npublic class RecordDemo {\n\n  public static void main(String... args) {\n    Viennoiserie croissant1 = new Viennoiserie(\"Croissant\", \"Feuillet\u00e9e\", 100);\n    out.println(croissant1);\n    Viennoiserie croissant2 = new Viennoiserie(\"Croissant\", \"Feuillet\u00e9e\", 100);\n    out.println(croissant1);\n    Viennoiserie viennoiserie = new Viennoiserie(\"Pain au chocolat\", \"Feuillet\u00e9e\", 100);\n    Viennoiserie viennoiserie2 = new Viennoiserie(\"Chocolatine\", \"Feuillet\u00e9e\", 100);\n    Viennoiserie viennoiserie3 = new Viennoiserie(\"Petit pain\", \"Feuillet\u00e9e\", 100);\n    out.println(croissant1.equals(croissant2));\n    out.println(viennoiserie.equals(viennoiserie2));\n    out.println(viennoiserie2.equals(viennoiserie3));\n\n    // remove get from getters\n    System.out.println(\"price of croissant 1: \" + croissant1.price());\n  }\n}\n</code></pre>"},{"location":"java/java-tour/#collections","title":"Collections","text":"<ul> <li>Tableaux : Java propose plusieurs types pour travailler avec des tableaux (ou listes) d'objets. Voici les plus importants:<ul> <li>Tableau : <code>Array</code> : tableau de taille fixe.</li> <li>List : <code>List</code> : tableau de taille dynamique (on peut ajouter ou supprimer des \u00e9l\u00e9ments). On utilise g\u00e9n\u00e9ralement <code>List</code> en type de variable et <code>ArrayList</code> pour instancier un tableau dynamique.</li> </ul> </li> <li>Dictionnaire : Appel\u00e9 Map en Java, il permet de stocker des paires cl\u00e9-valeur. Il est possible d'utiliser n'importe quel type d'objet comme cl\u00e9 ou valeur. On utilise g\u00e9n\u00e9ralement <code>Map</code> en type de variable et <code>HashMap</code> pour instancier un dictionnaire.</li> <li>Les listes et les dictionnaires n'acceptent pas les types primitifs (ou les types de base) comme <code>int</code> et <code>double</code>, il faut passer par les types objets (comme <code>Integer</code> ou <code>Double</code>) pour les utiliser dans ces collections.</li> <li>L'it\u00e9rateur est un moyen alternatif de parcourir les \u00e9l\u00e9ments d'une collection sans avoir \u00e0 g\u00e9rer les indices.</li> </ul> <pre><code>///usr/bin/env jbang --enable-preview \"$0\" \"$@\" ; exit $?\n\nimport java.util.*;\nimport java.util.Map.Entry;\n\npublic class CollectionDemo {\n\n  public static void main(String... args) {\n    // Tableau cr\u00e9e avec [] a une taille fixe\n    int[] numbers = { 1, 20, 30 };\n    System.out.format(\"premier \u00e9l\u00e9ment %d, nombre d'\u00e9l\u00e9ments %d\\n\", numbers[0], numbers.length);\n    numbers[1] = -4;\n    System.out.format(\"Deuxi\u00e8me \u00e9l\u00e9ment apr\u00e8s modification %d\\n\", numbers[1]);\n    // boucle for classique\n    for (int i = 0; i &lt; numbers.length; i++) {\n      System.out.format(\"%d, \", numbers[i]);\n    }\n    System.out.println();\n    // boucle for each\n    for (int number : numbers) {\n      System.out.format(\"%d, \", number);\n    }\n    System.out.println();\n\n    List&lt;Integer&gt; items = new ArrayList&lt;&gt;();\n    items.add(-3);\n    items.add(11);\n    items.add(22);\n    for (int k = 0; k &lt; items.size(); k++) {\n      System.out.format(\"%d, \", items.get(k));\n    }\n    System.out.println();\n    var otherItems = List.of(-2, 11, 22);\n    for (Integer otherItem : otherItems) {\n      System.out.format(\"%d, \", otherItem);\n    }\n    System.out.println();\n    // Conversion d'une liste en tableau (array)\n    // (Integer[]) ... s'appelle du casting -&gt; forcer le type d'une expression\n    Integer[] arrayOfItems = items.toArray(new Integer[items.size()]);\n    System.out.println(arrayOfItems[0]);\n    // Conversion d'un array d'un type objet en list\n    List&lt;Integer&gt; listOfNumbers1 = Arrays.asList(arrayOfItems);\n    List&lt;Integer&gt; listOfNumbers2 = Arrays.stream(arrayOfItems).toList();\n    System.out.format(\"listOfNumbers1 size %d\\n\", listOfNumbers1.size());\n    System.out.format(\"listOfNumbers2 size %d\\n\", listOfNumbers2.size());\n\n    Iterator&lt;Integer&gt; iter = items.iterator();\n    System.out.format(\"next: %d, has next ? %b\\n\", iter.next(), iter.hasNext());\n    System.out.format(\"next: %d, has next ? %b\\n\", iter.next(), iter.hasNext());\n    System.out.format(\"next: %d, has next ? %b\\n\", iter.next(), iter.hasNext());\n    System.out.println();\n    System.out.println(\"Iter for loop\");\n    for (var iter2 = items.iterator(); iter2.hasNext();) {\n      Integer value = iter2.next();\n      System.out.print(value + \", \");\n    }\n    System.out.println();\n    System.out.println(\"for each utilise un it\u00e9rateur derri\u00e8re les rideaux\");\n    for (Integer item : items) {\n      System.out.print(item + \", \");\n    }\n    System.out.println();\n\n    System.out.println(\"Map\");\n    // 6786L =&gt; Lit\u00e9ral de type long (type de base)\n    Map&lt;String, Long&gt; userIds = Map.of(\"Hugo\", 6786L, \"R\u00e9my\", 343L);\n    System.out.println(userIds.get(\"R\u00e9my\"));\n    for (var userIdEntry : userIds.entrySet()) {\n      System.out.print(userIdEntry.getKey() + \"-&gt;\" + userIdEntry.getValue());\n      System.out.print(\", \");\n    }\n    System.out.println();\n\n    Map&lt;String, Long&gt; mutableUserIds = new HashMap&lt;&gt;(userIds);\n    mutableUserIds.put(\"toto\", 3L);\n    for (var userIdEntry : mutableUserIds.entrySet()) {\n      System.out.print(userIdEntry.getKey() + \"-&gt;\" + userIdEntry.getValue());\n      System.out.print(\", \");\n    }\n    System.out.println();\n\n    Iterator&lt;Entry&lt;String, Long&gt;&gt; iterUserIds = userIds.entrySet().iterator();\n    System.out.println(iterUserIds.next() + \", \" + iterUserIds.hasNext());\n    var entry = iterUserIds.next();\n    System.out.println(entry.getKey() + \"-&gt;\" + entry.getValue() + \", \" + iterUserIds.hasNext());\n  }\n}\n</code></pre>"},{"location":"java/java-tour/#types-generiques","title":"Types g\u00e9n\u00e9riques","text":"<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\nimport java.util.*;\n\nclass IntegerCalculator {\n  private Integer x;\n\n  public IntegerCalculator(Integer x) {\n    this.x = x;\n  }\n\n  Integer add(Integer b) {\n    x += b;\n    return x;\n  }\n\n  boolean isPositive() {\n    return x &gt;= 0;\n  }\n}\n\nclass GenericCalculator&lt;Toto extends Number&gt; {\n  private Toto x;\n\n  public GenericCalculator(Toto x) {\n    this.x = x;\n  }\n\n  boolean isPositive() {\n    return x.doubleValue() &gt;= 0;\n  }\n}\n\npublic class GenericsDemo {\n\n  public static void main(String... args) {\n    var c1 = new GenericCalculator&lt;Integer&gt;(Integer.valueOf(10));\n\n    List&lt;String&gt; items = new ArrayList&lt;&gt;();\n    // Java d\u00e9duit que le type du g\u00e9n\u00e9rique est \"Integer\"\n    var integers = List.of(Integer.valueOf(19));\n    System.out.println(integers);\n  }\n}\n</code></pre>"},{"location":"java/java-tour/#programmation-fonctionnelle","title":"Programmation fonctionnelle","text":"<ul> <li>Les fonctions sont des \u00e9l\u00e9ments de premi\u00e8re classe : Les fonctions sont comme des variables</li> <li>Utilisation intensive de fonctions pures : fonction sans effet de bord, toujours le m\u00eame r\u00e9sultat pour les m\u00eames entr\u00e9es<ul> <li>exemples de fonctions par pure: <code>print</code> (car elle change la console)</li> </ul> </li> <li>Immutabilit\u00e9<ul> <li>On ne peut pas changer la valeur d'une variable une fois initialis\u00e9e</li> <li>On ne peut pas changer les propri\u00e9t\u00e9s d'un object une fois instanci\u00e9</li> <li>On ne peut pas ajouter ou supprimer des \u00e9l\u00e9ments d'une collection</li> </ul> </li> <li>On le code est d\u00e9velopp\u00e9 sous forme d'une cha\u00eene de traitements (comme dans une usine)</li> </ul>"},{"location":"java/java-tour/#relation-entre-la-poo-et-la-programmation-fonctionnelle","title":"Relation entre la POO et la programmation fonctionnelle","text":"<ul> <li>La POO est la prog. fonctionnelle ne sont pas mutuellement exclusifs</li> <li>On peut d\u00e9velopper en POO avec un style fonctionnelle:<ul> <li>Les m\u00e9thodes ne font pas de mutation de champs de l'objet</li> <li>Les propri\u00e9t\u00e9s sont uniquement en read-only</li> <li>Les <code>records</code> simplifient la cr\u00e9ation de ce genre de classes</li> </ul> </li> </ul>"},{"location":"java/java-tour/#interfaces-fonctionnelles","title":"Interfaces fonctionnelles","text":"<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\nimport static java.lang.System.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Predicate;\n\n// L'inteface semble optionnelle\n@FunctionalInterface\ninterface MyCustomBiPredicate {\n  boolean doSomething(int a, int b);\n}\n// equivalent en Kotlin typealias MyCustomPredicate = (Int, Int) -&gt; Boolean ou\n// (Int, Int) -&gt; Boolean\n\npublic class FunctionalInterfaceDemo {\n  static boolean returnFalse(int a, int b) {\n    return false;\n  }\n\n  // Higher order function: a function that takes as argument another function\n  static void callPredicate(MyCustomBiPredicate p) {\n    System.out.println(p.doSomething(10, 0));\n    System.out.println(p.doSomething(0, 0));\n  }\n\n  static List&lt;String&gt; filter(List&lt;String&gt; items, Predicate&lt;String&gt; predicate) {\n    List&lt;String&gt; results = new ArrayList&lt;&gt;();\n    for (String item : items) {\n      if (predicate.test(item)) {\n        results.add(item);\n      }\n    }\n    return results;\n  }\n\n  public static void main(String... args) {\n    MyCustomBiPredicate p = (a, b) -&gt; a &gt; b;\n    System.out.println(p.doSomething(10, 20));\n    p = FunctionalInterfaceDemo::returnFalse;\n    System.out.println(p.doSomething(111, 0));\n\n    callPredicate(p);\n    callPredicate(FunctionalInterfaceDemo::returnFalse);\n    callPredicate((a, b) -&gt; a &gt; b);\n\n    Predicate&lt;Integer&gt; multipleOfThreePredicate = (a) -&gt; a % 3 == 0;\n    Predicate&lt;String&gt; isEmptyPredicate = (s) -&gt; s.length() == 0;\n    System.out.println(multipleOfThreePredicate.test(21));\n    System.out.println(multipleOfThreePredicate.test(65));\n    System.out.println(isEmptyPredicate.test(\"Hello\"));\n    System.out.println(isEmptyPredicate.test(\"\"));\n\n    List&lt;String&gt; words = List.of(\"I\", \"Love\", \"Java\", \"2024\");\n    List&lt;String&gt; items1 = filter(words, (word) -&gt; word.length() == 4);\n    System.out.println(String.join(\" - \", items1));\n    List&lt;String&gt; items2 = filter(words, (w) -&gt; w.charAt(0) == 'J');\n    System.out.println(String.join(\" - \", items2));\n  }\n}\n</code></pre> <p>Equivalent en Kotlin:</p> <pre><code>fun doSomething(a: Int, b: Int) = a &gt; b\n\nclass EntertainmentDevice(val name: String, var releaseYear: Int) {\n  val isAfter2000: Boolean\n    get() = releaseYear &gt;= 2000\n}\n\ntypealias MyCustomPredicate = (Int, Int) -&gt; Boolean\n\nfun main() {\n  val p = ::doSomething\n  println(p(10, 20))\n\n  val p2: (Int, Int) -&gt; Boolean = ::doSomething\n  println(p2(10, 20))\n\n  val p3: MyCustomPredicate = ::doSomething\n}\n</code></pre> <p>Liste des interfaces fonctionnelles pr\u00e9d\u00e9finies qui sont s\u00e9par\u00e9es en 4 cat\u00e9gories:</p> <ul> <li>Consumer : Fonction qui prend des arguments g\u00e9n\u00e9riques et ne renvoie rien (type de retour void)</li> <li>Supplier : Fonction qui ne prend aucun argument et renvoie un valeur dont le type est g\u00e9n\u00e9rique</li> <li>Function : Fonction qui peut prendre des arguments g\u00e9n\u00e9riques et retourne une valeur g\u00e9n\u00e9rique.</li> <li>Predicate : Fonction qui peut prendre des arguments g\u00e9n\u00e9riques et retour un bool\u00e9en. Un predicate peut \u00eatre consid\u00e9r\u00e9 comme un cas particulier d'une Function dont le type de retour est un bool\u00e9en.</li> </ul> <p>La convention est de rajouter le terme bi pour les fonctions avec deux arguments (comme <code>BiPredicate</code>). Voici des exemples de d\u00e9finition de quelques interfaces fonctionnelles:</p> <pre><code>@FunctionalInterface\npublic interface Consumer&lt;T&gt; {\n    void accept(T t);\n}\n\n@FunctionalInterface\npublic interface Supplier&lt;T&gt; {\n    T get();\n}\n\npackage java.util.function;\n@FunctionalInterface\npublic interface Function&lt;T, R&gt; {\n    R apply(T t);\n}\n\n@FunctionalInterface\npublic interface BiFunction&lt;T, U, R&gt; {\n    R apply(T t, U u);\n}\n\n@FunctionalInterface\npublic interface Predicate&lt;T&gt; {\n    boolean test(T t);\n}\n</code></pre>"},{"location":"java/java-tour/#streams","title":"Streams","text":"<p>Permettent de manipuler des collections de tailles arbitraires de mani\u00e8re d\u00e9clarative.</p> <pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\n//https://navin-moorthy.github.io/blog/map-filter-reduce-animated/\n\nimport static java.lang.System.*;\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class StreamDemo {\n\n  public static void main(String... args) {\n    out.println(\"Hello World\");\n    Stream&lt;Integer&gt; numbers = Stream.of(1, 2, 3, 4, 100);\n    // Imperative programming style: describe how to do\n    List&lt;Integer&gt; r = new ArrayList&lt;&gt;();\n    for (Integer number : numbers.toList()) {\n      if (number % 2 == 0) {\n        r.add(number);\n      }\n    }\n    numbers = Stream.of(1, 2, 3, 4, 100);\n    // Style d\u00e9claratif: describe what we want to do\n    var filteredNumbers = numbers.filter((n) -&gt; n % 2 == 0);\n    var doubleNumbers = filteredNumbers.map((n) -&gt; n * 2);\n    var sum = doubleNumbers.reduce(Integer::sum);\n    System.out.println(sum);\n\n    var otherNumbers = Stream.of(1, 2, 3, 4, 100);\n    var result = otherNumbers\n        .filter((n) -&gt; n % 2 == 0)\n        .map((n) -&gt; n * 2)\n        .reduce((acc, value) -&gt; acc + value);\n\n    System.out.println(result);\n\n    List&lt;Integer&gt; evenNumbers = Stream.of(1, 2, 3, 4, 100)\n        .filter((n) -&gt; n % 2 == 0).toList();\n\n    List&lt;Integer&gt; doubledEvens = evenNumbers.stream().map((n) -&gt; n * 2).toList();\n    var stringDoubles = doubledEvens.stream().map((n) -&gt; n.toString()).toList();\n    System.out.println(String.join(\", \", stringDoubles));\n  }\n}\n</code></pre> <p>Une documentation plus compl\u00e8te est propos\u00e9e le site de baeldung</p>"},{"location":"java/java-tour/#null-safety","title":"Null safety","text":"<p>D\u00e9finition: la null safety est toute fonctionnalit\u00e9 qui permet de ne plus avoir de null pointer exception \u00e0 l'ex\u00e9cution.</p> <p>Java propose deux possibilit\u00e9s pour aovir une sorte de null safety qui ne sont moins puissantes que ce que l'on peut trouver dans d'autres langages comme Kotlin, Swift ou TypeScript par exemple.</p> Type optionnel<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\n// Optional&lt;T&gt; permet d'englober une valeur et fournit des m\u00e9thodes pour la r\u00e9cup\u00e9rer si elle est pr\u00e9sente\n// - Attention: l'objet Optionnel en lui-m\u00eame peut \u00eatre null\n// - En plus, on peut r\u00e9cup\u00e9rer la valeur contenue m\u00eame si elle est null et on aura une exception autre que la NPE\n\nimport static java.lang.System.*;\nimport java.util.*;\n\npublic class OptionalDemo {\n\n  static String getFromInternet() {\n    return \"dsfsdfdsf\";\n  }\n\n  static Optional&lt;String&gt; getFromInternetOpt() {\n    return Optional.of(\"dsfsdfdsf\");\n  }\n\n  public static void main(String... args) {\n    out.println(\"Hello World\");\n\n    Optional&lt;String&gt; myOptionalText = Optional.empty();\n    if (myOptionalText.isPresent()) {\n      System.out.println(myOptionalText.get());\n    }\n    var optioanlValue = getFromInternetOpt();\n    if (optioanlValue.isPresent()) {\n      System.out.println(optioanlValue.get());\n    }\n  }\n}\n</code></pre> Annotations null<pre><code>/*\n * This source file was generated by the Gradle 'init' task\n */\npackage org.example;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.annotation.Nonnull;\nimport javax.annotation.Nullable;\n\n// Les annotations de nullabilit\u00e9 sont trait\u00e9es par certains IDE et outils pour s'assurer avant la compilation qu'il n'y aura pas de NPE\n// Les IDE g\u00e9n\u00e8rent g\u00e9n\u00e9ralement un avertissement et non une erreur\n// Ces annotations sont ignor\u00e9es par le compilateur Java (au moins jusqu'\u00e0 la version 21)\n// Il y a aussi une multitude d'annotations fournies par diff\u00e9rentes librairies qui peuvent cr\u00e9er de la confusion\n\npublic class App {\n\n  @Nonnull\n  private List&lt;String&gt; items;\n\n  @Nonnull\n  List&lt;String&gt; getItems() {\n    return this.items;\n  }\n\n  public App() {\n    this.items = new ArrayList&lt;&gt;();\n  }\n\n  @Nonnull\n  public String getGreeting() {\n    return \"dsfsdfd\";\n  }\n\n  @Nonnull\n  public String getValue(@Nullable String value) {\n    if (value != null) {\n      return value.toUpperCase();\n    }\n    return \"\";\n  }\n\n  public static void main(String[] args) {\n    @Nonnull\n    App app = new App();\n\n    app.getValue(null);\n\n    System.out.println(app.getItems().size());\n    app.getItems().add(null);\n    app.getItems().add(\"toto\");\n    System.out.println(app.getItems().size());\n  }\n}\n</code></pre>"},{"location":"java/java-tour/#les-exceptions","title":"Les exceptions","text":"<p>Les exceptions sont des retours alternatifs d'une m\u00e9thode qui permettent de signaler une erreur. L'\u00e9quivalent du <code>return</code> pour les exceptions est <code>throw</code> en java. Il permet de sortir de la fonction tout en retournant une valeur. Cette valeur doit h\u00e9riter de la classe <code>Throwable</code> et peut \u00eatre r\u00e9cup\u00e9r\u00e9e via un block <code>try-catch</code>.</p>"},{"location":"java/javafx/","title":"JavaFX","text":""},{"location":"java/javafx/#javafx","title":"JavaFX","text":"<ul> <li>Site officiel: openjfx.io</li> <li>Cr\u00e9er une projet avec JBang : <code>jbang init --template javafx@yostane jfx.java</code></li> </ul>"},{"location":"java/javafx/#demo","title":"D\u00e9mo","text":"<pre><code>///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n\n//DEPS org.openjfx:javafx-controls:23\n//DEPS org.openjfx:javafx-graphics:23:${os.detected.jfxname}\n//DEPS org.openjfx:javafx-fxml:23\n\n//FILES JavaFX_Logo.png\n\nimport java.net.URL;\n\nimport javafx.application.Application;\nimport javafx.geometry.Pos;\nimport javafx.scene.control.Label;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport java.io.IOException;\n\npublic class HellojfxApp extends Application {\n  private Scene scene;\n\n  @Override\n  public void start(Stage stage) throws IOException {\n    String javaInfoString = String.format(\"Java: %s, %s , %s\",\n        System.getProperty(\"java.version\"),\n        System.getProperty(\"java.vendor\"),\n        System.getProperty(\"java.vm.version\"));\n    String jfxInfoString = String.format(\"JavaFX: %s\", System.getProperty(\"javafx.version\"));\n\n    URL imageURL = getClass().getResource(\"JavaFX_Logo.png\");\n    ImageView imageView = new ImageView(new Image(imageURL.openStream()));\n    imageView.setPreserveRatio(true);\n    imageView.setFitWidth(300);\n\n    VBox holder = new VBox();\n    holder.setFillWidth(true);\n    holder.setAlignment(Pos.TOP_CENTER);\n    holder.setSpacing(5);\n    holder.getChildren().addAll(\n        new Label(javaInfoString),\n        new Label(jfxInfoString),\n        imageView);\n\n    scene = new Scene(holder, 400, 300);\n    stage.setTitle(\"JavaFX Demo\");\n    stage.setScene(scene);\n    stage.show();\n  }\n\n  public static void main(String[] args) {\n    launch();\n  }\n}\n</code></pre>"},{"location":"java/javafx/#editeur-visuel","title":"Editeur visuel","text":"<ul> <li>Editeur visuel propos\u00e9 par Gluon ou bien</li> </ul> <pre><code>scoop bucket add extras\nscoop install scene-builder\n</code></pre>"},{"location":"java/jee/","title":"Jee","text":""},{"location":"java/jee/#jee","title":"JEE","text":"<p>A compl\u00e9ter</p>"},{"location":"js/","title":"Cours de JavaScript et TypeScript","text":""},{"location":"js/#cours-de-javascript-et-typescript","title":"Cours de JavaScript et TypeScript","text":"<p>Bienvenue au support de cours.</p> <p></p>"},{"location":"js/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>VScode et les extensions suivantes: ESLint, Prettier et indent-rainbow.</li> </ul>"},{"location":"js/js/","title":"Langage JavaScript / TypeScript","text":""},{"location":"js/js/#langage-javascript-typescript","title":"Langage JavaScript / TypeScript","text":""},{"location":"js/js/#tour-dhorizon","title":"Tour d'horizon","text":"tour<pre><code>const x = 10;\nconsole.log(\"hello\", x);\n\nlet y = 20;\nconsole.log(y, \"type de y:\", typeof y);\ny = \"hello\";\nconsole.log(y, \"type de y:\", typeof y);\n\nfunction printTypeOf(x) {\n  console.log(x, \"type de x:\", typeof x);\n}\n\nprintTypeOf(20.5);\nprintTypeOf(new Date(\"2005-02-15\"));\nprintTypeOf(true);\nprintTypeOf([\"Hello\", \"JS\"]);\n// objet lit\u00e9ral\nprintTypeOf({\n  language: \"JS\",\n  year: 2024\n});\n// JSON: JavaScript Object Notation\nprintTypeOf({\n  \"language\": \"JS\",\n  \"year\": 2024\n});\n\nfunction varDemo() {\n  x = 10\n  console.log(x);\n  var x;\n  // let x;\n}\n\nvarDemo();\n\nlet z;\nconsole.log(z);\nz = null;\nconsole.log(z);\nprintTypeOf();\n</code></pre> Filter et map<pre><code>const numbers = [2, 5, 8, -7];\n\n// garder uniquement les nombres pairs et les doubler\nconst resultNumbers: number[] = []; // en TS et JS, il n'y a que des numbers (pas de distinction int et float)\n\nfor (const number of numbers) {\n  if (number % 2 === 0) {\n    resultNumbers.push(number * 2);\n  }\n}\nconsole.log(numbers, resultNumbers);\n\n// un pr\u00e9dicat: une fonction qui retourne un bool\u00e9en\n// filter appelle le pr\u00e9dicat sur chaque \u00e9l\u00e9ment, et garde ceux dont le r\u00e9sultat est true\nconst evenNumbers = numbers.filter((number) =&gt; number % 2 === 0);\nconsole.log(\"even numbers\", evenNumbers);\nconst resultNumbers2 = evenNumbers.map((number) =&gt; number * 2);\nconsole.log(\"result 2\", resultNumbers2);\n// Style d\u00e9claratif: qui exprime l'intention\nconst resultNumbers3 = numbers\n  .filter((number) =&gt; number % 2 === 0)\n  .map((number) =&gt; number * 2);\nconsole.log(\"result 3\", resultNumbers2);\n\nconst texts = [\"I\", \"love\", \"JavaScript\", \"and\", \"TypeScript\"];\n// map peut retourner un autre type que la source\nconsole.log(\n  \"texts lengths\",\n  texts.map((text) =&gt; text.length)\n);\n</code></pre>"},{"location":"js/js/#exercices","title":"Exercices","text":"<p>Utiliser <code>filter</code> et <code>map</code> et les objets litt\u00e9raux.</p> <ol> <li>Cr\u00e9er une fonction qui prend un tableau d'entiers et retourne le triple des \u00e9l\u00e9ments pairs et le double des \u00e9l\u00e9ments impairs.</li> <li>Cr\u00e9er une fonction qui prend un tableau de cha\u00eenes de caract\u00e8res et retourne un tableau contenant la longueur de chaque cha\u00eene.<ul> <li>Par exemple pour <code>['un', 'deux']</code> on obtient <code>[2, 4]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend un tableau de cha\u00eenes de caract\u00e8res et retourne un tableau d'objets avec le format suivant: <code>[{text: 'valeur du texte', length: 4}, ...]</code><ul> <li>Par exemple pour <code>['un', 'deux']</code> on obtient <code>[ { text: 'un', length: 2 }, { text: 'deux', length: 4 } ]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui tableau d'objets avec le format suivant <code>[{text: 'valeur du texte', length: 4}, ...]</code> et affiche dans la console deux tableaux: un avec les textes et un avec les longueurs.<ul> <li>Par exemple pour <code>[ { text: 'un', length: 2 }, { text: 'deux', length: 4 } ]</code> on obtient l'affichage suivant dans la console: <code>['un', 'deux'] [2, 4]</code></li> </ul> </li> <li>Refaire le m\u00eame exercice que pr\u00e9c\u00e9demment mais ignorant les mots dont la longueur est un nombre premier (il ne figurant pas dans l'affichage final).<ul> <li>Par exemple pour <code>[ { text: 'aa', length: 2 }, { text: 'bbbb', length: 4 }, { text: 'ccccc', length: 5 } ]</code> on obtient l'affichage suivant dans la console: <code>['bbbb'] [4]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend deux arguments: un tableau d'objets Todo <code>[{id:1, title:\"..\", completed: true/false}, ...]</code> et un entier. La fonction doit retourner le tableau de Todos en basculant (toggle) le statut de <code>completed</code> pour le Todo dont l'id est \u00e9gal \u00e0 l'entier pass\u00e9 en argument.<ul> <li>Par exemple pour <code>[{id:1, title:\"..\", completed: true}, {id:2, title:\"..\", completed: false}]</code> et <code>2</code> on obtient <code>[{id:1, title:\"..\", completed: true}, {id:2, title:\"..\", completed: true}]</code></li> <li>Par exemple pour <code>[{id:1, title:\"..\", completed: true}, {id:2, title:\"..\", completed: false}]</code> et <code>1</code> on obtient <code>[{id:1, title:\"..\", completed: false}, {id:2, title:\"..\", completed: false}]</code></li> </ul> </li> <li>Cr\u00e9er une fonction qui prend un tableau d'objets Todo (voir exo pr\u00e9c\u00e9dent) et renvoie le titre des todos termin\u00e9s.<ul> <li>Par exemple: <code>[{id:1, title:\"Todo 1\", completed: true}, {id:2, title:\"Todo 2\", completed: false}]</code> on obtient <code>['Todo 1']</code></li> </ul> </li> </ol>"},{"location":"js/js/#astuces","title":"Astuces","text":"<ul> <li>Si besoin, vous pouvez utiliser Math.random, pour g\u00e9n\u00e9rer des nombres al\u00e9atoires.</li> </ul>"},{"location":"js/projets/","title":"Projets","text":""},{"location":"js/projets/#projets","title":"Projets","text":""},{"location":"js/projets/#projet-crud-avec-reactjs","title":"Projet CRUD avec ReactJS","text":"<p>R\u00e9aliser une application CRUD avec le th\u00e8me de votre choix.</p> <ul> <li>Fonctionnalit\u00e9s vues en cours appliqu\u00e9es \u00e0 votre projet (5 pts)</li> <li>Authentification</li> <li>R\u00f4le \"utilisateur\" connect\u00e9</li> <li>Ajout / suppression de favoris</li> <li>Affichage et suppression d'\u00e9l\u00e9ments</li> <li>Utiliser les services BDD et authent de Firebase</li> <li>Utiliser Firebase hosting pour h\u00e9berger le site.</li> <li>Proposer 2 \u00e9crans suppl\u00e9mentaires (via le routage)</li> <li>Ecran de profil (2 pts)</li> <li>Ecran des favoris de l'utilisateur connect\u00e9 (3 pts)</li> <li>Ajouter une gestion des r\u00f4les suivants (en plus du r\u00f4le \"utilisateur\" d\u00e9j\u00e0 pr\u00e9sent):</li> <li>Invit\u00e9 (non connect\u00e9) qui peut lister uniquement (2 pts)</li> <li>Administrateur qui peut supprimer et \u00e9diter des donn\u00e9es (4 pts)</li> <li>Belle interface et plus travaill\u00e9e par rapport au projet vu en cours (4 pts)</li> <li>Pour chaque bogue trouv\u00e9, il y aura des points en moins.</li> </ul> <p>Il est possible de se faire aider par de l'IA g\u00e9n\u00e9rative de fa\u00e7on raisonnable (tant qu'on arrive \u00e0 expliquer le code correctement). Par contre, il n'est pas autoris\u00e9 de rendre le r\u00e9sultat d'un tutoriel (sinon, la note sera de 0)</p>"},{"location":"js/projets/#veterlib","title":"veterlib","text":"<p>R\u00e9aliser un application de prise de rdv pour animaux chez un v\u00e9t\u00e9rinaire.</p> <ul> <li>On peut s'inscrire en tant que v\u00e9t\u00e9rinaire ou patient</li> <li>Les patients peuvent prendre un rdv aupr\u00e8s d'un v\u00e9to</li> <li>L'API permet de listes les cr\u00e9neaux disponible par jour et par v\u00e9t\u00e9rinaire</li> <li>Un v\u00e9t\u00e9rinaire peut demande son agenda \u00e0 l'API</li> <li>Hypoth\u00e8ses:</li> <li>Les rdv durent 30m</li> <li>Les v\u00e9t\u00e9rinaires travaillent du lundi au vendredi de 9h \u00e0 18h non stop</li> </ul>"},{"location":"js/projets/#project-dapi-de-gestion-de-fichiers-de-type-drive","title":"Project d'API de gestion de fichiers de type \"Drive\"","text":""},{"location":"js/projets/#sujet","title":"Sujet","text":"<ul> <li>L'utilisateur doit avoir un compte ou cr\u00e9er un compte pour utiliser le service</li> <li>Possibilit\u00e9 d'uploader, t\u00e9l\u00e9charger, modifier et supprimer les fichiers</li> <li>Possibilit\u00e9 de cr\u00e9er des dossiers et de placer les fichiers dans les dossiers</li> <li>Possibilit\u00e9 de partager des fichiers pour d'autres utilisateurs via leur email</li> <li>Lien de partage public et g\u00e9n\u00e9ration de l'image QRCode de ce lien</li> </ul>"},{"location":"js/projets/#outils-et-librairies-utilises","title":"Outils et librairies utilis\u00e9s","text":"<ul> <li>jest est une librairie test runner et un test runner</li> <li>Librairie test: permet de d\u00e9finir des tests dans le code (<code>expect</code>, <code>test</code>, etc.)</li> <li>Test runner: permet d'ex\u00e9cuter des tests et de g\u00e9n\u00e9rer un rapport \u00e0 la fin</li> <li>prettier et .prettierrc: permet d'automatiquement appliquer des convention de programmation.</li> <li>TypeScript et son fichier de configuration tsconfig.json</li> <li>docker-compose.yml permet de configurer l'image BDD postgres utilis\u00e9e pour l'environnement de dev</li> <li>Installer docker et docker-composer ou podman et podman-compose</li> <li>Instructions pour podman: <code>scoop install podman</code> puis <code>pip3 install podman-compose</code> ou <code>pip install -r requirements.txt</code></li> <li>dotenvx permet d'avoir plusieurs fichiers d'environnements. Consulter la partie <code>scripts</code> dans package.json pour voir des exemples d'utilisation (exemple plus bas en annexe).</li> <li>sequelize-typescript est un ORM bas\u00e9 sur sequelize et optimis\u00e9 pour TypeScript.</li> <li><code>tsoa</code> (json open api) + Swagger UI. tsoa permet de g\u00e9n\u00e9rer la documentation de l'API au formats openAPI ou swagger. Swagger UI permet de g\u00e9n\u00e9rer l'interface web qui permet d'explorer</li> <li>tuto1</li> <li><code>Concurrently</code> permet de de lancer deux plusieurs t\u00e2ches en temps. Il nous sert \u00e0 lancer en m\u00eame temps la g\u00e9n\u00e9ration du fichier openAPI et l'ex\u00e9cution du serveur de dev.</li> <li>Utiliser sequelize-typescript pour une meilleure int\u00e9gration avec tsoa compar\u00e9 \u00e0 sequelize</li> <li>Journalisation des appels avec le middleware Morgan</li> <li>Gestion du content-type de type <code>multipart/form-data</code> avec multer. Cette librairie permet de r\u00e9cup\u00e9rer certaines parties du body dans dans des fichiers, ce qui est utile pour impl\u00e9menter la fonctionnalit\u00e9 d'upload.</li> <li>Passport.js et passport-jwt, permettent de rajouter un middleware qui v\u00e9rifie la pr\u00e9sence du token jwt dans le header <code>Authorization</code> sur les routes qu'on souhaite prot\u00e9ger. Il nous donne ainsi la possibilit\u00e9 de renseigner le champ <code>req.user</code> avec l'utilisateur courant.</li> <li>jsonwebtoken permet de g\u00e9n\u00e9rer un JWT</li> <li>Penser \u00e0 faire un <code>npm i --save-dev @types/[librariejs]</code> pour qu'elle soit mieux reconnue et document\u00e9e quand on code en TypeScript. Par exemple <code>npm i --save-dev @types/morgan @types/jsonwebtoken</code>.</li> </ul>"},{"location":"js/projets/#annexe","title":"Annexe","text":"<ul> <li>Exemple de fichier de configuration d'un environnement de dev</li> </ul> <pre><code>ENVIRONMENT=dev\nDB_DIALECT=postgres\nDB_USER=dev_user\nDB_PASSWORD=dev_pwd\nDB_DATABASE=awesomeapi\n</code></pre> <ul> <li>Exemple d'interface swagger</li> </ul>"},{"location":"js/projets/#project-dapi-de-gestion-de-fichiers-simple","title":"Project d'API de gestion de fichiers simple","text":"<p>Proposer une api REST qui permet de stocker des fichiers avec leurs m\u00e9tadonn\u00e9es (nom, taille, url, etc.).</p>"},{"location":"js/projets/#sujet_1","title":"Sujet","text":"<ul> <li>Compl\u00e9ter l'API pour avoir toutes les routes CRUD manquantes (PUT, PATCH, DELTE d'un fichier) fonctionnelles avec une BDD sqlite. (5 pts)</li> <li>Proposer une route GET <code>/qrcode/:id</code> qui fournit le lien d'un fichier sous forme d'une image QRCode (\ud83d\udca1 utiliser la lib qrcode) (1 pts)</li> <li>Proposer une route GET <code>/filter/images</code> qui liste les images (fichiers avec les extensions png, jpg, jpeg, gif et svg). Les autres fichiers ne doivent pas \u00eatre list\u00e9s. (1 pts)</li> <li>Proposer une route GET <code>/check/id:</code> qui v\u00e9rifie si l'url du fichier est joignable (\ud83d\udca1 via une requ\u00eate HEAD par exemple, \ud83d\udca1 vous pouvez utiliser axios pour faire la requ\u00eate) (1 pt)</li> <li>Proposer une route GET <code>/sort/descending</code> qui affiche les fichiers tri\u00e9s par ordre d\u00e9croissant de taille. (1 pts)</li> <li>Proposer une route GET <code>/search/:name</code> qui permet de rechercher les fichiers qui contiennent le mot <code>:name</code> dans leurs noms. (1 pts)</li> <li>Proposer une route GET <code>/lastdays/:days</code> qui affiche les fichiers qui ont \u00e9t\u00e9 modifi\u00e9s ou cr\u00e9\u00e9s dans les <code>:days</code> derniers jours. (1 pts)</li> <li>Proposer une route GET <code>/latestfiles/:count</code> qui affiche les <code>:count</code> derniers fichiers qui ont \u00e9t\u00e9 cr\u00e9\u00e9s. (1 pts)</li> <li>Proposer une route DELETE <code>/large/:size</code> qui supprime les fichiers dont la taille d\u00e9passe strictement <code>:size</code>. Dans le cas o\u00f9 aucun fichier n'a \u00e9t\u00e9 supprim\u00e9, renvoyer une 204. Si au moins un fichier a \u00e9t\u00e9 supprim\u00e9, renvoyer une 200. (2 pt)</li> <li>Proposer une route PATCH <code>/rename/:oldDomain/:newDomain</code> qui remplace tous les domaines <code>:oldDomain</code> par <code>:newDomain</code> dans le champ url. (3 pts)</li> <li>Proposer une route GET <code>/stats/total</code> qui calcule et retourne l'objet suivant avec les bonnes valeurs (3 pts) (astuce utiliser <code>findOne</code> et <code>sequelize.fn</code>):</li> </ul> <pre><code>{\n  \"totalSize\": 123456,\n  \"totalFiles\": 123,\n  \"maxSize\": 123456,\n  \"minSize\": 123,\n  \"averageSize\": 123,\n  \"lastUpdatedAt\": \"2021-01-01T00:00:00.000Z\"\n}\n</code></pre>"},{"location":"js/projets/#liens-utils","title":"Liens utils","text":"<ul> <li>Applying where clauses in sequelize</li> <li>sequelize.fn pour faire des agr\u00e9gations</li> <li>Autre exemple de sequelize.fn pour faire des agr\u00e9gations</li> </ul>"},{"location":"js/reactjs/","title":"React","text":""},{"location":"js/reactjs/#react","title":"React","text":""},{"location":"js/reactjs/#quelques-definitions","title":"Quelques d\u00e9finitions","text":"<ul> <li>Le page d'accueil du site react.dev ainsi que react.dev/learn proposent une bonne introduction aux composants React.</li> <li>Composition : combiner des composants avec d'autres composants.</li> <li>Un composant React est une fonction qui retourne du JSX (du HTML dans du JS).</li> </ul>"},{"location":"js/reactjs/#projet-reactjs-avec-vite","title":"Projet reactjs avec vite","text":"<pre><code>npx create-vite@latest my-react-app --template react\ncd my-react-app\nnpm install\n# Lancer un serveur de d\u00e9veloppement\nnpm run dev\n# Cr\u00e9er un build de production\nnpm run build\n</code></pre> <p>Dans le dossier <code>src</code>, cr\u00e9er le dossier <code>components</code> et y ajouter un fichier <code>Hello.jsx</code>.</p> <ul> <li>Ajouter un composant <code>Hello</code> (dans le fichier <code>Hello.jsx</code>)qui prend un prop <code>name</code> et affiche <code>Hello, {name}</code>.</li> <li>Si le linteur signale un probl\u00e8me de typage du compsant, installer la librairie <code>prop-types</code> (<code>npm install --save-dev prop-types</code>) et renseigner les types comme indique dans les exemples de code.</li> <li>Ajouter un composant <code>StateDemo</code> (dans le fichier <code>StateDemo.jsx</code>) qui illustre l'\u00e9tat local avec <code>useState</code>.</li> </ul> Hello.jsx<pre><code>import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Hello({ name }) {\n    return &lt;h1&gt;Hello, {name}&lt;/h1&gt;;\n}\n\nHello.propTypes = {\n    name: PropTypes.string.isRequired,\n};\n</code></pre> StateDemo.jsx<pre><code>import { useState } from \"react\";\nexport function StateDemo() {\n    const [count, setCount] = useState(0);\n    return (\n        &lt;&gt;\n            &lt;p&gt;Vous avez cliqu\u00e9 {count} fois&lt;/p&gt;\n            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Cliquez ici&lt;/button&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre>"},{"location":"js/reactjs/#exercices","title":"Exercices","text":""},{"location":"js/reactjs/#basique","title":"Basique","text":"<ol> <li>Cr\u00e9er un composant <code>Counter</code> qui affiche un bouton <code>+</code> et un bouton <code>-</code> pour incr\u00e9menter et d\u00e9cr\u00e9menter un compteur. Initialiser le compteur \u00e0 42.</li> <li>Cr\u00e9er un composant <code>ToLowerCase</code> qui prend un prop (ou un argument) <code>text</code> et affiche le texte en minuscules. (\ud83d\udca1 astuce: <code>string.toLowerCase()</code>)</li> <li>Cr\u00e9er un composant <code>EurToYen</code> qui permet de saisir des euros et affiche le montant en yens (1 euro = 130 yens). (\ud83d\udca1 astuce: utiliser <code>&lt;input type=\"number\" /&gt;</code>)</li> <li>Cr\u00e9er un composant <code>ShowMax</code> qui prend deux nombres en props et affiche le plus grand.</li> <li>Cr\u00e9er un composant <code>Guess</code> qui affiche un zone \u00e9ditable num\u00e9rique et un bouton. A chaque fois que l'utilisateur clique sur le bouton, le composant g\u00e9n\u00e8re un nouveau nombre al\u00e9atoire entre 1 et 10 et affiche si le nombre saisi est trop grand, trop petit ou si c'est le bon nombre. (\ud83d\udca1 astuce: utiliser <code>Math.random()</code> pour g\u00e9n\u00e9rer un nombre al\u00e9atoire).</li> <li>Cr\u00e9er un composant <code>CountConsonantsAndVowels</code> qui prend un prop <code>text</code> et affiche le nombre de consonnes et de voyelles (aeiuyo) dans le texte. Instancier ce composant dans <code>&lt;App&gt;</code> et faire en sorte que le prop soit aliment\u00e9 via la valeur d'un texte editable isntanci\u00e9 dans <code>&lt;App&gt;</code>. (\ud83d\udca1 astuce: utiliser <code>string.match(/[aeiuyo]/gi)</code> pour compter les voyelles).</li> <li>Cr\u00e9er un composant <code>Palindrome</code> qui prend un prop <code>text</code> et affiche si le texte est un palindrome ou non. (\ud83d\udca1 astuce: utiliser <code>string.split('').reverse().join('')</code> pour inverser une cha\u00eene de caract\u00e8res).</li> <li>Cr\u00e9er un composant <code>Fibonacci</code> qui prend un prop <code>n</code> et affiche le n-i\u00e8me terme de la suite de Fibonacci.</li> </ol> Solutions ExoCounter.jsx<pre><code>import { useState } from \"react\";\n\nexport default function ExoCount(){\n  const initialValue = 42;\n  // const [\u00e9tat, fonction de maj de l'\u00e9tat] = useState(val par d\u00e9faut);\n  const [count, setCount] = useState(initialValue);\n\n  return &lt;&gt;\n  &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;\n  {count}\n  &lt;button onClick={() =&gt; setCount(count - 1)}&gt;-&lt;/button&gt;\n  &lt;button onClick={() =&gt; setCount(initialValue)}&gt;Reset&lt;/button&gt;\n  &lt;/&gt;;\n}\n</code></pre> ExoCounter.jsx<pre><code>import PropTypes from \"prop-types\";\n\nexport default function ExoLowerCase({ text }) {\n  const lowerCased = text.toLowerCase();\n  return (\n    &lt;&gt;\n      &lt;ul&gt;\n        &lt;li&gt;\n          M\u00e9thode 1 en calculant dans la partie code du composant: {lowerCased}\n        &lt;/li&gt;\n        &lt;li&gt;M\u00e9thode 2 directement dans le html: {text.toLowerCase()}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n\n// la prp text est une cha\u00eene de caract\u00e8res obligatoire\nExoLowerCase.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n</code></pre> EuroToYen.jsx<pre><code>import { useState } from \"react\";\n\nexport default function EuroToYen() {\n  const [euro, setEuro] = useState(0);\n  const yen = euro * 165;\n  return (\n    &lt;&gt;\n      &lt;label htmlFor=\"euro\"&gt;Euros&lt;/label&gt;\n      &lt;input\n        type=\"number\"\n        name=\"euro\"\n        value={euro}\n        onChange={(event) =&gt; setEuro(event.target.value)}\n      /&gt;\n      Yen: {yen}\n    &lt;/&gt;\n  );\n}\n</code></pre> ShowMax.jsx<pre><code>import PropTypes from \"prop-types\";\n\nexport default function ShowMax({ a, b }) {\n  const max = a &gt;= b ? a : b;\n  let maxIf = a;\n  if (a &gt; b) {\n    maxIf = a;\n  } else {\n    maxIf = b;\n  }\n  return (\n    &lt;&gt;\n      Max of {a} and {b} is {max}, {a &gt;= b ? a : b} , {maxIf}\n    &lt;/&gt;\n  );\n}\n\nShowMax.propTypes = {\n  a: PropTypes.number.isRequired,\n  b: PropTypes.number.isRequired,\n};\n</code></pre> CountConsonantsAndVowels.jsx<pre><code>import PropTypes from \"prop-types\";\n\nexport default function CountConsonantsAndVowels({ word }) {\n  // word.match(/[aeiuyo]/gi)? : renvoie un tableau qui peut \u00eatre null et ? renvoie null au lieu de crasher\n  // ?? 0 Si le r\u00e9sultat est null, on renvoie 0\n  const vowelCount = word.match(/[aeiuyo]/gi)?.length ?? 0;\n  return (\n    &lt;&gt;\n      Vowels of {word}: {vowelCount}. Consonants: {word.length - vowelCount}\n    &lt;/&gt;\n  );\n}\n\nCountConsonantsAndVowels.propTypes = {\n  word: PropTypes.string.isRequired,\n};\n</code></pre>"},{"location":"js/reactjs/#listes","title":"Listes","text":"List de todos<pre><code>import { useState } from \"react\";\n\nconst originalTodoItems = [\n  {\n    id: 1,\n    title: \"Cours de react\",\n    done: false,\n  },\n  {\n    id: 2,\n    title: \"Cours d'ElectronJS\",\n    done: false,\n  },\n  {\n    id: 3,\n    title: \"Filter, map\",\n    done: true,\n  },\n];\n\nexport default function TodoList() {\n  const [todoItems, setTodoItems] = useState(originalTodoItems);\n\n  function handleCheck(checkedTodoItem) {\n    // Cr\u00e9ation d'une nouvelle liste qui change le done de l'\u00e9m\u00e9ment coch\u00e9\n    const newTodoItems = todoItems.map((todoItem) =&gt; {\n      // On change l'\u00e9tat done de l'\u00e9l\u00e9ment coch\u00e9\n      if (todoItem.id === checkedTodoItem.id) {\n        todoItem.done = !todoItem.done;\n      }\n      return todoItem;\n    });\n    setTodoItems(newTodoItems);\n  }\n\n  function setAllTodosDone(done) {\n    setTodoItems(\n      todoItems.map((todoItem) =&gt; {\n        todoItem.done = done;\n        return todoItem;\n      })\n    );\n  }\n\n  // l'attribut key permet d'optimiser le rendu c\u00f4t\u00e9 react\n  const todoElements = todoItems.map((todoItem) =&gt; (\n    &lt;li key={todoItem.id}&gt;\n      id: {todoItem.id} - &lt;b&gt;{todoItem.title}&lt;/b&gt; -{\" \"}\n      &lt;i&gt;{todoItem.done ? \"Done\" : \"Not done\"}&lt;/i&gt;\n      &lt;input\n        type=\"checkbox\"\n        name=\"done\"\n        checked={todoItem.done}\n        onChange={() =&gt; handleCheck(todoItem)}\n      /&gt;\n    &lt;/li&gt;\n  ));\n  return (\n    &lt;&gt;\n      &lt;h2&gt;todo list&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setAllTodosDone(true)}&gt;All done&lt;/button&gt;\n      &lt;button onClick={() =&gt; setAllTodosDone(false)}&gt;All undone&lt;/button&gt;\n      &lt;ul&gt;{todoElements}&lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> List de todos enrgistr\u00e9e <pre><code>import { useEffect, useState } from \"react\";\n\nconst originalTodoItems = [\n  {\n    id: 1,\n    title: \"Cours de react\",\n    done: false,\n  },\n  {\n    id: 2,\n    title: \"Cours d'ElectronJS\",\n    done: false,\n  },\n  {\n    id: 3,\n    title: \"Filter, map\",\n    done: true,\n  },\n];\n\nexport default function TodoListStored() {\n  const [todoItems, setTodoItems] = useState(originalTodoItems);\n\n  // Hook (commence par use) qui synchronise l'\u00e9tat avec une donn\u00e9e externe\n  // On doit lui sp\u00e9cifier en callback la donn\u00e9e \u00e0 charger et\n  // en deuxi\u00e8me argument les \u00e9tats qui en d\u00e9pendent et qui ne se font pas set\n  useEffect(() =&gt; {\n    const storageTodoItemsString = localStorage.getItem(\"todoItems\");\n    if (storageTodoItemsString != null) {\n      const storageTodoItems = JSON.parse(storageTodoItemsString);\n      setTodoItems(storageTodoItems);\n    }\n  }, []);\n\n  function saveAndSetTodoItems(todoItems) {\n    localStorage.setItem(\"todoItems\", JSON.stringify(todoItems));\n    setTodoItems(todoItems);\n  }\n\n  function handleCheck(checkedTodoItem) {\n    const newTodoItems = todoItems.map((todoItem) =&gt; {\n      if (todoItem.id === checkedTodoItem.id) {\n        todoItem.done = !todoItem.done;\n      }\n      return todoItem;\n    });\n    saveAndSetTodoItems(newTodoItems);\n  }\n\n  function setAllTodosDone(done) {\n    saveAndSetTodoItems(\n      todoItems.map((todoItem) =&gt; {\n        todoItem.done = done;\n        return todoItem;\n      })\n    );\n  }\n\n  const todoElements = todoItems.map((todoItem) =&gt; (\n    &lt;li key={todoItem.id}&gt;\n      id: {todoItem.id} - &lt;b&gt;{todoItem.title}&lt;/b&gt; -{\" \"}\n      &lt;i&gt;{todoItem.done ? \"Done\" : \"Not done\"}&lt;/i&gt;\n      &lt;input\n        type=\"checkbox\"\n        name=\"done\"\n        checked={todoItem.done}\n        onChange={() =&gt; handleCheck(todoItem)}\n      /&gt;\n    &lt;/li&gt;\n  ));\n  return (\n    &lt;&gt;\n      &lt;h2&gt;Todo List local storage&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setAllTodosDone(true)}&gt;All done&lt;/button&gt;\n      &lt;button onClick={() =&gt; setAllTodosDone(false)}&gt;All undone&lt;/button&gt;\n      &lt;ul&gt;{todoElements}&lt;/ul&gt;{\" \"}\n    &lt;/&gt;\n  );\n}\n</code></pre> CRUD d'une liste to todos<pre><code>import { useEffect, useState } from \"react\";\n\nexport default function TodoListCrud() {\n  const [todoItems, setTodoItems] = useState([]);\n  const [newTodoItemTitle, setNewTodoItemTitle] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() =&gt; {\n    const storageTodoItemsString = localStorage.getItem(\"todoItems\");\n    if (storageTodoItemsString != null) {\n      const storageTodoItems = JSON.parse(storageTodoItemsString);\n      setTodoItems(storageTodoItems);\n    }\n  }, []);\n\n  function addTodoItem() {\n    if (newTodoItemTitle.length == 0) {\n      setErrorMessage(\"Incorrect length\");\n      return;\n    }\n    setErrorMessage(\"\");\n    const todoItem = {\n      id: todoItems.length + 1,\n      title: newTodoItemTitle,\n      done: false,\n    };\n    // ... spread operator\n    // ...todoItems =&gt; todoItems[0], todoItems[1], ...\n    // Cr\u00e9ation d'une nouvelle liste qui reprend todoItems + todoItem\n    const newTodoItems = [...todoItems, todoItem];\n    saveAndSetTodoItems(newTodoItems);\n  }\n\n  function saveAndSetTodoItems(todoItems) {\n    localStorage.setItem(\"todoItems\", JSON.stringify(todoItems));\n    setTodoItems(todoItems);\n  }\n\n  function handleCheck(checkedTodoItem) {\n    const newTodoItems = todoItems.map((todoItem) =&gt; {\n      if (todoItem.id === checkedTodoItem.id) {\n        todoItem.done = !todoItem.done;\n      }\n      return todoItem;\n    });\n    saveAndSetTodoItems(newTodoItems);\n  }\n\n  function setAllTodosDone(done) {\n    saveAndSetTodoItems(\n      todoItems.map((todoItem) =&gt; {\n        todoItem.done = done;\n        return todoItem;\n      })\n    );\n  }\n\n  const todoElements = todoItems.map((todoItem) =&gt; (\n    &lt;li key={todoItem.id}&gt;\n      id: {todoItem.id} - &lt;b&gt;{todoItem.title}&lt;/b&gt; -{\" \"}\n      &lt;i&gt;{todoItem.done ? \"Done\" : \"Not done\"}&lt;/i&gt;\n      &lt;input\n        type=\"checkbox\"\n        name=\"done\"\n        checked={todoItem.done}\n        onChange={() =&gt; handleCheck(todoItem)}\n      /&gt;\n    &lt;/li&gt;\n  ));\n\n  const style = {\n    border: \"1px solid green\",\n    \"border-radius\": \"5px\",\n    \"background-color\": \"#FAF\",\n  };\n  return (\n    &lt;div style={style}&gt;\n      &lt;h2&gt;Todo List CRUD + localStorage&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setAllTodosDone(true)}&gt;All done&lt;/button&gt;\n      &lt;button onClick={() =&gt; setAllTodosDone(false)}&gt;All undone&lt;/button&gt;\n      &lt;div&gt;\n        &lt;label htmlFor=\"title\"&gt;Title:&lt;/label&gt;\n        &lt;input\n          type=\"text\"\n          name=\"title\"\n          minLength={1}\n          placeholder=\"My new task\"\n          value={newTodoItemTitle}\n          onChange={(event) =&gt; setNewTodoItemTitle(event.target.value)}\n        /&gt;\n        &lt;button onClick={addTodoItem}&gt;Add&lt;/button&gt;\n        &lt;button onClick={() =&gt; addTodoItem()}&gt;Add&lt;/button&gt;\n        &lt;br /&gt;\n        {errorMessage}\n      &lt;/div&gt;\n      &lt;ul&gt;{todoElements}&lt;/ul&gt;{\" \"}\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ol> <li> <p>Cr\u00e9er un composant <code>ShowLengths</code> qui prend un prop <code>items</code> (un tableau de cha\u00eenes de caract\u00e8res) et affiche chaque \u00e9l\u00e9ment suivi de sa longueur. (\ud83d\udca1 astuce: utiliser <code>string.length</code> pour obtenir la longueur d'une cha\u00eene de caract\u00e8res).</p> <ul> <li> <p>Par exemple, si <code>items = ['un', 'deux', 'trois']</code>, le composant affiche:</p> <pre><code>un (2)\ndeux (4)\ntrois (5)\n</code></pre> </li> </ul> </li> <li> <p>Cr\u00e9er un composant <code>ShowAlternating</code> qui prend un prop <code>items</code> (un tableau de cha\u00eenes de caract\u00e8res) et affiche les \u00e9l\u00e9ments de la liste en alternant les couleurs de fond (par exemple, une ligne sur deux en gris). (\ud83d\udca1 astuce: utiliser <code>index % 2 === 0</code> pour tester si l'index est pair).</p> <ul> <li> <p>Par exemple: si <code>items = ['un', 'deux', 'trois']</code>, le composant affiche:</p> <pre><code>un (avec fond gris)\ndeux (sans fond)\ntrois (avec fond gris)\n</code></pre> </li> </ul> </li> <li> <p>Cr\u00e9er un composant <code>LoggerComponent</code> qui affiche un champ de texte \u00e9ditable et un bouton Ajouter. Chaque fois que l'utilisateur clique sur le bouton Ajouter, le texte saisi est ajout\u00e9 \u00e0 une liste. Afficher la liste des textes saisis.</p> <ul> <li> <p>Par exemple, si l'utilisateur saisit \"un\", \"deux\" et \"trois\", le composant affiche:</p> <pre><code>un\ndeux\ntrois\n</code></pre> </li> </ul> </li> <li> <p>Cr\u00e9er un composant <code>LoggerComponentExtended</code> qui affiche un champ de texte \u00e9ditable et un bouton Ajouter. Chaque fois que l'utilisateur clique sur le bouton Ajouter, le texte saisi est ajout\u00e9 \u00e0 une liste contenant \u00e9galement l'horodatage de l'ajout. Afficher la liste.</p> <ul> <li> <p>Par exemple, si l'utilisateur saisit \"un\", \"deux\" et \"trois\", le composant affiche:</p> <pre><code>2022-01-01 12:00:00 un\n2022-01-01 12:00:01 deux\n2022-01-01 12:00:02 trois\n</code></pre> </li> </ul> </li> <li> <p>Cr\u00e9er un composant <code>EditableLogger</code> qui affiche un champ de texte \u00e9ditable et un bouton Ajouter. Chaque fois que l'utilisateur clique sur le bouton Ajouter, le texte saisi est ajout\u00e9 \u00e0 une liste contenant \u00e9galement l'horodatage de l'ajout.</p> <ul> <li>Afficher la liste en permettant d'\u00e9diter le corps (pas la date) de chaque ligne \u00e9l\u00e9ment et de supprimer un \u00e9l\u00e9ment.</li> <li> <p>Par exemple, si l'utilisateur saisit \"un\", \"deux\" et \"trois\", le composant affiche:</p> <pre><code>2022-01-01 12:00:00 un [Input pour modifier le texte] [Bouton pour supprimer]\n2022-01-01 12:00:01 deux [Input pour modifier le texte] [Bouton pour supprimer]\n2022-01-01 12:00:02 trois [Input pour modifier le texte] [Bouton pour supprimer]\n</code></pre> </li> <li> <p>Ajouter les boutons sauvegarder et charger pour sauvegarder la liste dans le local storage et la charger au d\u00e9marrage de l'application ou au clique sur le bouton charger.</p> </li> </ul> </li> </ol> Solutions StringsLengths.jsx<pre><code>import PropTypes from \"prop-types\";\n\n/**\n * To instanciate &lt;StringLengths items={[\"un\", \"deux\", \"trois\"]} /&gt;\n * @param {{texts: string[]}}\n * @returns\n */\nexport default function StringLengths({ texts }) {\n  const textsElements = texts.map((text, index) =&gt; (\n    &lt;li key={index}&gt;text ({text.length})&lt;/li&gt;\n  ));\n  return &lt;ul&gt;{textsElements}&lt;/ul&gt;;\n}\n\nStringLengths.propTypes = {\n  texts: PropTypes.string.isRequired,\n};\n</code></pre> ShowAlternating.jsx<pre><code>import PropTypes from \"prop-types\";\n\n/**\n * To instanciate &lt;ShowAlternating items={[\"un\", \"deux\", \"trois\"]} /&gt;\n * @param {{texts: string[]}}\n * @returns\n */\nexport default function ShowAlternating({ texts }) {\n  const textsElements = texts.map((text, index) =&gt; (\n    &lt;li\n      key={index}\n      style={{ backgroundColor: index % 2 === 0 ? \"grey\" : \"blue\" }}\n    &gt;\n      text ({text.length})\n    &lt;/li&gt;\n  ));\n  return &lt;ul&gt;{textsElements}&lt;/ul&gt;;\n}\n\nShowAlternating.propTypes = {\n  texts: PropTypes.string.isRequired,\n};\n</code></pre>"},{"location":"js/reactjs/#composition","title":"Composition","text":"<ol> <li> <p>Cr\u00e9er un composant <code>SocialPost</code> qui prend en props les propri\u00e9t\u00e9s <code>author</code>, <code>date</code>, <code>content</code> et <code>avatar</code>. Afficher ces propri\u00e9t\u00e9s de fa\u00e7on jolie.</p> <ul> <li> <p>Par exemple, si <code>author = 'Alice'</code>, <code>date = '2022-01-01'</code>, <code>content = 'Hello world!'</code> et <code>avatar = 'alice.jpg'</code>, le composant affiche (de fa\u00e7on pas jolie):</p> <pre><code>&lt;img src=\"alice.jpg\" alt=\"Avatar de Alice\" /&gt;\n&lt;h2&gt;Alice&lt;/h2&gt;\n&lt;p&gt;2022-01-01&lt;/p&gt;\n&lt;p&gt;Hello world!&lt;/p&gt;\n</code></pre> </li> </ul> </li> <li> <p>Cr\u00e9er un composant <code>SocialPostList</code> qui prend en prop <code>posts</code> (un tableau d'objets avec les propri\u00e9t\u00e9s <code>author</code>, <code>date</code>, <code>content</code> et <code>avatar</code>) et affiche une liste de <code>SocialPost</code>.</p> </li> <li>Cr\u00e9er un composant <code>HomePage</code> qui affiche un logo, un titre et une liste de <code>SocialPost</code>. Cr\u00e9er un composant <code>AboutPage</code> qui affiche un logo, un titre et un texte de pr\u00e9sentation. Dans le composant <code>App</code>, afficher les deux liens. Avec un bool\u00e9en <code>isHomePage</code>, afficher soit la page d'accueil, soit la page \"\u00e0 propos\" selon le lien sur lequel on clique.</li> </ol>"},{"location":"js/reactjs/#router","title":"Router","text":"<p>Le router permet de g\u00e9rer les diff\u00e9rents \u00e9crans d'une application React. Il permet de naviguer entre les diff\u00e9rentes \u00e9crans sans recharger la page enti\u00e8re. En effet, une application React ne contient en r\u00e9alit\u00e9 qu'une seule page HTML et est r\u00e9-initialis\u00e9e \u00e0 chaque fois qu'on charge ou recharge cette page. Le routeur permet donc de changer le composant qui affiche le contenu principal de l'\u00e9cran actuel sans recharger l'application. Cette zone est appel\u00e9e un outlet.</p>"},{"location":"js/reactjs/#elements-principaux","title":"\u00c9l\u00e9ments principaux","text":"<p>Le routeur est mis en place avec ces trois \u00e9l\u00e9ments principaux:</p> <ul> <li>Router : permet de d\u00e9finir les routes. i.e. pour chaque \u00e9cran, renseigner son composant principal et son chemin d'url.</li> <li>Link: permet de cr\u00e9er un lien vers une route \u00e0 l'instar de la balise <code>&lt;a&gt;</code>. Il ne faut pas utiliser <code>&lt;a&gt;</code> car cela rechargerait la page enti\u00e8re.</li> <li>Outlet: permet de d\u00e9finir la zone o\u00f9 le contenu de la route actuelle sera affich\u00e9.</li> </ul> <p></p>"},{"location":"js/reactjs/#guide","title":"Guide","text":"<ol> <li>Cr\u00e9er un projet React avec vite (<code>npm create vite@latest react-app-with-router</code>).</li> <li>Pr\u00e9paration<ol> <li>Cr\u00e9er un composant <code>Home</code> qui affiche \"Bienvenue sur la page d'accueil\".</li> <li>Cr\u00e9er un composant <code>About</code> qui affiche \"\u00c0 propos de nous\".</li> <li>Cr\u00e9er un composant <code>Contact</code> qui affiche \"Contactez-nous\".</li> </ol> </li> <li> <p>Nettoyer le composant <code>App</code>.</p> <pre><code>export default function App() {\n    return &lt;&gt;&lt;/&gt;;\n}\n</code></pre> </li> <li> <p>Installer <code>react-router-dom</code> avec <code>npm install react-router-dom</code>.</p> </li> <li> <p>Dans <code>src/main.jsx</code> Cr\u00e9er une table de routage en ajoutant le contenu suivant:</p> <pre><code>import { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport Home from \"./components/Home.jsx\";\nimport Contact from \"./components/Contact.jsx\";\nimport About from \"./components/About.jsx\";\n// Table de routage\nconst router = createBrowserRouter([\n{\n    path: \"/\",\n    element: &lt;App /&gt;,\n    children: [\n    {\n        path: \"/home\",\n        element: &lt;Home /&gt;,\n    },\n    {\n        path: \"/about\",\n        element: &lt;About /&gt;,\n    },\n    {\n        path: \"/contact\",\n        element: &lt;Contact /&gt;,\n    },\n    ],\n},\n]);\n</code></pre> <ul> <li>modifier la partie <code>createRoot</code> pour utiliser <code>&lt;React.StrictMode&gt;</code> et <code>&lt;RouterProvider&gt;</code> (c'est lui va g\u00e9rer les routes de l'application).</li> </ul> <pre><code>ReactDOM.createRoot(document.getElementById(\"root\")).render(\n&lt;React.StrictMode&gt;\n    &lt;RouterProvider router={router} /&gt;\n&lt;/React.StrictMode&gt;\n);\n</code></pre> <ul> <li>Il faut aussi importer <code>import ReactDOM from \"react-dom/client\";</code>.</li> <li>Fichier complet:</li> </ul> src/main.jsx <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport Home from \"./components/Home.jsx\";\nimport Contact from \"./components/Contact.jsx\";\nimport About from \"./components/About.jsx\";\n\nconst router = createBrowserRouter([\n{\n    path: \"/\",\n    element: &lt;App /&gt;,\n    children: [\n    {\n        path: \"/home\",\n        element: &lt;Home /&gt;,\n    },\n    {\n        path: \"/about\",\n        element: &lt;About /&gt;,\n    },\n    {\n        path: \"/contact\",\n        element: &lt;Contact /&gt;,\n    },\n    ],\n},\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n&lt;React.StrictMode&gt;\n    &lt;RouterProvider router={router} /&gt;\n&lt;/React.StrictMode&gt;\n);\n</code></pre> </li> <li> <p>Dans le composant <code>App</code>, ajouter un lien vers la page d'accueil, la page \"\u00e0 propos\" et la page de contact (<code>{\" - \"}</code> permet de forcer un espace avant et apr\u00e8s le -).</p> <pre><code>import { Link } from \"react-router-dom\";\nexport default function App() {\n    return (\n    &lt;&gt;\n        &lt;h1&gt;React router demo&lt;/h1&gt;\n        &lt;nav&gt;\n            &lt;Link to=\"/home\"&gt;Accueil&lt;/Link&gt;{\" - \"}\n            &lt;Link to=\"/about\"&gt;\u00c0 propos&lt;/Link&gt;{\" - \"}\n            &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n        &lt;/nav&gt;\n    &lt;/&gt;\n    );\n}\n</code></pre> </li> <li> <p>Tester l'application en lan\u00e7ant <code>npm run dev</code>. Que constatez vous au niveau du rendu de votre app et de la barre d'adresse ?</p> </li> <li> <p>Ajouter le outlet dans le composant <code>App</code> pour afficher les pages enfants.</p> <pre><code>import { Outlet } from \"react-router-dom\";\nexport default function App() {\n    return (\n    &lt;&gt;\n        &lt;h1&gt;React router demo&lt;/h1&gt;\n        &lt;nav&gt;\n            &lt;Link to=\"/home\"&gt;Accueil&lt;/Link&gt;{\" - \"}\n            &lt;Link to=\"/about\"&gt;\u00c0 propos&lt;/Link&gt;{\" - \"}\n            &lt;Link to=\"/contact\"&gt;Contact&lt;/Link&gt;\n        &lt;/nav&gt;\n        &lt;Outlet /&gt;\n    &lt;/&gt;\n    );\n}\n</code></pre> </li> <li> <p>Comme les composants sont des pages, il est recommand\u00e9 de les d\u00e9placer dans le dossier <code>src/pages</code>. Appliquer cette convention \u00e0 l'avenir.</p> </li> <li>On peut sp\u00e9cifier des param\u00e8tres dans des routes (par exemple pour afficher un item \u00e0 partir d'une liste).</li> </ol>"},{"location":"js/reactjs/#astuces","title":"Astuces","text":"<ul> <li>Pour activer la colorations des parenth\u00e8ses, accolades et crochets dans VSCode, activer l'option \"Bracket Pair colorization\" dans les param\u00e8tres.</li> <li>L'extension indent-rainbow permet de colorer les indentations.</li> </ul>"},{"location":"js/webia/","title":"Web et genAI","text":""},{"location":"js/webia/#web-et-genai","title":"Web et genAI","text":"<p>Nous allons aborder les liens entre ces deux technologies \u00e0 travers ces axes.</p> <ul> <li>Utilisation d'outils de genAI pour g\u00e9n\u00e9rer:<ul> <li>Des sites web</li> <li>Des images</li> <li>Des designs</li> </ul> </li> <li>Utilisation des API web pour faire de l'inf\u00e9rence sur des LLM</li> <li>Outils divers: gradio, cursor</li> </ul>"},{"location":"js/webia/#generation-via-la-genai","title":"G\u00e9n\u00e9ration via la genAI","text":""},{"location":"js/webia/#generation-de-sites","title":"G\u00e9n\u00e9ration de sites","text":"<p>Il vous est demand\u00e9 d'utiliser les deux outils suivants pour g\u00e9n\u00e9rer des sites web.</p> <ul> <li>Outils: v0.dev, bolt.new et marblism</li> <li>Objectif: g\u00e9n\u00e9rer un site web \u00e0 partir d'un texte g\u00e9n\u00e9r\u00e9 par un LLM</li> <li>Applications:<ul> <li>Gestionnaire de t\u00e2ches (Todo list)</li> <li>Blog avec gestion de l'authentification (avec auth0)</li> <li>Un site dont le th\u00e8me est de votre choix</li> </ul> </li> <li>Travail demand\u00e9:<ul> <li>G\u00e9n\u00e9rer chaque site propos\u00e9 avec chacun des outils (en faisant du prompt engineering)</li> <li>T\u00e9l\u00e9charger et tester le code g\u00e9n\u00e9r\u00e9 en local</li> <li>Critiquer la qualit\u00e9 le site g\u00e9n\u00e9r\u00e9. Un readme qui liste vos opinions sur:<ul> <li>La vitesse de G\u00e9n\u00e9ration</li> <li>La qualit\u00e9 des explications fournies par l'IA</li> <li>La qualit\u00e9 du code g\u00e9n\u00e9r\u00e9</li> <li>La simplicit\u00e9 d'ex\u00e9cution en local</li> <li>La facilit\u00e9 \u00e0 personnaliser</li> <li>Tout autre point que vous jugerez pertinent</li> </ul> </li> <li>Ajouter dans le readme l'encha\u00eenement des prompts utilis\u00e9s</li> <li>Proposer des am\u00e9liorations</li> <li>Vous pouvez vous faire aider d'autres outils ChatGPT, ClaudeAI ou copilotAI pour chacune des \u00e9tapes</li> </ul> </li> </ul>"},{"location":"js/webia/#generation-dimages","title":"G\u00e9n\u00e9ration d'images","text":"<ul> <li>Outils: DALL-E, Adobe Firefly, Canva AI</li> <li>Travail demand\u00e9:<ul> <li>G\u00e9n\u00e9rer un logo pour votre site</li> <li>G\u00e9n\u00e9rer des images pour les diff\u00e9rents sites g\u00e9n\u00e9r\u00e9s plus haut</li> </ul> </li> </ul>"},{"location":"js/webia/#generer-un-design","title":"G\u00e9n\u00e9rer un design","text":"<ul> <li>Outils: Le plugin Figma uidesign.ai, uizard</li> </ul>"},{"location":"js/webia/#web-et-llm","title":"Web et LLM","text":"<p>Dans cette partie, nous allons aborder les possibilit\u00e9s offertes par les LLM pour le web.</p> <p>Il y a deux possibilit\u00e9s; soit h\u00e9berger le LLM sur un serveur et l'appeler via une API REST, soit utiliser un mod\u00e8le embarqu\u00e9 dans le navigateur.</p> <p>La premi\u00e8re solution est plus simple et offre g\u00e9n\u00e9ralement plus de possibilit\u00e9s et de performance. La seconde est plus complexe et son temps de r\u00e9ponse d\u00e9pend de la machine de l'utiliser. Il faut \u00e9galement souligner que la premi\u00e8re solution n'est pas adapt\u00e9e app web c\u00f4t\u00e9 client, car elle expose votre cl\u00e9 API. Pour les serveur et les applications web g\u00e9n\u00e9r\u00e9es c\u00f4t\u00e9 serveur, la cl\u00e9 d'API doit \u00eatre s\u00e9curis\u00e9e pour n'\u00eatre vue que du serveur.</p>"},{"location":"js/webia/#inference-sur-llm-via-des-api-rest","title":"Inf\u00e9rence sur LLM via des API REST","text":"<p>Comme il existe plusieurs fournisseurs de LLM qui n'ont pas forc\u00e9ment la m\u00eame API, il est recommand\u00e9 d'utiliser une librairie qui abstrait ces diff\u00e9rences. Pour ce faire, nous allons utiliser langchain.js dans cette partie. Cette libraire supporte plusieurs fournisseurs de LLM et offre une API unifi\u00e9e ainsi que des fonctionnalit\u00e9s suppl\u00e9mentaires. Pour compl\u00e9ter, nous allons prendre une API gratuite parmi celles propos\u00e9es ici</p> <ul> <li><code>bun init</code> puis ouvrir le dossier et faire un <code>bun install</code></li> <li>Ajouter un fichier <code>.env</code> qui contient votre cl\u00e9 d'API (bun lit nativement les dotenv sans rien faire de notre c\u00f4t\u00e9)</li> <li>Suivre la doc google AI pour langchain (en rempla\u00e7ant <code>npm</code> par votre gestionnaire de paqu\u00eats)<ul> <li>Utiliser un mod\u00e8le Flash pour avoir plus de requ\u00eates par minutes</li> </ul> </li> <li>D\u00e9velopper un \u00e9quivalent de chatGPT qu'on va appeler chatGTP (chat j'ai TP) qui prend en entr\u00e9e un texte et g\u00e9n\u00e8re une r\u00e9ponse. Soyez cr\u00e9atifs !.<ul> <li>Bun support la r\u00e9cup\u00e9ration des argument de la ligne de commande. Voici la doc.</li> <li>Exemple d'utilisation \u00e0 la racine du projet: <code>bun run chatGTP \"Hello, how are you?\"</code> -&gt; <code>Hello, I'm fine, thank you. How can I help you?</code></li> <li>Astuces: marked-terminal permet d'\u00e9crire du markdown dans la console. chalk permet de colorer le texte.</li> </ul> </li> <li>Aller plus loin:<ul> <li>Impl\u00e9menter une m\u00e9moire basique sur disque</li> <li>Utiliser du tool calling</li> </ul> </li> </ul>"},{"location":"js/webia/#llm-embarque-dans-le-navigateur","title":"LLM embarqu\u00e9 dans le navigateur","text":"<p>Note</p> <p>Au momemnt de l'\u00e9criture de ce document (janvier 2025), les navigateurs n'embarquent pas de LLM. Chrome a fait une annonce \u00e0 ce sujet en 2024. Donc, pour le moement, il faut utiliser des librairies tierces pour embarquer un LLM dans le navigateur.</p> <p>Je propose de travailler sur ces deux librairies d'inf\u00e9rence de LLM dans le navigateur: Transformers.js et WebLLM.</p>"},{"location":"js/webia/#methode-de-travail-conseillee","title":"M\u00e9thode de travail conseill\u00e9e","text":"<p>Il est recommand\u00e9 d'utiliser un bundler pour simplifier l'importation des libraires. Nous allons utiliser vite pour ce faire. Nous allons \u00e9galement utiliser bun comme gestionnaire de projet.</p> <ul> <li>Cr\u00e9er un projet vite de type vanilla (sans framework) en TypeScript: <code>bun create vite langchainjs_demo --template vanilla-ts</code><ul> <li><code>cd langchainjs_demo</code> puis <code>bun install</code>, puis <code>bun dev</code></li> </ul> </li> <li>Ouvrir le projet avec votre IDE</li> </ul>"},{"location":"js/webia/#transformersjs","title":"Transformers.js","text":"<p>Transformers.js est une librairie qui permet d'utiliser les mod\u00e8les de Hugging Face dans le navigateur. Il est recommand\u00e9 d'utiliser les mod\u00e8les propos\u00e9s par Xenova pour tirer parti du WebGPU. D'ailleurs, ce dernier propose plusieurs d\u00e9mos</p> <ul> <li>Nous allons utiliser le mod\u00e8le <code>phi3.5-webgpu</code>.</li> <li>Copier dans src le fichier worker.js<ul> <li>Ce web worker contient le code pour charger le mod\u00e8le et faire des inf\u00e9rences</li> </ul> </li> <li>Le worker \u00e9coute les messages suivants:<ul> <li><code>{type: \"load\"}</code>: pour charger le mod\u00e8le</li> <li><code>{type: \"check\"}</code>: lance une exception si il y un souci c\u00f4t\u00e9 WebGPU</li> <li><code>{type: \"generate\", data: messages}</code>: envoie un message pour g\u00e9n\u00e9rer du texte.     <code>messages</code> est un tableau de <code>Message</code> d\u00e9finit par la libraire transformers.js ainsi <code>export type Message = {role: string; content: string};</code>.     Exemple de message: <code>[{role: \"user\", content: \"Hello\"}]</code></li> </ul> </li> <li>Le worker envoie des messages diff\u00e9rentes selon la valeur de <code>e.data.status</code>:<ul> <li><code>\"loading\"</code>: D\u00e9but du chargement</li> <li><code>\"progress\"</code>: Rapporte la progression du chargement</li> <li><code>\"ready\"</code>: Signale que le mod\u00e8le est charg\u00e9</li> <li><code>\"start\"</code>: Signale que le texte est en d\u00e9but de g\u00e9n\u00e9ration</li> <li><code>\"update\"</code>: Signale que le texte est en cours de g\u00e9n\u00e9ration</li> <li><code>\"complete\"</code>: Signale que le texte a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9</li> <li><code>\"error\"</code>: Signale une erreur</li> </ul> </li> <li>Impl\u00e9menter un formulaire pour envoyer des messages au worker.</li> <li>Pour avoir un \u00e9change avec m\u00e9moire, il faut mettre \u00e0 jour <code>messages</code> \u00e0 chaque message re\u00e7u et envoy\u00e9.     Par exemple, si le mod\u00e8le r\u00e9pond \"Hello\", <code>messages</code> deviendrait <code>[...messages, {role: \"assistant\", content: \"Hello, how can I help?\"}]</code>.     Et, si par la suite, l'utilisateur demande \"How are you?\", l'objet <code>messages</code> \u00e0 envoyer au LLM serait <code>messages</code> serait     <pre><code>[\n    { role: \"user\", content: \"Hello\" },\n    { role: \"assistant\", content: \"Hello, how can I help?\" },\n    { role: \"user\", content: \"How are you?\" },\n];\n</code></pre></li> </ul>"},{"location":"js/webia/#webllm","title":"WebLLM","text":"<p>A exp\u00e9rimenter selon le temps restant.</p>"},{"location":"js/webia/#ressources","title":"Ressources","text":"<ul> <li>Best Bolt.New Alternatives for Your AI App</li> <li>Top Bolt.new Alternatives</li> </ul>"},{"location":"python/","title":"Introduction","text":"<ul> <li>English</li> </ul>","tags":["introduction"]},{"location":"python/#bienvenue-au-cours-de-developpement-en-python","title":"Bienvenue au cours de d\u00e9veloppement en Python","text":"","tags":["introduction"]},{"location":"python/#introduction","title":"Introduction","text":"","tags":["introduction"]},{"location":"python/#pre-requis","title":"Pr\u00e9-requis","text":"<ul> <li>Installer Python via un gestionnaire de paquets (je vous d\u00e9conseille d'utiliser l'installateur officiel)<ul> <li>Sous Windows via scoop ou le windows store.</li> <li>Sous macOS via homebrew, ou tea.</li> <li>Sous Linux via homebrew ou le gestionnaire de paquets de votre OS.</li> </ul> </li> <li>Visual studio Code (VSCode)</li> </ul>","tags":["introduction"]},{"location":"python/#ressources-et-liens-utiles","title":"Ressources et liens utiles","text":"<ul> <li>emojipedia</li> <li>Complete list of github markdown emoji markup</li> <li>mkdocs material</li> <li>prepbytes.com</li> </ul>","tags":["introduction"]},{"location":"python/#license-credits-et-remerciements","title":"License, cr\u00e9dits et remerciements","text":"<ul> <li>Le cours est r\u00e9alis\u00e9 avec MKDocs et Material for MKDocs</li> <li>Ce support de cours est disponible sous licence Creative Commons Attribution 4.0 International (CC BY 4.0)</li> <li>Certaines images sont g\u00e9n\u00e9r\u00e9es via IA (Hotpot.ai)</li> </ul>","tags":["introduction"]},{"location":"python/django-tour.en/","title":"Django tour.en","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"python/django-tour.en/#django-tour","title":"Django Tour","text":"<p>Django is a framework for developing web applications or REST APIs.</p> <p>In the following, we summarize the Django getting started tutorial.</p>"},{"location":"python/django-tour.en/#recommended-vs-code-extensions","title":"Recommended VS Code Extensions","text":"<p>Please read the configuration instructions for each extension:</p> <ul> <li>Template formatter and linter: monosans.djlint</li> <li>Template syntax highlighting: batisteo.vscode-django</li> </ul>"},{"location":"python/django-tour.en/#creating-and-starting-a-project","title":"Creating and Starting a Project","text":"<ul> <li>Preferably, create a virtual environment: <code>python3 -m venv venv</code> or <code>python -m venv venv</code></li> <li>Install the latest version of Django: <code>pip install Django==[version]</code> (this page helps find the latest version)</li> <li>Verify the installation: <code>python -m django --version</code></li> <li>Create a Django project: <code>django-admin startproject [project name]</code></li> <li>Start the development server with <code>python manage.py runserver</code> and open the link displayed by the command output.</li> <li>Project structure:</li> </ul> <pre><code>mysite/\n    manage.py # Project management script (do not modify this file)\n    mysite/ # Project information and settings\n        __init__.py # Allows Python to consider it as a module\n        settings.py # Project settings\n        urls.py # Routes managed by the project\n        asgi.py # Entry point for ASGI servers\n        wsgi.py # Entry point for WSGI servers\n</code></pre>"},{"location":"python/django-tour.en/#adding-an-application","title":"Adding an Application","text":"<ul> <li>A Django project contains several applications</li> <li>For Django, an application is a Python package that offers a set of functionalities (web pages, admin interface, REST API, middlewares, etc.)<ul> <li>Applications are meant to be autonomous and reusable in different projects.</li> </ul> </li> <li>The project we just created already uses some applications. You can check them in <code>settings.py</code></li> <li>Add a new application: <code>python manage.py startapp polls</code>. Check the content of the created folder.</li> <li> <p>We will add a page. To do this, follow these steps:</p> <ul> <li>Add a page in <code>views.py</code></li> </ul> <pre><code>from django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the polls index.\")\n</code></pre> <ul> <li>Associate a route with the page we just created in <code>urls.py</code> (<code>\"\"</code> means the page will be associated with the root of the application)</li> </ul> <pre><code>from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n]\n</code></pre> <ul> <li>Since we haven't defined the application's route within the project yet, we need to do it now by updating the <code>[project name]/urls.py</code> file</li> </ul> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    # the polls/ route uses the urls.py file from the polls folder (hence polls.urls)\n    path(\"polls/\", include(\"polls.urls\")), \n    path(\"admin/\", admin.site.urls),\n]\n</code></pre> </li> <li> <p>Open the page we just created using the URL: <code>[dev server URL]/[app path]</code>. In our case, it will be: <code>http://localhost:8000/polls/</code></p> </li> <li>Exercise: add a page <code>http://localhost:8000/polls/hello</code> that displays 'Hello World' in an <code>h1</code> tag</li> </ul>"},{"location":"python/django-tour.en/#databases","title":"Databases","text":"<ul> <li>Django uses a migrations mechanism to track changes in the database structure over time<ul> <li>This system is very convenient for upgrading the production application's database without manually applying changes made during development.</li> <li>It's similar to what Git does (tracking changes made to a file) which allows reconstructing the latest version of a file from its initial version by applying all changes made through different commits.</li> </ul> </li> <li>In Django, it works in three phases:<ol> <li>Define or update the models (equivalent to a table on the Django code side)</li> <li>Define the migration point from the current state of the models: <code>python manage.py makemigrations polls</code></li> <li>Apply the migrations to the databases linked to the application: <code>python manage.py migrate</code></li> </ol> </li> <li>Django manages the migrations of applications registered in the <code>INSTALLED_APPS</code> list in the <code>settings.py</code> file.</li> <li>Since the pre-registered applications have already defined their models and migration points, we just need to apply them to the project's database: <code>python manage.py migrate</code></li> <li>Check the content of the database (by default it's the <code>db.sqlite3</code> file)<ul> <li>\ud83d\udca1 It is possible to change the database in the <code>settings.py</code> file</li> </ul> </li> <li> <p>Next, we will add tables to the application we created earlier by following the three phases introduced above:</p> <ol> <li> <p>Define the models in <code>[app folder]/models.py</code></p> <pre><code>from django.db import models\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n</code></pre> </li> <li> <p>In <code>settings.py</code>, add <code>\"polls.apps.PollsConfig\"</code> to the <code>INSTALLED_APPS</code> list. This allows us to use migrations. Define the migration point: <code>python manage.py makemigrations polls</code>. Monitor the console output.</p> <ul> <li>To check what will be generated if we execute this migration later: <code>python manage.py sqlmigrate polls 0001</code></li> </ul> </li> <li>Apply the migrations to the database: <code>python manage.py migrate</code></li> </ol> </li> </ul>"},{"location":"python/django-tour.en/#django-shell","title":"Django Shell","text":"<ul> <li>It is possible to test Django APIs and interact with our project from the terminal</li> <li>Run the command: <code>python manage.py shell</code> which opens an interactive Python prompt (displays results after each command) linked to our Django project.</li> <li>Execute the following commands one by one:</li> </ul> <pre><code>from polls.models import Choice, Question\n\n# Should display &lt;QuerySet []&gt; because the table is empty\nQuestion.objects.all() \n\nfrom django.utils import timezone\nq = Question(question_text=\"What's new?\", pub_date=timezone.now())\nq.save() # save to the database\nq.id # should display 1\nq.question_text\nq.pub_date\nq.question_text = \"What's up?\"\nq.save()\n# Should display &lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;\n# Note the Question object (1) which is not very readable\nQuestion.objects.all()\nq.choice_set.create(choice_text= \"Choice 1\", votes = 2)\nq.save()\n</code></pre> <ul> <li>To improve the display of objects within our project, define the <code>__str__(self):</code> method in each model class and try calling <code>Question.objects.all()</code> again.</li> </ul>"},{"location":"python/django-tour.en/#displaying-data-in-web-pages","title":"Displaying Data in Web Pages","text":"<ul> <li>This code displays questions and choices as bullet lists.</li> </ul> <pre><code>def index(request):\n    content = \"&lt;h1&gt;Questions&lt;/h1&gt;\"\n    content += \"&lt;ul&gt;\"\n    for question in Question.objects.all():\n        content += \"&lt;li&gt;\"\n        content += f\"{question.question_text} - {question.pub_date}. {question.choice_set.count()} choices\"\n        content += \"&lt;ul&gt;\"\n        str_choices = [\n            f\"&lt;li&gt;{c.choice_text} / {c.votes}&lt;/li&gt;\" for c in question.choice_set.all()\n        ]\n        content += \"\".join(str_choices)\n        content += \"&lt;/ul&gt;\"\n        content += \"&lt;/li&gt;\"\n    content += \"&lt;/ul&gt;\"\n    return HttpResponse(content)\n</code></pre> <p>List Comprehension</p> <p>This syntax allows generating a new list from an existing list.</p> <p>For example, <code>[x+1 for x in [1, 2, 3, 4]]</code> will generate the list <code>[1, 2, 3, 4, 5]</code>. Similarly, <code>[f\"&lt;li&gt;{c.choice_text} / {c.votes}&lt;/li&gt;\" for c in question.choice_set.all()]</code> will generate a list of strings.</p>"},{"location":"python/django-tour.en/#using-a-template","title":"Using a Template","text":"<ul> <li>So far, the HTML of the views is hard-coded in the code</li> <li>The recommended technique is to do the processing in the code and delegate the display to a specific HTML file called a template<ul> <li>This model is called the MVC (Model View Controller) model</li> </ul> </li> <li>Templates should be placed in <code>[app folder]/templates</code></li> </ul> <p>```py \"to be placed in views.py\" from django.shortcuts import render</p> <p>def showQuestionsWithTemplate(request):     context = {\"questions\": Question.objects.all()}     return render(request, \"questions.html\", context)</p>"},{"location":"python/django-tour.en/#add-pathquestions-viewsshowquestionswithtemplate-namequestions-in-urlspy","title":"add path(\"questions\", views.showQuestionsWithTemplate, name=\"questions\"), in urls.py","text":"<pre><code>```html \"to be placed in templates/questions.html\"\n</code></pre>"},{"location":"python/django-tour.en/#the-admin-application","title":"The Admin Application","text":"<ul> <li>The admin application offers a basic CRUD web interface</li> <li>Accessible from <code>[server URL]/admin</code>. It provides a login page<ul> <li>Users are managed via the auth application. We will come back to this later.</li> </ul> </li> <li>Add a superuser (like a root in Linux) <code>python manage.py createsuperuser</code></li> <li>Log in to the admin interface with the newly created account and perform some operations</li> <li>The tables offered by the admin interface come from the auth application which registered the ability to edit its tables from the admin interface</li> <li>Let's do the same with the tables of the application we created. In the <code>[app]/admin.py</code> file, add a line <code>admin.site.register([model(s)])</code><ul> <li>In our case, it will be: <code>admin.site.register([Question, Choice])</code></li> </ul> </li> </ul>"},{"location":"python/django-tour.en/#using-a-component-library","title":"Using a Component Library","text":""},{"location":"python/django-tour.en/#material-ui","title":"Material UI","text":"<p>It seems complicated at first</p> <ul> <li>Download the library: Add it to <code>requirements.txt</code> and rerun <code>pip install -r requirements.txt</code></li> <li>Activate the library: in <code>settings.py</code> add this app just before our own apps <code>\"theme_material_kit\"</code></li> <li>Apply the migration as we added a new app <code>python manage.py migrate</code></li> <li>Add the URLs provided by the app with the lowest priority: In the global <code>urls.py</code>, add <code>path(\"\", include('theme_material_kit.urls'))</code></li> </ul>"},{"location":"python/django-tour.en/#bulma","title":"Bulma","text":"<ul> <li>Follow the official documentation</li> <li>See an example of integration in the sample project</li> <li>Add Bulma styles to forms with django-bulma-form-templates</li> </ul>"},{"location":"python/django-tour.en/#registration-and-login-forms","title":"Registration and Login Forms","text":"<ul> <li><code>django.contrib.auth.forms</code> offers predefined forms like <code>AuthenticationForm</code> and <code>UserCreationForm</code></li> <li> <p>Custom template tags allow acting on the HTML rendering. This can be useful for inserting styles into forms before rendering them.</p> </li> <li> <p>Tutorial</p> </li> <li>Form templates</li> </ul>"},{"location":"python/django-tour.en/#resources","title":"Resources","text":"<ul> <li>Different methods for managing environments</li> <li>Managing environments with <code>django-environ</code></li> <li>Using Django with Multiple Databases</li> <li>Deployment checklist</li> </ul>"},{"location":"python/django-tour/","title":"Django tour","text":"<ul> <li>English</li> </ul>"},{"location":"python/django-tour/#django","title":"Django","text":"<p>Django est un Framework de d\u00e9veloppement de applications web ou d'APIs REST.</p> <p>Dans ce qui suite, nous r\u00e9sumons le tutoriel de d\u00e9marrage propos\u00e9 par Django.</p>"},{"location":"python/django-tour/#exensions-vs-code-recommandees","title":"Exensions VS Code recommand\u00e9es","text":"<p>Veuillez lire les instructions de configuration de chaque extension:</p> <ul> <li>Formatteur et linteur de templates: monosans.djlint</li> <li>Coloration syntaxique des templates: batisteo.vscode-django</li> </ul>"},{"location":"python/django-tour/#tutoriel-couvrant-les-bases","title":"Tutoriel couvrant les bases","text":""},{"location":"python/django-tour/#creation-et-demarrage-dun-projet","title":"Cr\u00e9ation et d\u00e9marrage d'un projet","text":"<ul> <li>De pr\u00e9f\u00e9rence, cr\u00e9er un environnement virtuel: <code>python3 -m venv venv</code> ou <code>python -m venv venv</code></li> <li>Installer la derni\u00e8re version de Django <code>pip install Django==[version]</code> (cette page permet de trouver la derni\u00e8re version)</li> <li>V\u00e9rifier que l'installation a r\u00e9ussi: <code>python -m django --version</code></li> <li>Cr\u00e9er un projet django: <code>django-admin startproject [nom du projet]</code></li> <li>D\u00e9marrer le serveur de d\u00e9veloppement avec <code>python manage.py runserver</code> et ouvrir le lien affich\u00e9 par la sortie de la commande.</li> <li>Structure du projet</li> </ul> <pre><code>mysite/\n    manage.py # Script de gestion du projet (fichier \u00e0 ne pas modifier)\n    mysite/ # Informations et param\u00e8tres du projet\n        __init__.py # Permet d'\u00eatre consid\u00e9r\u00e9 par Python comme un module\n        settings.py # Param\u00e8tres du projet\n        urls.py # Les routes que le projet g\u00e8re\n        asgi.py # Point d'ent\u00e9e pour les serveurs de type ASGI\n        wsgi.py # Point d'ent\u00e9e pour les serveurs de type WSGI\n</code></pre>"},{"location":"python/django-tour/#ajout-dune-application","title":"Ajout d'une application","text":"<ul> <li>Un projet Django contient plusieurs applications</li> <li>Pour Django, une application est un paquet Python qui proposer un ensemble de fonctionnalit\u00e9s (pages Web, Interface d'administration, API REST, Middlewares, etc.)<ul> <li>Les applications sont cens\u00e9es \u00eatre autonomes et r\u00e9utilisables dans diff\u00e9rents projets.</li> </ul> </li> <li>Le projet que vous venons de cr\u00e9er utilise d\u00e9j\u00e0 quelques applications. Vous pouvez les v\u00e9rifier dans <code>settings.py</code></li> <li>Ajouter une nouvelle application: <code>python manage.py startapp polls</code>. Consulter le contenu du dossier cr\u00e9\u00e9.</li> <li> <p>Nous allons ajouter une page. Pour ce faire, suivons ces \u00e9tapes:</p> <ul> <li>Ajouter une page dans <code>views.py</code></li> </ul> <pre><code>from django.http import HttpResponse\n\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the polls index.\")\n</code></pre> <ul> <li>Associer une route \u00e0 la page que nous venons de cr\u00e9er dans <code>urls.py</code> (<code>\"\"</code> signifie que la page sera associ\u00e9e \u00e0 la racine de l'application)</li> </ul> <pre><code>from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n]\n</code></pre> <ul> <li>Comme nous n'avons pas encore d\u00e9fini la route de l'application au sein du projet, il faut le faire maintenant en mettant \u00e0 jour le fichier <code>[nom du projet]/urls.py</code></li> </ul> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    # la route polls/ utiliser le fichier urls.py du dossier polls (d'o\u00f9 le polls.urls)\n    path(\"polls/\", include(\"polls.urls\")), \n    path(\"admin/\", admin.site.urls),\n]\n</code></pre> </li> <li> <p>Ouvrir la page que nous venons de cr\u00e9er en utilisant l'url: <code>[url du servur de dev]/[chemon de l'app]</code>. Pour notre cas, ce sera: <code>http://localhost:8000/polls/</code></p> </li> <li>Exercice: ajouter une page <code>http://localhost:8000/polls/hello</code> qui affiche 'Hello World' dans une balise <code>h1</code></li> </ul>"},{"location":"python/django-tour/#bases-de-donnees","title":"Bases de donn\u00e9es","text":"<ul> <li>Django utilise un m\u00e9canisme de migrations qui permet de suivre les \u00e9volutions de la structure la BDD dans le temps<ul> <li>Ce syst\u00e8me est tr\u00e8s pratique pour permettre des mises \u00e0 niveau de la BDD de l'application de production sans avoir \u00e0 appliquer \u00e0 la main les changement faits durant le d\u00e9veloppement.</li> <li>C'est similaire \u00e0 ce que fait Git (qui m\u00e9morise les changements faits sur un fichier) qui permet de reconstruire la derni\u00e8re version d'un fichier en partant de sa version initiale et en appliquant tous les changement faits \u00e0 travers les diff\u00e9rents commits.</li> </ul> </li> <li>Sur Django, cela fonctionne en trois phases:<ol> <li>D\u00e9finir ou mettre \u00e0 jour les mod\u00e8les (\u00e9quivalent d'une table c\u00f4t\u00e9 code Django)</li> <li>D\u00e9finir le point de migration \u00e0 partir de l'\u00e9tat actuel des mod\u00e8les: <code>python manage.py makemigrations polls</code></li> <li>Appliquer les migrations aux bases de donn\u00e9es li\u00e9es \u00e0 l'application: <code>python manage.py migrate</code></li> </ol> </li> <li>Django sait g\u00e9rer les migrations des application enregistr\u00e9es dans la liste <code>INSTALLED_APPS</code> du fichier <code>settings.py</code>.</li> <li>Comme les applications pr\u00e9-resneign\u00e9es ont d\u00e9j\u00e0 d\u00e9fini leur mod\u00e8les et points de migration, il ne reste qu'a les appliquer \u00e0 la BDD du projet: <code>python manage.py migrate</code></li> <li>V\u00e9rifier le contenu de la BDD (par d\u00e9faut c'est le fichier <code>db.sqlite3</code>)<ul> <li>\ud83d\udca1 Il est possible de changer la BDD dans le fichier <code>settings.py</code></li> </ul> </li> <li> <p>Dans la suite, nous allons ajouter des tables dans l'application que nous avons cr\u00e9\u00e9 pr\u00e9c\u00e9demment en suivant donc les trois phases introduites plus haut:</p> <ol> <li> <p>D\u00e9finir les mod\u00e8les dans <code>[dossier de l'app]/models.py</code></p> <pre><code>from django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n</code></pre> </li> <li> <p>Dans settings.py, ajouter <code>\"polls.apps.PollsConfig\"</code> dans la liste <code>INSTALLTED_APPS</code>. Ceci nous permet d'utiliser les migrations. D\u00e9finissons le points de migration: <code>python manage.py makemigrations polls</code>. Surveiller la sortie de la console.</p> <ul> <li>Pour v\u00e9rifier qui sera g\u00e9n\u00e9r\u00e9 si on ex\u00e9cute cette migration par la suite: <code>python manage.py sqlmigrate polls 0001</code></li> </ul> </li> <li>Appliquer les migrations \u00e0 la BDD: <code>python manage.py migrate</code></li> </ol> </li> </ul>"},{"location":"python/django-tour/#shell-django","title":"Shell Django","text":"<ul> <li>Il est possible de tester les API de Django et agir sur notre projet depuis le terminal</li> <li>Lancer la commande : <code>python manage.py shell</code> qui ouvre un invite interactif (affiche les r\u00e9sultat apr\u00e8s chaque commande) Python li\u00e9 \u00e0 notre projet Django.</li> <li>Ex\u00e9cuter les commandes suivantes une par une:</li> </ul> <pre><code>from polls.models import Choice, Question\n\n# Devrait afficher &lt;QuerySet []&gt; car la table est vide\nQuestion.objects.all() \n\nfrom django.utils import timezone\nq = Question(question_text=\"What's new?\", pub_date=timezone.now())\nq.save() # enregistrer dans la BDD\nq.id # devrait afficher 1\nq.question_text\nq.pub_date\nq.question_text = \"What's up?\"\nq.save()\n# Devrait affichier &lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;\n# Noter le Question object (1) qui n'est pas tr\u00e8s lisible\nQuestion.objects.all()\nq.choice_set.create(choice_text= \"Choix 1\", votes = 2)\nq.save()\n</code></pre> <ul> <li>Afin d'am\u00e9liorer l'affichage des objets au sein de notre projet, d\u00e9finir la m\u00e9thode <code>__str__(self):</code> dans chacune des classes mod\u00e8les et r\u00e9essayer d'appeler un <code>Question.objects.all()</code>.</li> </ul>"},{"location":"python/django-tour/#affichage-des-donnees-dans-des-pages-web","title":"Affichage des donn\u00e9es dans des pages web","text":"<ul> <li>Ce code permet d'afficher les questions et les choix sous forme de listes \u00e0 puces.</li> </ul> <pre><code>def index(request):\n    content = \"&lt;h1&gt;Questions&lt;/h1&gt;\"\n    content += \"&lt;ul&gt;\"\n    for question in Question.objects.all():\n        content += \"&lt;li&gt;\"\n        content += f\"{question.question_text} - {question.pub_date}. {question.choice_set.count()} choix\"\n        content += \"&lt;ul&gt;\"\n        str_choices = [\n            f\"&lt;li&gt;{c.choice_text} / {c.votes}&lt;/li&gt;\" for c in question.choice_set.all()\n        ]\n        content += \"\".join(str_choices)\n        content += \"&lt;/ul&gt;\"\n        content += \"&lt;/li&gt;\"\n    content += \"&lt;/ul&gt;\"\n    return HttpResponse(content)\n</code></pre> <p>Compr\u00e9hension de listes</p> <p>Cette Syntaxe permet de g\u00e9n\u00e9rer une nouvelle liste \u00e0 partir d'une liste existante.</p> <p>Par exemple <code>[x+1 for x in [1, 2, 3, 4]]</code> g\u00e9n\u00e9rera la liste <code>[1, 2, 3, 4, 5]</code>. Sur le m\u00eame principe, <code>[f\"&lt;li&gt;{c.choice_text} / {c.votes}&lt;/li&gt;\" for c in question.choice_set.all()]</code> g\u00e9rera une liste de chaines de caract\u00e8res.</p>"},{"location":"python/django-tour/#utilisation-dun-template","title":"Utilisation d'un template","text":"<ul> <li>Jusqu'\u00e0 pr\u00e9sent, le HTML des vues est cod\u00e9 \"en dur\" dans le code</li> <li>La technique recommand\u00e9e est de faire les traitement dans le code et d\u00e9l\u00e9guer l'affichage \u00e0 un fichier HTML particulier qu'on appelle \"template\"<ul> <li>Ce mod\u00e8le est appel\u00e9 mod\u00e8le MVC (Model View Controller)</li> </ul> </li> <li>Les templates doivent \u00eatre plac\u00e9s dans <code>[dossier de l'app]/templates</code></li> </ul> \u00e0 mettre dans views.py<pre><code>from django.shortcuts import render\n\ndef showQuestionsWithTemplate(request):\n    context = {\"questions\": Question.objects.all()}\n    return render(request, \"questions.html\", context)\n\n# ajouter path(\"questions\", views.showQuestionsWithTemplate, name=\"questions\"), dans urls.py\n</code></pre> \u00e0 mettre dans templates/questions.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Questions&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;a href=\"prompt-input\"&gt;Enter your prompt&lt;/a&gt;\n    &lt;h1&gt;Prompt list&lt;/h1&gt;\n    &lt;ul&gt;\n      {% for question in questions %}\n      &lt;li&gt;\n        {{ question.question_text }}. Date: {{ question.pub_date }}\n        &lt;ul&gt;\n          {% for choice in question.choice_set() %}\n          &lt;li&gt;&lt;/li&gt;\n          {% endfor %}\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      {% endfor %}\n    &lt;/ul&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"python/django-tour/#exercices","title":"Exercices","text":"<ol> <li>Ajouter une page http://localhost:8000/ynav/hello qui affiche 'Hello World' dans une balise h1</li> <li>Ajouter une page http://localhost:8000/ynav/user/profile qui r\u00e9pond avec un html complet.<ul> <li>Exemple de contenu: <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Profile&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Profile&lt;/h1&gt;\n    &lt;p&gt;First Name: John&lt;/p&gt;\n    &lt;p&gt;Last Name: Doe&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li>Astuce: Utiliser la fonction <code>HttpResponse</code> de Django et <code>\"\"\"</code> pour mettre du texte multi-lignes.<ul> <li>Exemple <pre><code>from django.http import HttpResponse\n\ndef profile(request):\n    return HttpResponse(\"\"\"&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Profile&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Profile&lt;/h1&gt;\n        &lt;p&gt;First Name: John&lt;/p&gt;\n        &lt;p&gt;Last Name: Doe&lt;/p&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\"\"\")\n</code></pre></li> </ul> </li> </ul> </li> <li>Cr\u00e9er une page qui affiche l'heure c\u00f4t\u00e9 serveur. Exemple: <code>Il est 12:00</code>.<ul> <li>Astuce: Utiliser la librairie <code>datetime</code> de Python.</li> <li>Exemple: <pre><code>import datetime\nt = f\"Il est {datetime.now().strftime('%H:%M')}\"\n</code></pre></li> </ul> </li> <li>Cr\u00e9er une page qui utilise un template pour afficher la valeur du query param p. Exemple: <code>http://localhost:8000/ynav/query?p=hello</code> affiche <code>hello</code>.<ul> <li>Astuce: Utiliser <code>request.GET.get('p')</code> pour r\u00e9cup\u00e9rer la valeur du param\u00e8tre p.</li> <li>Exemple: <pre><code>def query(request):\n    p = request.GET.get('p')\n    return render(request, 'query.html', {'p': p})\n</code></pre></li> </ul> </li> <li>Cr\u00e9er une page qui utiliser un template pour afficher le profil de l'utilisateur avec les valeurs des query params <code>first_name</code> et <code>last_name</code>. Exemple: <code>http://localhost:8000/ynav/query/profile?first_name=John&amp;last_name=Doe</code> affiche John Doe dans la page.</li> <li>Cr\u00e9er une page qui affiche tous entiers compris entre un mix et un max pass\u00e9s en query params. Exemple: <code>http://localhost:8000/ynav/query/range?min=1&amp;max=5</code> affiche <code>1 2 3 4 5</code>.<ul> <li>Afficher les entiers dans un liste \u00e0 puce (<code>&lt;ul&gt;</code>).</li> </ul> </li> <li>Cr\u00e9er une page qui affiche un formulaire avec un champ <code>name</code> et un bouton <code>submit</code>. Lorsque le formulaire est soumis, la page affiche <code>Hello &lt;name&gt;</code>. Exemple: <code>http://localhost:8000/ynav/form</code> affiche un formulaire avec un champ <code>name</code> et un bouton <code>submit</code>. Lorsque le formulaire est soumis avec le nom <code>John</code>, la page affiche <code>Hello John</code>. (astuce: cr\u00e9er une class <code>NameForm</code> qui h\u00e9rite de <code>forms.Form</code> et ajouter un champ <code>name</code> de type <code>forms.CharField</code>).</li> <li>Afficher une table de multiplication. Exemple: <code>http://localhost:8000/ynav/multiplication?n=5</code> affiche la table de multiplication de 5.     <pre><code>5 x 1 = 5\n5 x 2 = 10\n...\n5 x 10 = 50\n</code></pre></li> <li>Cr\u00e9er une table <code>Pakiman</code> avec les champs <code>name</code>, <code>type</code>, <code>level</code> (entier) et <code>attack</code> (entier). Cr\u00e9er une page qui permet d'ajouter des <code>Pakiman</code> \u00e0 la base de donn\u00e9es. Cr\u00e9er une page qui affiche tous les <code>Pakiman</code> de la base de donn\u00e9es. Cr\u00e9er une page qui affiche les <code>Pakiman</code> dont le niveau est sup\u00e9rieur au query param pass\u00e9 dans la requ\u00eate. Exemple: <code>http://localhost:8000/ynav/pakiman?level=5</code> affiche les <code>Pakiman</code> dont le niveau est sup\u00e9rieur \u00e0 5. <ul> <li>Astuce: Utiliser <code>models.Model</code> pour d\u00e9finir le mod\u00e8le <code>Pakiman</code>.</li> </ul> </li> </ol>"},{"location":"python/django-tour/#lapplication-admin","title":"L'application admin","text":"<ul> <li>L'application admin propose une interface web basique de type CRUD</li> <li>Accessible depuis <code>[URL du serveur]/admin</code>. Elle propose une page de connexion<ul> <li>Les utilisateurs sont g\u00e9r\u00e9s via l'application auth. On y reviendra plus tard.</li> </ul> </li> <li>Ajoutons un super utilisateur (comme un root dans Linux) <code>python manage.py createsuperuser</code></li> <li>Se connecter \u00e0 l'interface d'admin avec le compte nouvellement cr\u00e9\u00e9 et faire quelques manipulations</li> <li>Les tables propos\u00e9es par l'interface d'admin proviennent de l'application auth qui a enregistr\u00e9 la possibilit\u00e9 d'\u00e9diter ses tables depuis l'interface d'admin</li> <li>Faisons pareil avec les tables de l'application que nous avons cr\u00e9\u00e9. Dans le fichier <code>[app]/admin.py</code> ajouter une ligne <code>admin.site.register([mod\u00e8le(s)])</code><ul> <li>Pour notre cas ce sera: <code>admin.site.register([Question, Choice])</code></li> </ul> </li> </ul>"},{"location":"python/django-tour/#utilisation-dune-librairie-de-composants","title":"Utilisation d'une librairie de composants","text":""},{"location":"python/django-tour/#material-ui","title":"Material UI","text":"<p>\u00e7a semble compliqu\u00e9 \u00e0 priori</p> <ul> <li>T\u00e9l\u00e9charger la librairie: Ajouter dans <code>requirements.txt</code>  et relancer un <code>pip install -r requirements.txt</code></li> <li>Activer la librairie: dans <code>settings.py</code> ajouter cette app juste avant nos propres apps <code>\"theme_material_kit\"</code></li> <li>Appliquer la migration comme on a ajout\u00e9 une nouvelle app <code>pythom manage.py migrate</code></li> <li>Ajout des urls propos\u00e9es par l'app en derni\u00e8re priorit\u00e9: Dans le <code>urls.py</code> global, ajouter <code>path(\"\", include('theme_material_kit.urls'))</code></li> </ul>"},{"location":"python/django-tour/#bulma","title":"Bulma","text":"<ul> <li>Suivre la doc officielle</li> <li>Voir exemple d'int\u00e9gration dans le projet d'exemple</li> <li>Ajouter les styles bulma dans les formulaires avec django-bulma-form-templates</li> </ul>"},{"location":"python/django-tour/#formulaires-denregistrement-et-de-connexion","title":"Formulaires d'enregistrement et de connexion","text":"<ul> <li><code>django.contrib.auth.forms</code> propose des formulaires pr\u00e9d\u00e9finis comme les: <code>AuthenticationForm et UserCreationForm</code></li> <li> <p>Les custom template tags permettent d'agir sur le rendu html. Cela peut \u00eatre utile pour ins\u00e9rer des styles dans les formulaires avant d'en faire le rendu.</p> </li> <li> <p>tuto</p> </li> <li>Templates de formulaires</li> </ul>"},{"location":"python/django-tour/#ressources","title":"Ressources","text":"<ul> <li>Diff\u00e9rentes m\u00e9thodes pour g\u00e9rer les environnements</li> <li>Gestion des environnements avec <code>django-environ</code></li> <li>Using Django with Multiple Databases</li> <li>Checklist de d\u00e9ploiement</li> </ul>"},{"location":"python/index.en/","title":"Introduction","text":"<ul> <li>Fran\u00e7ais</li> </ul>","tags":["introduction"]},{"location":"python/index.en/#welcome-to-the-python-development-course","title":"Welcome to the \"Python Development\" course","text":"","tags":["introduction"]},{"location":"python/index.en/#introduction","title":"Introduction","text":"","tags":["introduction"]},{"location":"python/index.en/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Install Python via a package manager (I advise you not to use the official installer)</p> <ul> <li>Under Windows via scoop or the windows store.</li> <li>Under macOS via homebrew, or tea.</li> <li>Under Linux via homebrew or your OS package manager.</li> </ul> </li> <li> <p>Visual studio Code (VSCode)</p> </li> </ul>","tags":["introduction"]},{"location":"python/index.en/#resources-and-useful-links","title":"Resources and useful links","text":"<ul> <li>emojipedia</li> <li>Complete list of github markdown emoji markup</li> <li>mkdocs material</li> <li>prepbytes.com</li> </ul>","tags":["introduction"]},{"location":"python/index.en/#license-credits-and-acknowledgments","title":"License, credits and acknowledgments","text":"<ul> <li>The course is made with MKDocs and Material for MKDocs</li> <li>This course material is available under the Creative Commons Attribution 4.0 International (CC BY 4.0) license</li> <li>Some images are generated via AI (Hotpot.ai)</li> </ul>","tags":["introduction"]},{"location":"python/projects-type/","title":"Projets types","text":""},{"location":"python/projects-type/#projects-types","title":"Projects types","text":"<p>Cette partie propose des exemples de mini-project ou projets qu'on peut donner en TP.</p>"},{"location":"python/projects-type/#ai-chat-en-django","title":"AI chat en Django","text":"<p>R\u00e9aliser un site web en Django de type chat avec un IA g\u00e9n\u00e9rative. La note de base est de 20 / 20 et un malus sera appliqu\u00e9 \u00e0 chaque besoin manquant.</p> <ul> <li>Utiliser un un mod\u00e8le d'IA en Python propos\u00e9 par huggingface (Il ne faut pas appeler d'API REST directement depuis votre code). (-10)</li> <li>Proposer une syst\u00e8me d'inscription et d'authentification. (-5)</li> <li>Proposer une belle UX (-5)</li> <li>Site stable et performant (-5)</li> <li>Site h\u00e9berg\u00e9 sur internet s'il est possible d'avoir un h\u00e9bergement avec au moins 20 GO de stockage pour pouvoir accueillir les mod\u00e8les (-5)</li> <li>Le site propose de dialoguer avec une IA g\u00e9n\u00e9rative (-10)</li> <li>Le site propose de dialoguer avec deuxi\u00e8me IA g\u00e9n\u00e9rative de type diff\u00e9rent (-5)</li> <li>Utilisation d'une base de donn\u00e9es (-4)</li> <li>Utilisation correcte de Django (-3)</li> </ul>"},{"location":"python/python-exercices.en/","title":"\ud83d\udcda Exercises","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"python/python-exercices.en/#exercises","title":"Exercises","text":"<p>Instructions</p> <ul> <li>Do not seek help from AI or genAI</li> </ul>"},{"location":"python/python-exercices.en/#series-1","title":"Series 1","text":"<ol> <li>Write a Python script that asks the user to enter an integer and displays whether the number is even or odd. \ud83d\udca1 Tip: use <code>n = int(input(\"Enter an integer: \"))</code></li> <li>Write a Python script that asks the user to enter an integer n and displays the sum of the first n integers (sum of integers from 0 to n inclusive).</li> <li>Write a Python script that asks the user to enter an integer and displays all the divisors of that number.</li> <li>Write a Python script that generates two random numbers x and y with 0 &lt;= x &lt;= 10 and x &lt;= y &lt;= 100. (tip: import <code>random</code> and call <code>x = random.randint(0, 10)</code>).</li> <li>Write a Python program that generates two random numbers x and y with 0 &lt;= x &lt;= 10 and x &lt;= y &lt;= 100. The program then displays the result of the integer division between y and x and the remainder of the division. (remember to handle the case where x = 0).</li> <li> <p>Write a program that displays as many characters as possible from a string in a pyramid sequence. (tip: you can use a for loop on a string <code>for char in string</code>).</p> <ul> <li>Example for the string \"abcdefghijklmnopqrstuvwxyz\" * 10</li> </ul> <pre><code>a \nbc \ndef \nghij \nklmno \npqrstu \nvwxyzab \ncdefghij \nklmnopqrs \ntuvwxyzabc \ndefghijklmn \nopqrstuvwxyz \nabcdefghijklm \nnopqrstuvwxyza \nbcdefghijklmnop \nqrstuvwxyzabcdef \nghijklmnopqrstuvw \nxyzabcdefghijklmno \npqrstuvwxyzabcdefgh \nijklmnopqrstuvwxyzab \ncdefghijklmnopqrstuvw \nxyzabcdefghijklmnopqrs\n</code></pre> </li> <li> <p>Write a function <code>count_letters(text)</code> that takes a string argument <code>text</code> and returns a dictionary containing the frequency of all letters in the input string. For example: <code>count_letters(\"hello\")</code> returns <code>{\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}</code>.</p> </li> <li>Given rectangles defined with dictionaries where the keys are <code>\"x\", \"y\", \"width\", \"height\"</code>, where <code>x</code> and <code>y</code> are the coordinates of the rectangle (we suppose that the origin (0, 0) is the top left corner of the screen) and <code>width</code> and <code>height</code> are its dimensions in pixel units<ul> <li>Write a function <code>is_intersecting(rectangle1, rectangle2)</code> that returns <code>True</code> if there is an intersection between the two rectangles.</li> <li>Write a function <code>get_intersection(rectangle1, rectangle2)</code> that returns the intersecting rectangle if it exists, otherwise <code>None</code>.</li> </ul> </li> <li>Write a function <code>fx_square(x)</code> that returns the result of <code>x * x</code>.<ul> <li>Write a function <code>fx_square_list(n)</code> that returns a list of n elements. The value of an element at index <code>i</code> is <code>fx_square(i)</code>.</li> <li>Use the <code>matplotlib</code> library to draw a graph where the x-axis represents integers from 0 to n and the y-axis represents the elements returned by <code>fx_square_list(n)</code>.</li> </ul> </li> <li>Define a function <code>fx_square_list2(points)</code> that takes a list of integers sorted in ascending order and returns a new list where the value of the i-th element is <code>points[i] * points[i]</code>.<ul> <li>Plot the graph of f(x) = x * x for x ranging from -100 to 100.</li> </ul> </li> <li>Plot the graph from -100 to 100 for the following functions: <code>exp(x)</code>, <code>1/x</code>, <code>log(x) + (1/(x^3))</code></li> </ol>"},{"location":"python/python-exercices.en/#solutions-series-1","title":"Solutions Series 1","text":"Exercises 1 to 5 <pre><code>n = int(input(\"Saisir un entier : \"))\n\nprint(n, \"est\", \"pair\" if n % 2 == 0 else \"impair\")\nprint((\"pair\", \"impair\")[n % 2])\n\nsomme_n = 0\nfor i in range(n + 1):\n    somme_n += i\n\nprint(\"Somme des\", n, \"premiers entiers\", somme_n)\n\nfor i in range(1, n):\n    if n % i == 0:\n        print(i, \"est un diviseur de\", n)\n</code></pre> Exercises pyramid, count_letters, and intersection <pre><code>print([1, 2, 3] * 3)\nprint(\"hello\" * 2)\nprint(len([1, 2, 3]), len([1, 2, 3] * 3), len(\"hello\"))\n\n\n# abcdefghij\n# ligne 0 -&gt; a on prend la sous-chaine (0, 1)\n# ligne 1 -&gt; bc (1, 3)\n# ligne 2 -&gt; def (3, 6)\n# ligne 3 -&gt; ghij (6, 10)\n# ligne l -&gt; (indice courant dans la chaine, indice courant + l + 1)\n# indice courant s'incr\u00e9mente \u00e0 chaque fois de l + 1\n\n\ndef print_pyramide(input):\n    i = 0\n    current_line = 0\n    while i + current_line + 1 &lt; len(input):\n        print(input[i : i + current_line + 1])\n        i += current_line + 1\n        current_line += 1\n\n\nprint_pyramide(\"abcdefghij\")\nprint_pyramide(\"abcdefghijklmnopqrstuvwxyz\")\nprint_pyramide(\"abcdefghijklmnopqrstuvwxyz\" * 10)\n\n\ndef count_letters1(input):\n    dict = {}\n    for letter in input:\n        if letter in dict:\n            dict[letter] += 1\n        else:\n            dict[letter] = 1\n    return dict\n\n\ndef count_letters2(input):\n    dict = {}\n    for letter in input:\n        dict[letter] = dict.get(letter, 0) + 1\n    return dict\n\n\ndef count_letters3(input):\n    dict = {}\n    for letter in input:\n        dict[letter] = dict[letter] + 1 if letter in dict else 1\n    return dict\n\n\nprint(count_letters1(\"hello\"))\nprint(count_letters2(\"hello\"))\nprint(count_letters3(\"hello\"))\n\n\ndef is_intersect_1D(x1, l1, x2, l2):\n    # Dans d'autres langages, il aurait fallu \u00e9crire (On ne peut pas combiner les in\u00e9galit\u00e9s)\n    # x1 &lt; x2 &amp;&amp; x2 &lt; x1 + l1 || x2 &lt; x1 &amp;&amp; x1 &lt; x2 + l2\n    return x1 &lt;= x2 &lt;= x1 + l1 or x2 &lt;= x1 &lt;= x2 + l2\n\n\nprint(is_intersect_1D(0, 10, 3, 1))\nprint(is_intersect_1D(2, 5, 10, 4))\nprint(is_intersect_1D(-2, 5, 10, 4))\nprint(is_intersect_1D(0, 10, -10, 20))\nprint(is_intersect_1D(100, 1, -5, 1000))\nprint(is_intersect_1D(100, 1, -5, 106))\nprint(is_intersect_1D(100, 1, -5, 99))\n\n\ndef is_intersect_2D(rec1, rec2):\n    return is_intersect_1D(\n        rec1[\"x\"], rec1[\"width\"], rec2[\"x\"], rec2[\"width\"]\n    ) and is_intersect_1D(rec1[\"y\"], rec1[\"height\"], rec2[\"y\"], rec2[\"height\"])\n\n\nrec1 = {\"x\": 10, \"y\": 30, \"width\": 100, \"height\": 200}\nrec2 = {\"x\": -5, \"y\": 20, \"width\": 50, \"height\": 100}\nrec3 = {\"x\": 15, \"y\": 15, \"width\": 5, \"height\": 5}\nrec4 = {\"x\": 15, \"y\": 15, \"width\": 5, \"height\": 400}\nprint(\"testing intersect 2D\")\nprint(\"rec1, rec2\", is_intersect_2D(rec1, rec2))\nprint(\"rec1, rec3\", is_intersect_2D(rec1, rec3))\nprint(\"rec1, rec4\", is_intersect_2D(rec1, rec4))\nprint(\"rec2, rec3\", is_intersect_2D(rec2, rec3))\n</code></pre> plot <pre><code>import matplotlib.pyplot as plt\n\n\ndef fx_square(x):\n    return x**2\n\n\ndef fx_square_list(n):\n    items = []\n    for i in range(n):\n        items.append(fx_square(i))\n    return items\n\n\ndef plot_f(n):\n    plt.plot(range(n), fx_square_list(n))\n    plt.show()\n\n\nn = 88\nprint(fx_square_list(n))\nplot_f(n)\n\n\n# exemple de liste points: [-3, 0, 1, 4, 5]\n# Exemple de sortie attendue [9, 0, 1, 16, 25]\n\n\ndef fx_square_list2(points):\n    values = []\n    for point in points:\n        values.append(point**2)\n    return values\n\n\npoints = range(-100, 100)\nvalues = fx_square_list2(points)\nplt.plot(points, values)\nplt.show()\n</code></pre>"},{"location":"python/python-exercices.en/#series-2","title":"Series 2","text":"<p>Solve the following exercises using comprehensions.</p> <ol> <li>Create a list of the first 10 even numbers.</li> <li>Create a dictionary containing 10 keys ranging from 0 to 9. The value of each key is a text indicating the parity of the number. (example: {0: \"even\", 1: \"odd\", etc.})</li> <li>Create a dictionary containing 10 keys ranging from 0 to 9 converted to strings. The value of each key is a text indicating the parity of the number. (example: {\"0\": \"even\", \"1\": \"odd\", etc.})</li> <li>Create a dictionary that filters the previous dictionary, keeping only the odd numbers.</li> <li>Create a tuple that contains the first 20 even numbers.</li> <li>Given a list of students where each student is defined by a dictionary of this type <code>student = {\"name\": \"sasha\", \"birth_year\" = 2000}</code>:<ul> <li>Create a set of student names.</li> <li>Create a tuple containing the birth years of each student.</li> </ul> </li> <li>From a tuple of symbols <code>(\"\u2665\ufe0f\", \"\u2660\ufe0f\", \"\u2663\ufe0f\", \"\u2666\ufe0f\")</code> and a list of ranks <code>[\"Ace\", \"King\", \"Queen\", \"Jack\"] + [*range(2, 11)]</code>, create a deck of cards as a list of tuples which is the Cartesian product of the symbols and the ranks.</li> </ol> Solutions <pre><code># 1\nprint([x for x in range(0, 20, 2)])\nprint([x for x in range(0, 20) if x % 2 == 0])\n\n# 2\nprint({x: \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\n\n\ndef get_parity(x):\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n\nprint({x: get_parity(x) for x in range(10)})\n\n# 3\nprint({str(x): \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\nprint({f\"{x}\": \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\n\n# 4\nnumbers = {f\"{x}\": \"even\" if x % 2 == 0 else \"odd\" for x in range(10)}\nprint({key: value for key, value in numbers.items() if int(key) % 2 != 0})\n\n# 5\nprint((x for x in range(0, 40, 2)))\n\n# cartes\nsymbols = (\"\u2665\ufe0f\", \"\u2660\ufe0f\", \"\u2663\ufe0f\", \"\u2666\ufe0f\")\nranks = [\"As\", \"Roi\", \"Reine\", \"Valet\"] + [*range(2, 11)]\n\ncards = [(symbol, rank) for symbol in symbols for rank in ranks]\nprint(cards)\n\n# 6\nstudents = [\n    {\"name\": \"Olive\", \"birth_year\": 2001},\n    {\"name\": \"Tom\", \"birth_year\": 1975},\n    {\"name\": \"Alf\", \"birth_year\": 1701},\n]\nprint({x[\"name\"] for x in students})\nprint(tuple(x[\"birth_year\"] for x in students))\n</code></pre>"},{"location":"python/python-exercices.en/#source","title":"Source","text":"<ul> <li>Exercices corrig\u00e9s d'algorithmique Python - Les bases</li> <li>Exercices du site d\u00e9veloppez</li> <li>Sorting Algorithms Animations</li> <li>Sites pour apprendre en s\u2019amusant</li> </ul>"},{"location":"python/python-exercices/","title":"\ud83d\udcda Exercices","text":"<ul> <li>English</li> </ul>"},{"location":"python/python-exercices/#exercices","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> </ul>"},{"location":"python/python-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Ecrire un script Python qui demande \u00e0 l\u2019utilisateur de saisir un nombre entier et affiche si ce nombre est pair ou impair. \ud83d\udca1 Astuce: utiliser <code>n = int(input(\"Saisir un entier : \"))</code></li> <li>Ecrire un script Python qui demande \u00e0 l'utilisateur de saisir un entier n et affiche la somme des n premiers entiers (somme des entiers de 0 jusqu'\u00e0 n inclus).</li> <li>Ecrire un script Python qui demande \u00e0 l\u2019utilisateur de saisir un nombre entier et affiche tous les diviseurs de ce nombre.</li> <li>Ecrire un script Python qui g\u00e9n\u00e8re deux nombres al\u00e9atoires x et y avec 0 &lt;= x &lt;= 10 et x &lt;= y &lt;= 100. (astuce: importer <code>random</code> et appeler <code>x = random.randint(0, 10)</code>).</li> <li>Ecrire un programme Python qui g\u00e9n\u00e8re deux nombres al\u00e9atoires x et y avec 0 &lt;= x &lt;= 10 et x &lt;= y &lt;= 100. Le programme affiche ensuite le r\u00e9sultat de la division enti\u00e8re entre y et x et le reste de la division. (penser \u00e0 g\u00e9rer le cas o\u00f9 x = 0).</li> <li> <p>Ecrire un programme qui affiche autant de caract\u00e8res que possible d'une cha\u00eene de caract\u00e8res  sous forme de suite pyramidale. (astuce: on peut faire un for in sur une cha\u00eene de caract\u00e8res <code>for char in chaine</code>).</p> <ul> <li>Exemple pour la cha\u00eene \"abcdefghijklmnopqrstuvwxyz\" * 10</li> </ul> <pre><code>a \nbc \ndef \nghij \nklmno \npqrstu \nvwxyzab \ncdefghij \nklmnopqrs \ntuvwxyzabc \ndefghijklmn \nopqrstuvwxyz \nabcdefghijklm \nnopqrstuvwxyza \nbcdefghijklmnop \nqrstuvwxyzabcdef \nghijklmnopqrstuvw \nxyzabcdefghijklmno \npqrstuvwxyzabcdefgh \nijklmnopqrstuvwxyzab \ncdefghijklmnopqrstuvw \nxyzabcdefghijklmnopqrs\n</code></pre> <ul> <li>R\u00e9ponse incorrecte pour la \"abcdefghijklmnopqrstuvwxyz\"</li> </ul> <pre><code>Incorrect\na \nbc \ndef \nghij \nklmno \npqrstu \nvwxyz\n\nCorrect\na \nbc \ndef \nghij \nklmno \npqrstu \n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>count_letters(texte)</code> ayant pour argument une cha\u00eene de caract\u00e8res texte et qui renvoie un dictionnaire qui contient la fr\u00e9quence de toutes les lettres de la cha\u00eene entr\u00e9e. Par exemple: <code>count_letters(\"hello\")</code> renvoie <code>{\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}</code>.</p> </li> <li>Soit des rectangles d\u00e9finis avec des dictionnaires dont les cl\u00e9s sont <code>\"x\", \"y\", \"largeur\", \"hauteur\"</code>.<ul> <li>Ecrire une fonction <code>is_intersecting(rectangle1, rectangle2)</code> qui retourne <code>True</code> s'il y a intersection entre les deux rectangles.</li> <li>Ecrire une fonction <code>get_intersection(rectangle1, rectangle2)</code> qui retourne le rectangle intersection s'il existe, sinon <code>None</code>.</li> </ul> </li> <li>Ecrire une fonction <code>fx_square(x)</code> qui retourne le r\u00e9sultat de <code>x * x</code>.<ul> <li>Ecrire une fonction <code>fx_square_list(n)</code> qui retourne une liste de n \u00e9l\u00e9ments. La valeur d'un \u00e9l\u00e9ment d'indice <code>i</code> est <code>fx_square(i)</code>.</li> <li>Utiliser la librairie <code>matplotlib</code> pour dessiner un graphique dont les abscisses sont les entiers allant de 0 \u00e0 n et les ordonn\u00e9es sont les \u00e9l\u00e9ments retourn\u00e9s par <code>fx_square_list(n)</code>.</li> </ul> </li> <li>D\u00e9finir une fonction <code>fx_square_list2(points)</code> qui prend en argument une liste d'entiers ordonn\u00e9es par ordre croissant et retourne une nouvelle liste dont la valeur du i \u00e8me \u00e9l\u00e9ment est <code>points[i] * points[i]</code>.<ul> <li>Tracer le graphique de f(x) = x * x pour x compris entre -100 \u00e0 100.</li> </ul> </li> <li>Faire le graphique de -100 \u00e0 100 des fonctions suivantes: <code>exp(x)</code>, <code>1/x</code>, <code>log(x) + (1/(x puissance3))</code></li> </ol>"},{"location":"python/python-exercices/#corriges-serie-1","title":"Corrig\u00e9s s\u00e9rie 1","text":"Exos de 1 \u00e0 5 <pre><code>n = int(input(\"Saisir un entier : \"))\n\nprint(n, \"est\", \"pair\" if n % 2 == 0 else \"impair\")\nprint((\"pair\", \"impair\")[n % 2])\n\nsomme_n = 0\nfor i in range(n + 1):\n    somme_n += i\n\nprint(\"Somme des\", n, \"premiers entiers\", somme_n)\n\nfor i in range(1, n):\n    if n % i == 0:\n        print(i, \"est un diviseur de\", n)\n</code></pre> Exos pyramide, count_letters et intersection <pre><code>print([1, 2, 3] * 3)\nprint(\"hello\" * 2)\nprint(len([1, 2, 3]), len([1, 2, 3] * 3), len(\"hello\"))\n\n\n# abcdefghij\n# ligne 0 -&gt; a on prend la sous-chaine (0, 1)\n# ligne 1 -&gt; bc (1, 3)\n# ligne 2 -&gt; def (3, 6)\n# ligne 3 -&gt; ghij (6, 10)\n# ligne l -&gt; (indice courant dans la chaine, indice courant + l + 1)\n# indice courant s'incr\u00e9mente \u00e0 chaque fois de l + 1\n\n\ndef print_pyramide(input):\n    i = 0\n    current_line = 0\n    while i + current_line + 1 &lt; len(input):\n        print(input[i : i + current_line + 1])\n        i += current_line + 1\n        current_line += 1\n\n\nprint_pyramide(\"abcdefghij\")\nprint_pyramide(\"abcdefghijklmnopqrstuvwxyz\")\nprint_pyramide(\"abcdefghijklmnopqrstuvwxyz\" * 10)\n\n\ndef count_letters1(input):\n    dict = {}\n    for letter in input:\n        if letter in dict:\n            dict[letter] += 1\n        else:\n            dict[letter] = 1\n    return dict\n\n\ndef count_letters2(input):\n    dict = {}\n    for letter in input:\n        dict[letter] = dict.get(letter, 0) + 1\n    return dict\n\n\ndef count_letters3(input):\n    dict = {}\n    for letter in input:\n        dict[letter] = dict[letter] + 1 if letter in dict else 1\n    return dict\n\n\nprint(count_letters1(\"hello\"))\nprint(count_letters2(\"hello\"))\nprint(count_letters3(\"hello\"))\n\n\ndef is_intersect_1D(x1, l1, x2, l2):\n    # Dans d'autres langages, il aurait fallu \u00e9crire (On ne peut pas combiner les in\u00e9galit\u00e9s)\n    # x1 &lt; x2 &amp;&amp; x2 &lt; x1 + l1 || x2 &lt; x1 &amp;&amp; x1 &lt; x2 + l2\n    return x1 &lt;= x2 &lt;= x1 + l1 or x2 &lt;= x1 &lt;= x2 + l2\n\n\nprint(is_intersect_1D(0, 10, 3, 1))\nprint(is_intersect_1D(2, 5, 10, 4))\nprint(is_intersect_1D(-2, 5, 10, 4))\nprint(is_intersect_1D(0, 10, -10, 20))\nprint(is_intersect_1D(100, 1, -5, 1000))\nprint(is_intersect_1D(100, 1, -5, 106))\nprint(is_intersect_1D(100, 1, -5, 99))\n\n\ndef is_intersect_2D(rec1, rec2):\n    return is_intersect_1D(\n        rec1[\"x\"], rec1[\"width\"], rec2[\"x\"], rec2[\"width\"]\n    ) and is_intersect_1D(rec1[\"y\"], rec1[\"height\"], rec2[\"y\"], rec2[\"height\"])\n\n\nrec1 = {\"x\": 10, \"y\": 30, \"width\": 100, \"height\": 200}\nrec2 = {\"x\": -5, \"y\": 20, \"width\": 50, \"height\": 100}\nrec3 = {\"x\": 15, \"y\": 15, \"width\": 5, \"height\": 5}\nrec4 = {\"x\": 15, \"y\": 15, \"width\": 5, \"height\": 400}\nprint(\"testing intersect 2D\")\nprint(\"rec1, rec2\", is_intersect_2D(rec1, rec2))\nprint(\"rec1, rec3\", is_intersect_2D(rec1, rec3))\nprint(\"rec1, rec4\", is_intersect_2D(rec1, rec4))\nprint(\"rec2, rec3\", is_intersect_2D(rec2, rec3))\n</code></pre> plot <pre><code>import matplotlib.pyplot as plt\n\n\ndef fx_square(x):\n    return x**2\n\n\ndef fx_square_list(n):\n    items = []\n    for i in range(n):\n        items.append(fx_square(i))\n    return items\n\n\ndef plot_f(n):\n    plt.plot(range(n), fx_square_list(n))\n    plt.show()\n\n\nn = 88\nprint(fx_square_list(n))\nplot_f(n)\n\n\n# exemple de liste points: [-3, 0, 1, 4, 5]\n# Exemple de sortie attendue [9, 0, 1, 16, 25]\n\n\ndef fx_square_list2(points):\n    values = []\n    for point in points:\n        values.append(point**2)\n    return values\n\n\npoints = range(-100, 100)\nvalues = fx_square_list2(points)\nplt.plot(points, values)\nplt.show()\n</code></pre>"},{"location":"python/python-exercices/#serie-2","title":"S\u00e9rie 2","text":"<p>R\u00e9soudre les exercices suivants avec les compr\u00e9hensions.</p> <ol> <li>Cr\u00e9er une liste des 10 premiers nombres pairs</li> <li>Cr\u00e9er un dictionnaire contentant 10 cl\u00e9s allant de 0 \u00e0 9. La valeur de chaque cl\u00e9 est un texte indiquant la parit\u00e9 du nombre. (exemple: {0: \"paire\", 1: \"impaire\", etc.})</li> <li>Cr\u00e9er un dictionnaire contentant 10 cl\u00e9 allant de 0 \u00e0 9 convertie en string. La valeur de chaque cl\u00e9 est une texte indiquant la parit\u00e9 du nombre. (exemple: {\"0\": \"paire\", \"1\": \"impaire\", etc.})</li> <li>Cr\u00e9er un dictionnaire qui filtre le dictionnaire pr\u00e9c\u00e9dent en ne gardant que les nombres impairs</li> <li>Cr\u00e9er un tuple qui contient les 20 premiers nombres pairs.</li> <li>Soit une liste d'\u00e9tudiants ou chaque \u00e9tudiant est d\u00e9fini par un dictionnaire de noms et dates de naissance. Par exemple:      <pre><code>students = [\n    {\"name\": \"Olive\", \"birth_year\": 2001},\n    {\"name\": \"Tom\", \"birth_year\": 1975},\n    {\"name\": \"Alf\", \"birth_year\": 1701},\n]\n</code></pre><ul> <li>Cr\u00e9er un ensemble des noms des \u00e9tudiants.</li> <li>Cr\u00e9er un tuple contenant les ann\u00e9es de naissance de chaque \u00e9tudiant.</li> <li>Afficher les noms des \u00e9tudiants n\u00e9s apr\u00e8s 2000.</li> <li>On suppose que les \u00e9tudiants n\u00e9s avant 1980 ont comme souhait de m\u00e9tier est d'\u00eatre lead dev tandis que les autres veulent \u00eatre des d\u00e9veloppeurs. G\u00e9n\u00e9rer une liste de dictionnaires des noms et son de m\u00e9tier \u00e0 partir du dictionnaire d'origine.<ul> <li>Exemple: <code>[{\"name\": \"Olive\", \"job\": \"dev\"}, {\"name\": \"Tom\", \"job\": \"lead dev\"}, {\"name\": \"Alf\", \"job\": \"lead dev\"}]</code></li> </ul> </li> </ul> </li> <li>A partir d'un tuple de symboles <code>(\"\u2665\ufe0f\", \"\u2660\ufe0f\", \"\u2663\ufe0f\", \"\u2666\ufe0f\")</code> et de la liste de rangs <code>[\"As\", \"Roi\", \"Reine\", \"Valet\"] + [*range(2, 11)]</code>. Cr\u00e9er un jeu de cartes sous forme d'une liste de tuples qui est le produit cart\u00e9sien entre les symboles et le rang.</li> <li>Cr\u00e9er une liste de tuples contenant les coordonn\u00e9es des points (x, y) pour x allant de 0 \u00e0 10 et y allant de 0 \u00e0 10.<ul> <li>Exemple: <code>[(0, 0), (0, 1), ..., (10, 10)]</code></li> </ul> </li> <li>Cr\u00e9er une liste de tuples contenant les coordonn\u00e9es des points (x, y) pour x allant de 0 \u00e0 10 et y allant de 0 \u00e0 10. Filtrer les points pour ne garder que ceux dont la somme des coordonn\u00e9es est paire.<ul> <li>Exemple: <code>[(0, 0), (0, 2), (0, 4), ..., (10, 10)]</code></li> </ul> </li> <li>Cr\u00e9er une liste de tuples contenant les coordonn\u00e9es des points (x, y) pour x allant de 0 \u00e0 10 et y allant de 0 \u00e0 10. Filtrer les points pour ne garder que ceux dont la somme des coordonn\u00e9es est paire et x est sup\u00e9rieur \u00e0 y.<ul> <li>Exemple: <code>[(2, 0), (4, 0), (4, 2), ..., (10, 8)]</code></li> </ul> </li> <li>G\u00e9n\u00e9rer une liste de 10 nombres al\u00e9atoires entre 0 et 100.</li> <li>Soit une liste de cha\u00eenes de caract\u00e8res <code>[\"hello\", \"world\", \"python\", \"is\", \"cool\"]</code>. Cr\u00e9er une liste de tuples contenant la cha\u00eene de caract\u00e8res et sa longueur.<ul> <li>Exemple: <code>[(\"hello\", 5), (\"world\", 5), (\"python\", 6), (\"is\", 2), (\"cool\", 4)]</code></li> </ul> </li> </ol> Solutions <pre><code># 1\nprint([x for x in range(0, 20, 2)])\nprint([x for x in range(0, 20) if x % 2 == 0])\n\n# 2\nprint({x: \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\n\n\ndef get_parity(x):\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n\nprint({x: get_parity(x) for x in range(10)})\n\n# 3\nprint({str(x): \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\nprint({f\"{x}\": \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\n\n# 4\nnumbers = {f\"{x}\": \"even\" if x % 2 == 0 else \"odd\" for x in range(10)}\nprint({key: value for key, value in numbers.items() if int(key) % 2 != 0})\n\n# 5\nprint((x for x in range(0, 40, 2)))\n\n# cartes\nsymbols = (\"\u2665\ufe0f\", \"\u2660\ufe0f\", \"\u2663\ufe0f\", \"\u2666\ufe0f\")\nranks = [\"As\", \"Roi\", \"Reine\", \"Valet\"] + [*range(2, 11)]\n\ncards = [(symbol, rank) for symbol in symbols for rank in ranks]\nprint(cards)\n\n# 6\nstudents = [\n    {\"name\": \"Olive\", \"birth_year\": 2001},\n    {\"name\": \"Tom\", \"birth_year\": 1975},\n    {\"name\": \"Alf\", \"birth_year\": 1701},\n]\nprint({x[\"name\"] for x in students})\nprint(tuple(x[\"birth_year\"] for x in students))\n</code></pre>"},{"location":"python/python-exercices/#source","title":"Source","text":"<ul> <li>Exercices corrig\u00e9s d'algorithmique Python - Les bases</li> <li>Exercices du site d\u00e9veloppez</li> <li>Sorting Algorithms Animations</li> <li>Sites pour apprendre en s\u2019amusant</li> </ul>"},{"location":"python/python-func-exercices/","title":"Exerices en prog. fonc.","text":""},{"location":"python/python-func-exercices/#exercices","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> </ul>"},{"location":"python/python-func-exercices/#serie-1","title":"S\u00e9rie 1","text":""},{"location":"python/python-func/","title":"Programmation fonctionnelle","text":""},{"location":"python/python-func/#programmation-fonctionnelle","title":"Programmation fonctionnelle","text":"<ul> <li>Les fonctions sont des \u00e9l\u00e9ments de premi\u00e8re classe : Les fonctions sont comme des variables</li> <li>Utilisation intensive de fonctions pures : fonction sans effet de bord, toujours le m\u00eame r\u00e9sultat pour les m\u00eames entr\u00e9es<ul> <li>exemples de fonctions par pure: print (car elle change la console)</li> </ul> </li> <li>Immutabilit\u00e9<ul> <li>On ne peut pas changer la valeur d'une variable une fois initialis\u00e9e</li> <li>On ne peut pas changer les propri\u00e9t\u00e9s d'un object une fois instanci\u00e9</li> <li>On ne peut pas ajouter ou supprimer des \u00e9l\u00e9ments d'une collection</li> </ul> </li> <li>On le code est d\u00e9velopp\u00e9 sous forme d'une cha\u00eene de traitements (comme dans une usine)</li> </ul>"},{"location":"python/python-func/#relation-entre-la-poo-et-la-programmation-fonctionnelle","title":"Relation entre la POO et la programmation fonctionnelle","text":"<ul> <li>La POO est la prog. fonctionnelle ne sont pas mutuellement exclusifs</li> <li>On peut d\u00e9velopper en POO avec un style fonctionnelle:<ul> <li>Les m\u00e9thodes ne font pas de mutation de champs de l'objet</li> <li>Les propri\u00e9t\u00e9s sont uniquement en read-only</li> <li>Les <code>records</code> simplifient la cr\u00e9ation de ce genre de classes</li> </ul> </li> </ul>"},{"location":"python/python-poo-exercices/","title":"Exerices en POO","text":""},{"location":"python/python-poo-exercices/#exercices-en-poo","title":"Exercices en POO","text":"<p>Consignes</p> <ul> <li>Ne pas se faire aider par des IA ou genAI</li> </ul>"},{"location":"python/python-poo-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>D\u00e9finir une classe <code>Personne</code> avec les attributs <code>nom</code>, <code>prenom</code> et <code>age</code>. Ajouter une m\u00e9thode <code>afficher</code> qui affiche les informations de la personne. Impl\u00e9menter les m\u00e9thodes <code>__eq__</code> et <code>__str__</code>.<ul> <li>Cr\u00e9er quelques personnes et les afficher..</li> <li>Afficher le r\u00e9sultat du <code>==</code></li> </ul> </li> <li>On souhaite g\u00e9rer un collection de consoles et jeux r\u00e9tro avec la POO. D\u00e9finir les classes <code>VideoGame</code> et <code>VideoGameConsole</code>. Chaque classe propose les propri\u00e9t\u00e9s: <code>name</code>, <code>releaseYear</code>. La classe <code>VideoGame</code> a en plus la propri\u00e9t\u00e9 <code>developer</code> qui est la compagnie ou le d\u00e9veloppeur qui a d\u00e9velopp\u00e9 le jeu. La classe <code>VideoGameConsole</code> a en plus la propri\u00e9t\u00e9 <code>manufacturer</code> qui est la compagnie qui a fabriqu\u00e9 la console. Impl\u00e9menter la m\u00e9thode <code>__str__</code>.<ul> <li>Cr\u00e9er une liste <code>consoles</code> qui contient les consoles suivantes avec les <code>name</code>, <code>manufacturer</code> et <code>releaseYear</code> suivants:<ul> <li>DegaDrive, Dega, 1992.</li> <li>Satourne, Dega, 1995.</li> <li>Super Nontendo, Nontendo, 1991.</li> <li>Nontendo, Nontendo, 1983.</li> <li>Ponystation, Pony, 1996.</li> </ul> </li> <li>Cr\u00e9er une liste <code>games</code> qui contient les jeux suivants avec les <code>name</code>, <code>developer</code> et <code>releaseYear</code> suivants:<ul> <li>Sanic, Dega, 1991.</li> <li>Spodermin, Morvel, 1992.</li> <li>Y-Men, Morvel, 1993.</li> <li>Nario, Nontendo, 1985.</li> <li>Zebda, Nontendo, 1986.</li> <li>First Fantasy, Rectangle, 1987.</li> <li>Paper Gear, Bonami, 1987.</li> </ul> </li> <li>A partir de la liste <code>consoles</code>, afficher:<ul> <li>La liste des consoles fabriqu\u00e9es par Nontendo.</li> <li>La liste des consoles sorties \u00e0 partir du 1er janvier 1990.</li> </ul> </li> <li>A partir de la liste <code>games</code>, afficher:<ul> <li>La liste des jeux d\u00e9velopp\u00e9s par Morvel.</li> <li>La liste des jeux sortis \u00e0 partir du premier janvier 1985.</li> </ul> </li> </ul> </li> <li>D\u00e9finir une classe <code>Point</code> qui poss\u00e8de deux propri\u00e9t\u00e9s x et y de type correspondant aux coordonn\u00e9es du point.<ul> <li>Impl\u00e9menter le constructeur <code>__init__(self, x, y)</code> qui permet d'initialiser les coordonn\u00e9es.</li> <li>Impl\u00e9menter la m\u00e9thode <code>__str__</code> qui repr\u00e9sente le point de cette fa\u00e7on (ici, x = 2 et y = 3): <code>Point | x : 2 | y : 3</code></li> <li>Impl\u00e9menter la m\u00e9thode <code>translate(self, tx, ty)</code> qui ajoute <code>tx</code> \u00e0 <code>x</code> et <code>ty</code> \u00e0 <code>y</code>.</li> <li>Impl\u00e9menter la m\u00e9thode <code>distance(self, point)</code> qui retourne la distance entre le point courant et le point pass\u00e9 en param\u00e8tre et retourne cela sous forme d'un point.</li> <li>Instancier deux points et :<ul> <li>Afficher la distance entre les deux points.</li> <li>Translater le premier point de 2 en x et 3 en y.</li> <li>Afficher les deux points.</li> <li>Afficher la nouvelle distance entre les deux points.</li> </ul> </li> </ul> </li> <li>D\u00e9finir une classe <code>BankAccount</code> mod\u00e9lisant un compte en banque. La classe poss\u00e8de deux propri\u00e9t\u00e9s initialis\u00e9es dans le constructeur. <code>balance</code> correspond au solde du compte. <code>managementCost</code> qui correspond au frais de gestion du compte.<ul> <li>Impl\u00e9menter le constructeur <code>__init__(...)</code>.</li> <li>Impl\u00e9menter la m\u00e9thode <code>__str__(self)</code> qui affiche les informations du compte de cette fa\u00e7on: <code>Compte ( solde: 1000\u20ac | frais de gestion: 13\u20ac )</code></li> <li>Impl\u00e9menter la m\u00e9thode <code>debit(self, amount)</code> qui enl\u00e8ve <code>amount</code> au solde du compte uniquement si le solde est suffisant. Elle retourne un bool\u00e9en qui renvoie <code>true</code> si le d\u00e9bit a r\u00e9ussi, sinon <code>false</code>.</li> <li>Impl\u00e9menter la m\u00e9thode <code>send(self, bankAccount, amount)</code> qui transf\u00e8re de l'argent vers un autre compte uniquement si le solde est suffisant. La m\u00e9thode retourne un bool\u00e9en calcul\u00e9 de la m\u00eame fa\u00e7on que la m\u00e9thode <code>debit</code>.</li> <li>Instancier deux comptes et effectuer des op\u00e9rations de d\u00e9bit et de transfert. Afficher l'\u00e9tat de r\u00e9ussite de chaque op\u00e9ration et l'\u00e9tat des comptes apr\u00e8s chaque op\u00e9ration.</li> </ul> </li> <li>On souhaite g\u00e9n\u00e9rer des pr\u00e9dictions m\u00e9t\u00e9orologiques sur une dur\u00e9e de 30 jours et faire des traitements dessus. D\u00e9finir la classe <code>WeatherForecast</code> avec la propri\u00e9t\u00e9 <code>day</code> (entier entre 1 et 30) et <code>temperature</code> (entier qui repr\u00e9sente la temp\u00e9rature en Celsius).<ul> <li>Impl\u00e9menter le constructeur</li> <li>Impl\u00e9menter la m\u00e9thode <code>to_farhenheit(self)</code> qui retourne la temp\u00e9rature en Fahrenheit avec la formule suivante: <code>F = C * 9/5 + 32</code></li> <li>Impl\u00e9menter la m\u00e9thode <code>__str__</code> qui affiche la pr\u00e9vision de cette fa\u00e7on: <code>Jour 1: 20\u00b0C | 68\u00b0F</code></li> <li>Instancier une liste de de 30 pr\u00e9visions pour chacun des jours avec des temp\u00e9ratures al\u00e9atoires sous forme d'entier entre -10 et 40 degr\u00e9s.</li> <li>Calculer les r\u00e9sultats suivants sans utiliser <code>avg</code>, <code>min</code>, <code>max</code>.<ul> <li>La temp\u00e9rature moyenne sur les 30 jours.</li> <li>La temp\u00e9rature la plus faible ainsi que les jours o\u00f9 cette temp\u00e9rature a \u00e9t\u00e9 enregistr\u00e9e. Par exemple si la temp\u00e9rature la plus faible est -10, on doit afficher les jours o\u00f9 -10 a \u00e9t\u00e9 enregistr\u00e9.</li> <li>La temp\u00e9rature la plus \u00e9lev\u00e9e ainsi que les jours o\u00f9 cette temp\u00e9rature a \u00e9t\u00e9 enregistr\u00e9e.</li> <li>Afficher les pr\u00e9visions tri\u00e9es par temp\u00e9rature croissante avec et sans utiliser les m\u00e9thodes de tri pr\u00e9d\u00e9finies.</li> <li>Afficher les pr\u00e9visions tri\u00e9es par temp\u00e9rature d\u00e9croissante avec et sans utiliser les m\u00e9thodes de tri pr\u00e9d\u00e9finies.</li> <li>Le nombre de jours o\u00f9 la temp\u00e9rature est sup\u00e9rieure \u00e0 20\u00b0C et le nombre de jours o\u00f9 la temp\u00e9rature est inf\u00e9rieure \u00e0 0\u00b0C.</li> <li>Un dictionnaire qui compter le nombre pr\u00e9visions qui ont les m\u00eames temp\u00e9ratures. Par exemple si 5 jours ont une temp\u00e9rature de <code>20\u00b0C</code>, et les reste des jours ont <code>-5\u00b0C</code> le dictionnaire sera <code>{\"20\u00b0C\": 5, \"-5\u00b0C\": 25}</code>.</li> </ul> </li> </ul> </li> <li>G\u00e9n\u00e9rateur de personnage RPG et un simulateur de combat.<ul> <li>D\u00e9finir la classe <code>Character</code> avec les attributs <code>name</code>, <code>level</code>, <code>attack</code> et <code>health</code>. Impl\u00e9menter une m\u00e9thode <code>attack(self, target)</code> (o\u00f9 target est un <code>Character</code>) qui diminue la sant\u00e9 de la cible. Ajouter une m\u00e9thode <code>is_alive(self)</code> qui retourne <code>True</code> si le personnage est vivant, <code>False</code> sinon. Impl\u00e9menter le constructeur qui initialise les attributs <code>name</code>, <code>level</code>, <code>attack</code> (entier al\u00e9atoire entre 1 et 5) et <code>health</code> (entier al\u00e9atoire entre 10 et 20). Impl\u00e9menter une m\u00e9thode <code>heal(self)</code> qui r\u00e9tablit <code>health</code> de <code>5 + level // 10</code> (// est la division enti\u00e8re).</li> <li>D\u00e9finir la fonction <code>fight(character1, character2)</code> qui simule un combat entre deux personnages. Le combat se d\u00e9roule de la fa\u00e7on suivante:<ul> <li>Tant que les deux personnages sont vivants, ils s'attaquent \u00e0 tour de r\u00f4le.</li> <li>Le personnage 1 attaque le personnage 2, puis le personnage 2 attaque le personnage 1.</li> <li>L'attaque de p1 envers p2 diminue le <code>health</code> de p2 avec la formule suivante <code>p2.health - p1.attack * (r\u00e9el al\u00e9atoire entre 0.75 et 1.25)</code>.</li> <li>Le d\u00e9roulement du combat est affich\u00e9 au fur et \u00e0 mesure.</li> <li><code>health</code> doit toujours \u00eatre &gt;= 0</li> </ul> </li> <li>D\u00e9finir la fonction <code>fight_alternative(character1, character2)</code> qui reprend le m\u00eame algo que <code>fight</code>, mais permet au joueur actuel d'appeler sa m\u00e9thode <code>heal</code> en plus d'attaquer. La m\u00e9thode <code>heal</code> est appel\u00e9e si un nombre al\u00e9atoire en 50 et 100 g\u00e9n\u00e9r\u00e9 au moment o\u00f9 son tour d\u00e9bute est strictement inf\u00e9rieur \u00e0 son <code>(num\u00e9ro du tour * level) / health</code>. Par exemple, si le joueur 1 a un niveau de 5 et 2 points de vie et qu'au tour 30, le nombre al\u00e9atoire est 60, alors le joueur 1 peut se soigner car <code>(30 * 5) / 2  = 75 est sup\u00e9rieur \u00e0 60</code>. Par contre, si le nombre al\u00e9atoire g\u00e9n\u00e9r\u00e9 \u00e9tait de 75 ou plus, alors le joueur ne peut pas se soigner.</li> </ul> </li> <li>D\u00e9finir une classe <code>Book</code> avec les propri\u00e9t\u00e9s suivantes Python: <code>nb_pages: number,</code>title<code>: string,</code>author<code>: string,</code>isbn<code>: string</code> (ISBN (The International Standard Book Number)) et <code>marked_page: number</code>.<ul> <li>Dans la classe <code>Book</code>, d\u00e9finir une m\u00e9thode <code>mark_page(self, page)</code> qui permet de mettre \u00e0 jour la valeur de <code>marked_page</code> avec la valeur de l'argument <code>page</code>. \u26a0 bien v\u00e9rifier que <code>page</code> soit &lt; \u00e0 <code>nb_pages</code>.</li> <li>Cr\u00e9er une classe <code>Library</code> (Biblioth\u00e8que) qui contient un tableau de livres qui est pass\u00e9 au constructeur. \u26a0 Il y'a une relation entre <code>Library</code> et <code>Book</code> mais ce n'est pas une relation d'h\u00e9ritage. Pour ce cas, on dit que c'est une agr\u00e9gation.</li> <li>Dans la classe <code>Library</code>, d\u00e9finir une m\u00e9thode <code>list_authors()</code> qui retourne un tableau contenant uniquement les noms des auteurs.</li> <li>Dans la classe <code>Library</code>, d\u00e9finir une m\u00e9thode <code>sum_of_marked_pages()</code> qui retourne la somme des <code>marked_page</code> de tous les livres.</li> <li>Instancier une <code>Library</code> avec trois livres</li> <li>Afficher les r\u00e9sultats des appels des m\u00e9thodes <code>list_authors()</code> et <code>sum_of_marked_pages()</code>.</li> <li>Est-ce que la classe <code>Book</code> peuvent exister et \u00eatre utilis\u00e9e ind\u00e9pendamment de <code>Library</code> ?</li> </ul> </li> </ol> Solution Person <pre><code>class Person:\n  def __init__(self, first_name: str, last_name: str, age: int):\n    self.first_name = first_name\n    self.last_name = last_name\n    self.age = age\n\n  def __str__(self):\n    return f\"Person(name: {self.first_name} {self.last_name}, age: {self.age})\"\n\n  def __eq__(self, other: object) -&gt; bool:\n    return isinstance(other, Person) and self.first_name == other.first_name \\\n      and self.last_name == other.last_name and self.age == other.age\n\n\np1 = Person(\"Ram\", \"Bo\", 40)\np2 = Person(\"Ryuuji\", \"Itadori\", 17)\np3 = Person(\"Ryuuji\", \"Itadori\", 17)\n\nprint(p1)\nprint(p2)\nprint(p3)\n\nprint(p1 == 10)\nprint(p1 == p2)\nprint(p2 == p3)\n</code></pre> Solution Retro games and consoles <pre><code>class VideoGameConsole:\n  def __init__(self, name: str, manufacturer: str, release_year: int):\n    self.name = name\n    self.release_year = release_year\n    self.manufacturer = manufacturer\n\n  def __str__(self):\n    return f\"The {self.name} was release in {self.release_year} and manufactured by {self.manufacturer}\"\n\n  def __repr__(self):\n    return self.__str__()\n\nclass VideoGame:\n  def __init__(self, name: str, developer: str, release_year: int):\n    self.name = name\n    self.release_year = release_year\n    self.developer = developer\n\n  def __str__(self):\n    return f\"The game {self.name} was release in {self.release_year} and was developed by {self.developer}\"\n\n  def __repr__(self):\n    return self.__str__()\n\nconsoles: list[VideoGameConsole] = [\n  VideoGameConsole(\"DegaDrive\", \"Dega\", 1992),\n  VideoGameConsole(\"Satourne\", \"Dega\", 1995),\n  VideoGameConsole(\"Super Nontendo\", \"Nontendo\", 1991),\n  VideoGameConsole(\"Nontendo\", \"Nontendo\", 1983),\n  VideoGameConsole(\"Ponystation\", \"Pony\", 1996)\n]\n\ngames: list[VideoGame] = [\n  VideoGame(\"Sanic\", \"Dega\", 1991),\n  VideoGame(\"Spodermin\", \"Morvel\", 1992),\n  VideoGame(\"Y-Men\", \"Morvel\", 1993),\n  VideoGame(\"Nario\", \"Nontendo\", 1985),\n  VideoGame(\"Zebda\", \"Nontendo\", 1986),\n  VideoGame(\"First Fantasy\", \"Rectangle\", 1987),\n  VideoGame(\"Paper Gear\", \"Bonami\", 1987)\n]\n\nnontendo_consoles: list[VideoGameConsole] = []\nninety_consoles : list[VideoGameConsole] = []\nfor console in consoles:\n  if console.manufacturer == \"Nontendo\":\n    nontendo_consoles.append(console)\n  if console.release_year &gt;= 1990:\n    ninety_consoles.append(console)\n\nprint(\"La liste des consoles fabriqu\u00e9es par Nontendo\", nontendo_consoles)\n# Syntaxe de la Compr\u00e9hension\nprint(\"La liste des consoles fabriqu\u00e9es par Nontendo m\u00e9thode 2\", [c for c in consoles if c.manufacturer == \"Nontendo\"])\n\nprint(\"La liste des consoles &gt;= 1990\", ninety_consoles)\nprint(\"La liste des consoles &gt;= 1990 m\u00e9thode 2\", [c for c in consoles if c.release_year &gt;= 1990])\n\nmorvel_games: list[VideoGame] = []\neighty_five_consoles : list[VideoGame] = []\nfor game in games:\n  if game.developer == \"Morvel\":\n    morvel_games.append(game)\n  if game.release_year &gt;= 1985:\n    eighty_five_consoles.append(game)\n\nprint(\"La liste des jeux d\u00e9velopp\u00e9s par Morvel\", morvel_games)\nprint(\"La liste des jeux d\u00e9velopp\u00e9s par Morvel m\u00e9thode 2\", [g for g in games if g.developer == \"Morvel\"])\n\nprint(\"La liste des jeux &gt;= 1990\", eighty_five_consoles)\nprint(\"La liste des jeux &gt;= 1990 m\u00e9thode 2\", [g for g in games if g.release_year &gt;= 1985])\n</code></pre>"},{"location":"python/python-poo-exercices/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Donner deux exemples de relation d'h\u00e9ritage \u00e0 un niveau.<ul> <li>Par exemple l'\u00e9tudiant est une personne.</li> </ul> </li> <li>Donner deux exemples de relation d'h\u00e9ritage \u00e0 deux niveaux.<ul> <li>Par exemple : un t\u00e9l\u00e9phone est un appareil \u00e9lectronique, un appareil \u00e9lectronique est un appareil.</li> </ul> </li> <li>Trouver les relations d'h\u00e9ritage possibles pour chacun de ses groupes de classes (traiter chaque ligne ind\u00e9pendamment):<ul> <li><code>\u00catre vivant</code>, <code>Homme</code>, <code>Animal</code></li> <li><code>Meuble</code>, <code>Fauteuil</code>, <code>Armoire</code>, <code>Table</code>.</li> <li><code>Aliment</code>, <code>P\u00e2tisserie</code>, <code>Mille-Feuilles</code>, <code>Croissant</code>, <code>Pain</code>, <code>Fruit</code>, <code>Pomme</code>, <code>Banane</code></li> <li>Aucun code python n'est demand\u00e9.</li> </ul> </li> <li>Donner une classe parente pour chaque groupe de classes (traiter chaque ligne ind\u00e9pendamment):<ul> <li>Ordinateur portable, ordinateur fixe</li> <li>Ordinateur portable, ordinateur fixe, Switch, Xbox, Playstation</li> <li>Voiture, Camion, V\u00e9lo, Trottinette</li> </ul> </li> <li>Un fermier \u00e9l\u00e8ve des animaux et cultive des arbres fruitiers. Il a un nom et peut arroser. Chaque animal a une date de naissance et un \u00e9tat de sant\u00e9. Chaque Arbre fruitier a une hauteur Le fermier a deux vaches, 4 poules, un pommier et deux poiriers. D\u00e9finir les classes en UML et les coder en Python.</li> <li>Un garage r\u00e9pare des v\u00e9hicules et vend des pi\u00e8ces. Il r\u00e9pare des voitures, des camions, des v\u00e9los et des trottinettes. Il vend des pneus, des moteurs, des batteries et des phares. D\u00e9finir les classes en UML et les coder en Python.</li> <li>R\u00e9pondre aux questions suivantes :<ul> <li>L'h\u00e9ritage correspondant \u00e0 une relation \u00eatre ou avoir ?</li> <li>Donner deux avantages de l'h\u00e9ritage.</li> <li>Est-ce que <code>t</code> est un objet, classe ou une instance <code>t = Shell()</code> ?</li> <li>Que repr\u00e9sente <code>super()</code> en Python ?</li> </ul> </li> </ol> Solutions <ul> <li>Exemples de relation d'h\u00e9ritage \u00e0 un niveau :<ul> <li><code>Personne</code> h\u00e9rite de <code>\u00catre vivant</code>.</li> <li><code>Homme</code> h\u00e9rite de <code>Personne</code>.</li> </ul> </li> <li>Exemples de relation d'h\u00e9ritage \u00e0 deux niveaux :<ul> <li><code>T\u00e9l\u00e9phone</code> h\u00e9rite de <code>Appareil \u00e9lectronique</code> qui h\u00e9rite de <code>Appareil</code>.</li> <li><code>V\u00e9hicule</code> h\u00e9rite de <code>Moyen de transport</code> qui h\u00e9rite de <code>Objet mouvant</code>.</li> </ul> </li> <li>Relations d'h\u00e9ritage possibles :<ul> <li><code>\u00catre vivant</code> est une classe parente de <code>Homme</code> et <code>Animal</code>.</li> <li><code>Meuble</code> est une classe parente de <code>Fauteuil</code>, <code>Armoire</code> et <code>Table</code>.</li> <li><code>Aliment</code> est une classe parente de <code>P\u00e2tisserie</code>, <code>Fruit</code> et <code>Pain</code>.</li> </ul> </li> <li>Classe parente pour chaque groupe de classes :<ul> <li><code>Ordinateur</code> est une classe parente de <code>Ordinateur portable</code> et <code>Ordinateur fixe</code>.</li> <li><code>Appareil \u00e9lectronique</code> est une classe parente de <code>Ordinateur portable</code>, <code>Ordinateur fixe</code>, <code>Switch</code>, <code>Xbox</code> et <code>Playstation</code>.</li> <li><code>Objet mouvant</code> est une classe parente de <code>Voiture</code>, <code>Camion</code>, <code>V\u00e9lo</code> et <code>Trottinette</code>.</li> </ul> </li> <li>Questions<ul> <li>L'h\u00e9ritage correspondant \u00e0 une relation \u00eatre.</li> <li>Deux avantages de l'h\u00e9ritage:<ul> <li>R\u00e9utilisation du code.</li> <li>Factorisation du code.</li> </ul> </li> <li><code>t</code> est une instance de la classe <code>Shell</code> ou un objet de type <code>Shell</code>.</li> <li><code>super()</code> permet d'appeler une m\u00e9thode de la classe parente.</li> </ul> </li> </ul> Fermier<pre><code>class Animal:\n    def __init__(self, date_naissance, etat_sante):\n        \"\"\"etat_stante est \u00e9gal \u00e0 0 si tout va bien et 1 si l'animal est malade\"\"\"\n        self.date_naissance = date_naissance\n        self.etat_sante = etat_sante\n\n    def __repr__(self):\n        return f\"({self.__class__.__name__}: {self.date_naissance})\"\n\n\nclass Vache(Animal):\n    pass\n\n\nclass Poule(Animal):\n    pass\n\n\nclass ArbreFruitier:\n    def __init__(self, hauteur):\n        self.hauteur = hauteur\n\n    def __repr__(self):\n        return f\"({self.__class__.__name__}: {self.hauteur})\"\n\n\nclass Pommier(ArbreFruitier):\n    pass\n\n\nclass Poirier(ArbreFruitier):\n    pass\n\nclass Fermier:\n    def __init__(self, nom, animaux = [], arbres_fruitiers = []):\n        self.nom = nom\n        self.animaux = animaux\n        self.arbres_fruitiers = arbres_fruitiers\n\n    def arroser(self):\n        print(\"\ud83d\udca6\ud83c\udf31\")\n\n    def __str__(self):\n        return f\"{self.nom}. Animaux: {self.animaux}. Fruits: {self.arbres_fruitiers}\"\n\n\n\nanimaux = [\n    Vache(\"2024-01-10\", 0),\n    Vache(\"2023-05-11\", 1),\n    Poule(\"2001-06-02\", 0),\n    Poule(\"2020-06-24\", 0),\n    Poule(\"2023-05-11\", 0),\n    Poule(\"2023-05-11\", 0),\n]\n\narbres_fruitiers = [\n    Pommier(10),\n    Poirier(50),\n    Poirier(25)\n]\n\nfermier = Fermier(\"Fave\", animaux, arbres_fruitiers)\nprint(fermier)\n</code></pre>"},{"location":"python/python-poo-exercices/#serie-3","title":"S\u00e9rie 3","text":"<ol> <li>D\u00e9finir la classe <code>StringUtils</code> qui contient les m\u00e9thodes statiques suivantes:<ul> <li><code>is_palindrome(word: str) -&gt; bool</code> qui retourne <code>True</code> si le mot est un palindrome, <code>False</code> sinon</li> <li><code>count_vowels(word: str) -&gt; int</code> qui retourne le nombre de voyelles dans le mot</li> <li><code>count_uppercase(word: str) -&gt; int</code> qui retourne le nombre de majuscules dans le mot</li> <li><code>count_lowercase(word: str) -&gt; int</code> qui retourne le nombre de minuscules dans le mot</li> <li>Appeler les diff\u00e9rentes m\u00e9thodes de cette classe</li> </ul> </li> <li>D\u00e9finir la classe <code>TaxUtils</code> qui contient les m\u00e9thodes statiques suivantes:<ul> <li><code>compute_ttc(price_ht: float, vat_rate: float) -&gt; float</code> qui retourne le montant TTC</li> <li><code>compute_tva(price: float, vat_rate: float) -&gt; float</code> qui retourne le montant de la TVA</li> <li>Appeler les diff\u00e9rentes m\u00e9thodes de cette classe</li> </ul> </li> <li>D\u00e9finir la classe abstraite <code>Shape</code> qui contient les m\u00e9thodes abstraites suivantes:<ul> <li><code>area() -&gt; float</code> qui retourne l'aire de la forme</li> <li><code>perimeter() -&gt; float</code> qui retourne le p\u00e9rim\u00e8tre de la forme</li> <li>D\u00e9finir les classes <code>Rectangle</code>, <code>Circle</code> et <code>Triangle</code> qui h\u00e9ritent de <code>Shape</code> et impl\u00e9mentent les m\u00e9thodes abstraites.</li> </ul> </li> </ol> Solutions StringUtils.py<pre><code>class StringUtils:\n\n    @staticmethod\n    def is_palindrome_method_1(s: str) -&gt; bool:\n        return s == s[::-1]\n\n    @staticmethod\n    def is_palindrome_method_2(s: str) -&gt; bool:\n        for i in range(len(s) // 2):\n            if s[i] != s[-i-1]:\n                return False\n        return True\n\n    @staticmethod\n    def count_vowels_method_1(s: str) -&gt; int:\n        count = 0\n        for c in s.lower():\n            if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" or c == \"y\":\n                count += 1\n        return count\n\n    @staticmethod\n    def count_vowels_method_2(s: str) -&gt; int:\n        count = 0\n        for c in s.lower():\n            if c in \"aeiouy\":\n                count += 1\n        return count\n\n    @staticmethod\n    def count_vowels_method_3(s: str) -&gt; int:\n        return len([c for c in s.lower() if c in \"aeiouy\"])\n\n    @staticmethod\n    def count_uppercase_method_1(s: str) -&gt; int:\n        count = 0\n        upper_s = s.upper()\n        for i in range(len(s)):\n            # sans le deuxi\u00e8me test (le grand and), la m\u00e9thode n'est tr\u00e8s efficace car elle ne g\u00e8re pes les string qui contiennt autre chose que des lettres\n            if s[i] == upper_s[i] and (\"A\" &lt;= s[i] &lt;= \"Z\" or \"a\" &lt;= s[i] &lt;= \"z\"):\n                count += 1 # \u00e9quivalent \u00e0 count = count + 1\n        return count\n\n    @staticmethod\n    def count_uppercase_method_2(s: str) -&gt; int:\n        count = 0\n        for i in range(len(s)):\n            if s[i] in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                count += 1 # \u00e9quivalent \u00e0 count = count + 1\n        return count\n\n    @staticmethod\n    def count_uppercase_method_3(s: str) -&gt; int:\n        count = 0\n        for i in range(len(s)):\n            # ordre du dictionnaire de Fran\u00e7ais\n            if \"A\" &lt;= s[i] &lt;= \"Z\":\n                count += 1 # \u00e9quivalent \u00e0 count = count + 1\n        return count\n\n\nprint(StringUtils.is_palindrome_method_1(\"Hello\"))\nprint(StringUtils.is_palindrome_method_1(\"kayak\"))\n\nprint(StringUtils.is_palindrome_method_2(\"Hello\"))\nprint(StringUtils.is_palindrome_method_2(\"kayak\"))\n\nprint(StringUtils.count_vowels_method_1(\"Python\"), \n      StringUtils.count_vowels_method_2(\"Python\"),\n      StringUtils.count_vowels_method_3(\"Python\"))\n\nprint(StringUtils.count_uppercase_method_1(\"I Love Python\"), \n      StringUtils.count_uppercase_method_2(\"I Love Python\"),\n      StringUtils.count_uppercase_method_3(\"I Love Python\"))\n\nprint(\"slicing\")\nnumbers = [2, 5, -1, 6, 9, 11, 21]\nprint(numbers[::], numbers[::2], numbers[::-1], numbers[::-3])\nprint(numbers[1:5],numbers[1:], numbers[:4], numbers[:-2])\nprint(numbers[1:5:2], numbers[1:5:-1], numbers[5:1:-1], numbers[-2:0:-2])\n</code></pre> GeometricShapes.py<pre><code>from abc import ABC, abstractmethod\nimport math\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self) -&gt; float:\n        pass\n\n    @abstractmethod\n    def perimeter(self) -&gt; float:\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, length: float, width: float):\n        super().__init__()\n        self.lenght = length\n        self.width = width\n\n    def area(self) -&gt; float:\n        return self.width * self.lenght\n\n    def perimeter(self) -&gt; float:\n        return (self.width + self.lenght) * 2\n\nclass Circle(Shape):\n    def __init__(self, radius: float):\n        super().__init__()\n        self.radius = radius\n\n    def area(self) -&gt; float:\n        return (self.radius ** 2) *  math.pi\n\n    def perimeter(self) -&gt; float:\n        return self.radius * 2 * math.pi\n\nclass Triangle(Shape):\n    \"\"\"On suppose qu'on donne une base et une hauteur ainsi que les deux autres c\u00f4t\u00e9.\n    A faire en exercice: se baser uniquement sur les c\u00f4t\u00e9s\"\"\"\n    def __init__(self, b: float, h: float, c2: float, c3: float):\n        super().__init__()\n        self.b = b\n        self.h = h\n        self.c2 = c2\n        self.c3 = c3\n\n    def perimeter(self) -&gt; float:\n        return self.b + self.c2 + self.c3\n\n    def area(self) -&gt; float:\n        return (self.b * self.h) / 2\n\nshapes = (Rectangle(10, 2.5), Rectangle(9, 3), Circle(9), Circle(1.8), Triangle(10, 10, 10, 14.142))\nfor shape in shapes:\n    print(\"area\", shape.area(), \"perimeter\", shape.perimeter())\n</code></pre>"},{"location":"python/python-poo-exercices/#serie-4","title":"S\u00e9rie 4","text":"<ol> <li>Nous souhaitons d\u00e9finir les classes d'un futur jeu MOBA qui va cartonner s\u00e9v\u00e8re. Le jeu sera en 2D en vue du dessus. Dans ce jeu nous aurons des h\u00e9ros qui affrontent des monstres.<ul> <li>Les h\u00e9ros et les monstres ont tous des HP (points de vie), des MP (points de magie), un nom, une position dans la carte et une hitbox (rectangle de d\u00e9tection des d\u00e9g\u00e2ts).</li> <li>Un h\u00e9ro peut \u00eatre soit un tank, soit un mage, soit un soigneur ou soit un guerrier. Chaque h\u00e9ro a un niveau et une comp\u00e9tence propre (le h\u00e9ros fait 10 d\u00e9g\u00e2ts, le mage fait 20 d\u00e9g\u00e2ts et perd 5 mp, le tank donne 2 de ses hp et le soigneur fait gagner 30 hp et perd 8 mp). Tous les h\u00e9ros commencent au niveau 1 avec des valeurs de HP et MP al\u00e9atoires compris entre 100 et 200 et entre 50 et 100 respectivement. Les guerriers commencent avec 0 MP.</li> <li>Un monstre peut \u00eatre soit un minion, soit un buldozer. Les monstres ont 0 MP et ont des hp al\u00e9atoires compris entre 30 et 70.</li> <li>Repr\u00e9senter les diff\u00e9rentes classes en UML et les coder en Python.</li> </ul> </li> </ol> Solution moba <pre><code>import random\nfrom abc import abstractmethod, ABC\n\nclass Point:\n    def __init__(self, x, y) -&gt; None:\n        self.x = x\n        self.y = y\n\n\nclass Rectangle:\n    def __init__(self, p: Point, width: int, height: int) -&gt; None:\n        self.p = p\n        self.width = width\n        self.height = height\n\n\nclass Character:\n    def __init__(self, name, hp, mp, position: Point, hitbox: Rectangle) -&gt; None:\n        self.name = name\n        self.hp = hp\n        self.mp = mp\n        self.position = position\n        self.hitbox = hitbox\n\n    def __str__(self) -&gt; str:\n        \"\"\" \" __nom__ -&gt; dunder (jargon python)\"\"\"\n        return (\n            f\"{self.__class__.__name__} (name={self.name}, hp={self.hp}, mp={self.mp})\"\n        )\n\n    def __repr__(self):\n        \"\"\"print d'une liste appelle cette m\u00e9thode au lieu de __str__\"\"\"\n        return self.__str__()\n\n\nclass Hero(Character, ABC):\n    def __init__(self, name, position, hitbox) -&gt; None:\n        hp = random.randint(100, 200)\n        mp = random.randint(50, 100)\n        super().__init__(name, hp, mp, position, hitbox)\n        self.level = 1\n\n    def attack(self, monster):\n        monster.hp -= 2\n        print(self, \"inflige 2 de d\u00e9g\u00e2ts. Nouvel \u00e9tat du monstre\", monster)\n\n\n    @abstractmethod\n    def perform_skill(self, character):\n        print(\n            self,\n            \"a appliqu\u00e9 une comp\u00e9tence a un personnage dont le nouvel \u00e9tat est:\",\n            character,\n        )\n\n\nclass Warrior(Hero):\n    def __init__(self, name, position, hitbox) -&gt; None:\n        super().__init__(name, position, hitbox)\n        self.mp = 0\n\n    def perform_skill(self, character):\n        character.hp = max(character.hp - 10, 0)\n        super().perform_skill(self, character)\n\n\nclass Mage(Hero):\n    def perform_skill(self, character):\n        if self.mp &lt; 5:\n            return\n        character.hp = max(character.hp - 20, 0)\n        self.mp -= 5\n        super().perform_skill(character)\n\n\nclass Tank(Hero):\n    def perform_skill(self, character):\n        if self.hp &lt; 2:\n            return\n        character.hp += 2\n        self.hp -= 2\n        super().perform_skill(character)\n\n\nclass Healer(Hero):\n    def perform_skill(self, character):\n        if self.mp &lt; 8:\n            return\n        character.hp += 30\n        self.mp -= 8\n        super().perform_skill(character)\n\n\nclass Monster(Character):\n    def __init__(self, name, position, hitbox) -&gt; None:\n        super().__init__(name, random.randint(30, 70), 0, position, hitbox)\n\n    def attack(self, hero):\n        hero.hp -= 1\n        print(self, \"inflige 1 de d\u00e9g\u00e2t. Nouvel \u00e9tat du h\u00e9ro\", hero)\n\n\nclass Minion(Monster):\n    pass\n\n\nclass Buldozer(Monster):\n    pass\n\n\nmage = Mage(\n    \"Ryze\",\n    Point(10, 10),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nwarrior = Warrior(\n    \"Gerran\",\n    Point(50, 100),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nhealer = Healer(\n    \"Sorakan\",\n    Point(50, 50),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\ntanky = Tank(\n    \"tanky\",\n    Point(70, 50),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nminion1 = Minion(\n    \"m1\",\n    Point(200, 500),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nminion2 = Minion(\n    \"m2\",\n    Point(200, 500),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nb1 = Buldozer(\n    \"b1\",\n    Point(200, 500),\n    Rectangle(Point(0, 0), 100, 100),\n)\n\nheroes = [mage, healer, warrior, tanky]\nmonsters = [minion1, minion2, b1]\n\nprint(\"h\u00e9ros\", heroes)\nprint(\"monstres\", monsters)\n\nwarrior.attack(b1)\nmage.perform_skill(minion1)\nhealer.perform_skill(mage)\n</code></pre>"},{"location":"python/python-poo.en/","title":"Object Oriented Programming","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"python/python-poo.en/#object-oriented-programming","title":"Object oriented programming","text":"<p>The OOP paradigm sees the program as a collection of objects that interact with each other.</p>"},{"location":"python/python-poo.en/#classes-objects-and-inheritance","title":"Classes, objects, and inheritance","text":"<ul> <li>Each object is defined by a class, which itself can inherit from other classes or interfaces.</li> <li>A class can define properties and methods, which are called members.<ul> <li>Property: a view on data through its read and/or write accessors (called getters and setters, respectively).</li> <li>Method: a function defined within the class.</li> <li>Constructor: a special method that is automatically called when an instance is created.</li> </ul> </li> <li>In Python, the first argument of methods and the constructor is a reference to the current object.<ul> <li>The name of this argument must be <code>self</code> (called <code>this</code> in other languages).</li> <li><code>self</code> is called the method's context.</li> </ul> </li> <li>A child class can inherit from a parent class:<ul> <li>In this case, the child class implicitly contains all the members of the parent class.</li> <li>The child class can define additional members that are specific to it.</li> <li>The child class can override members of the parent class. This is called overriding.</li> </ul> </li> <li>Python is one of the few languages (along with C++) that allows multiple inheritance, i.e., a class can inherit from multiple classes at the same time.</li> </ul> <pre><code>class Rectangle:\n    def __init__(self, x, y, width, height):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return (self.width + self.height) * 2\n\n    def __str__(self):\n        return f\"x: {self.x}, ...\"\n\n\nr = Rectangle(10, 1, 100, 5)\nprint(r)\n</code></pre> <pre><code>class Person:\n    # constructeur\n    # self est l'\u00e9quivalent du this dans les autres langages\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def say_name(self):\n        print(self.name)\n\n    def __str__(self):\n        return f\"Person: {self.name} - {self.age}\"\n\n\nclass Student(Person):\n    def __init__(self, num_student, name, age):\n        self.num_student = num_student\n        # appel du constrcteur parent\n        super().__init__(name, age)\n\n    def __str__(self):\n        return f\"Student {self.num_student}, Parent __str__:\" + super().__str__()\n\n\npDico = {\"name\": \"dfsdfs\", \"age\": 230}\n\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)\np1.age = 10\np1.say_name()\nprint(p1, pDico)\n\ns = Student(\"2323JFLSJ\", \"A\", 19)\nprint(s)\n</code></pre>"},{"location":"python/python-poo.en/#static-and-abstract-concepts","title":"Static and abstract concepts","text":"<ul> <li>Static property, method, or class:<ul> <li>Instance property: each instance has its own instance properties.</li> <li>Static property: it is shared among all instances (like a global variable for the class).</li> <li>Instance method: it is executed in the context of the instance that called it (accessible via <code>self</code>).</li> <li>Static method: a method that only has access to the static properties and methods of its class.</li> <li>Static class: a class that cannot be instantiated and only contains static properties and methods.</li> </ul> </li> <li>Abstract method, property, and class:<ul> <li>Abstract method: a method that has no implementation.</li> <li>Abstract property: a property whose accessors are not defined.</li> <li>Abstract class: a class that has at least one abstract property or method.</li> <li>Abstract members are intended to be defined by a non-abstract subclass.</li> </ul> </li> </ul>"},{"location":"python/python-poo/","title":"Programmation orient\u00e9e objet","text":"<ul> <li>English</li> </ul>"},{"location":"python/python-poo/#programmation-orientee-objet","title":"Programmation orient\u00e9e objet","text":"<p>Le paradigme OOP voit le programme comme un ensemble d'objets qui interagissent entre eux.</p>"},{"location":"python/python-poo/#classes-objets-et-heritage","title":"Classes, objets et h\u00e9ritage","text":"<ul> <li>Chaque objet est d\u00e9fini par une classe qui elle m\u00eame h\u00e9rite d'autres classes ou interfaces.</li> <li>Une classe peut d\u00e9finir des propri\u00e9t\u00e9s et des m\u00e9thodes, qu'on appelle des membres.<ul> <li>Propri\u00e9t\u00e9 : une vue sur une donn\u00e9e via ses accesseurs en lecture et / ou \u00e9criture (qu'on appelle getters et setters respectivement).</li> <li>M\u00e9thode : fonction qui est d\u00e9finie au sein de la classe</li> <li>Constructeur : m\u00e9thode particuli\u00e8re qui sera appel\u00e9e automatiquement au moment de la cr\u00e9ation de l'instance</li> </ul> </li> <li>En python, le premier argument des m\u00e9thodes et du constructeur est une r\u00e9f\u00e9rence vers l'objet actuel<ul> <li>Le nom de cet argument doit s'appeler <code>self</code> (appel\u00e9 <code>this</code> dans d'autres langages)</li> <li>On appelle <code>self</code> le contexte de la m\u00e9thode</li> </ul> </li> <li>Une classe enfant peut h\u00e9riter d'une classe parente:<ul> <li>Dans ce cas, la classe enfant contiendra implicitement tous les membres de la classe m\u00e8re</li> <li>La classe enfant peut d\u00e9finir des membres suppl\u00e9mentaires qui lui seront propres</li> <li>La classe enfant peut red\u00e9finir des membres de classe parent. On appelle cela une surcharge ou override en Anglais.</li> </ul> </li> <li>Python est l'un des rares langages (avec le C++) \u00e0 permettre l'h\u00e9ritage multiple. i.e. une classe peut h\u00e9riter de plusieurs classes \u00e0 la fois.</li> </ul> D\u00e9finition d'une classe<pre><code>class Rectangle:\n    def __init__(self, x, y, width, height):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return (self.width + self.height) * 2\n\n    def __str__(self):\n        return f\"x: {self.x}, ...\"\n\n\nr = Rectangle(10, 1, 100, 5)\nprint(r)\n</code></pre> H\u00e9ritage<pre><code>class Person:\n    # constructeur\n    # self est l'\u00e9quivalent du this dans les autres langages\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def say_name(self):\n        print(self.name)\n\n    def __str__(self):\n        return f\"Person: {self.name} - {self.age}\"\n\n\nclass Student(Person):\n    def __init__(self, num_student, name, age):\n        self.num_student = num_student\n        # appel du constrcteur parent\n        super().__init__(name, age)\n\n    def __str__(self):\n        return f\"Student {self.num_student}, Parent __str__:\" + super().__str__()\n\n\npDico = {\"name\": \"dfsdfs\", \"age\": 230}\n\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)\np1.age = 10\np1.say_name()\nprint(p1, pDico)\n\ns = Student(\"2323JFLSJ\", \"A\", 19)\nprint(s)\n</code></pre>"},{"location":"python/python-poo/#agregation-composition-et-association","title":"Agr\u00e9gation, composition et association","text":"<ul> <li>L'agr\u00e9gation et la composition repr\u00e9sentent la relation avoir (l'h\u00e9ritage repr\u00e9sente la relation \u00eatre pour rappel)/<ul> <li>L'agr\u00e9gation est une relation entre deux classes o\u00f9 une classe contient une r\u00e9f\u00e9rence vers une autre classe.</li> <li>La composition est une relation plus forte que l'agr\u00e9gation. Dans ce cas, la classe enfant ne peut pas exister sans la classe parente.</li> </ul> </li> <li>L'association est une relation entre deux classes o\u00f9 une classe utilise l'autre sans en contenir une r\u00e9f\u00e9rence.</li> </ul> <pre><code>class Salary:\n    def __init__(self, pay):\n        self.pay = pay\n\n    def get_total(self):\n        return self.pay * 12\n\n\nclass Car:\n    pass\n\n\nclass House:\n    pass\n\n\nclass Computer:\n    def turn_on(self):\n        print(\"Turning on\")\n\n\nclass Employee:\n    def __init__(self, pay, bonus, posessions):\n        self.bonus = bonus\n        # Composition\n        self.salary = Salary(pay)\n        # Agr\u00e9gation\n        self.posessions = posessions\n\n    def compute_annual_salary(self):\n        return self.salary.get_total() + self.bonus\n\n    def work(self, computer):\n        \"\"\"Association entre Employee et Computer\"\"\"\n        computer.turn_on()\n\n\nc1 = Car()\nc2 = Car()\nh = House()\nemp = Employee(100, 10, [c1, c2, h])\nprint(emp.compute_annual_salary())\ncomp = Computer()\nemp.work(comp)\n</code></pre>"},{"location":"python/python-poo/#uml","title":"UML","text":"<ul> <li>UML (Unified Modeling Language) est un langage de mod\u00e9lisation graphique pour la conception de logiciels.</li> <li>Il permet de repr\u00e9senter les classes, les objets, les relations entre les objets, les cas d'utilisation, les s\u00e9quences, etc.</li> </ul> <p>Voici un exemple de diagramme de classe UML qui illustre l'h\u00e9ritage entre deux classes :</p> <p></p> Deux classes qui h\u00e9ritent d'une classe<pre><code>class SchoolPerson:\n  \"\"\"Classe de base ou une classe m\u00e8re pour les classes Student et Teacher\"\"\"\n  def __init__(self, name, id, address):\n    self.name = name\n    self.id = id\n    self.address = address\n\n  def __str__(self):\n    return f\"[SchoolPerson: {self.name}, {self.id}, {self.address}]\"\n\nclass Student(SchoolPerson):\n  \"\"\"Un Student 'est' un SchoolPerson donc Student peut h\u00e9riter de SchoolPerson\"\"\"\n  def __init__(self, name, id, address):\n    super().__init__(name, id, address)\n\n\nclass Teacher(SchoolPerson):\n  \"\"\"Un Teacher 'est' un SchoolPerson donc Teacher peut h\u00e9riter de SchoolPerson\"\"\"\n  def __init__(self, name, id, address, contract_type):\n    super().__init__(name, id, address)\n    self.contract_type = contract_type\n\n  def __str__(self):\n    #return f\"[Teacher: {self.name}, {self.id}, {self.address}, {self.contract_type}]\"\n    return f\"[Teacher: {self.contract_type}, ({super().__str__()})]\"\n\ns1 = Student(\"a\", \"12354S\", \"Home\")\nt1 = Teacher(\"b\", \"82546T\", \"Teacher Home\", \"Occasionnel\")\nprint(s1, t1)\n</code></pre> <p>Voici un exemple de diagramme qui illustre l'association et la la composition :</p> <p></p> Deux classes qui h\u00e9ritent d'une classe<pre><code>import datetime\n\n\nclass LivingBeing:\n    def __init__(self, name, birth_date) -&gt; None:\n        self.name = name\n        self.birth_date = birth_date\n\n\nclass Brain:\n    def __init__(self, volume) -&gt; None:\n        self.volume = volume\n\n\nclass Hand:\n    def __init__(self, finger_count) -&gt; None:\n        self.finger_count = finger_count\n\n    def do_thumbs_up(self):\n        print(\"\ud83d\udc4d\")\n\n\nclass Heart:\n    pass\n\n\nclass Human(LivingBeing):\n    def __init__(\n        self, name, birth_date, social_security_number, height, heart, brain_volume\n    ) -&gt; None:\n        super().__init__(name, birth_date)\n        self.social_security_number = social_security_number\n        self.height = height\n        # Composition\n        self.brain = Brain(brain_volume)\n        self.hands = [Hand(3), Hand(12)]\n        # Agr\u00e9gation\n        self.heart = heart\n        self.hp = 10\n\n    def walk(self, distance):\n        print(f\"\ud83d\udeb6 during {distance} KM\")\n\n    def sleep(self, duration):\n        print(f\"It's time to \ud83d\ude34 for {duration} minutes\")\n\n    def talk(self, sentence):\n        print(f\"\ud83d\udde3\ufe0f: {sentence}\")\n\n    def eat(self, fruit):\n        print(f\"miam la pomme {fruit}\")\n        fruit.weight = 1\n        self.hp += 10\n\n    def heal(self, human):\n        print(f\"Soin appliqu\u00e9 \u00e0 {human}\")\n        human.hp += 3\n\n    def __str__(self) -&gt; str:\n        return f\"Human: hp -&gt; {self.hp}\"\n\n\nclass Fruit:\n    def __init__(self) -&gt; None:\n        self.weight = 10\n\n    def __str__(self) -&gt; str:\n        return f\"Fruit: weight -&gt; {self.weight}\"\n\n\nheart = Heart()\nhuman1 = Human(\"R\u00e9mie\", datetime.datetime(2003, 8, 15), 1_987_687_686, 175, heart, 2)\n\nprint(\"brain volume\", human1.brain.volume, \"M3\")\nhuman1.sleep(10)\nhuman1.walk(2000)\nhuman1.talk(\"hahaha\")\n\na1 = Fruit()\na2 = Fruit()\n\nhuman1.eat(a1)\nhuman1.eat(a2)\n\nh2 = Human(\"Dupont\", datetime.datetime(2000, 8, 15), 100, 175, Heart(), 2)\nhuman1.heal(h2)\n\nprint(human1, h2)\n</code></pre>"},{"location":"python/python-poo/#proprietes-classes-et-methodes-statiques","title":"Propri\u00e9t\u00e9s, classes et m\u00e9thodes statiques","text":"<ul> <li>Propri\u00e9t\u00e9 d'instance : chaque instance a ses propres propri\u00e9t\u00e9s d'instances</li> <li>Propri\u00e9t\u00e9 statique : elle sera partag\u00e9e entre toutes les instances (comme une variable globale pour la classe)</li> <li>M\u00e9thode d'instance : sera ex\u00e9cut\u00e9e dans le contexte de l'instance qui l'a appel\u00e9e (accessible via <code>self</code>)</li> <li>M\u00e9thode statique : m\u00e9thode qui a comme contexte que les propri\u00e9t\u00e9s et m\u00e9thodes statiques de sa classe</li> <li>Classe statique : une classe qui ne peut pas \u00eatre instanci\u00e9e et ne contiendra donc que des propri\u00e9t\u00e9s et m\u00e9thodes statiques</li> </ul> <pre><code>class Calculator:\n  PI = 3.14\n\n  @staticmethod\n  def add(x, y):\n    return x + y\n\n  @staticmethod\n  def multiply(x, y):\n    return x * y\n\n  @staticmethod\n  def compute_circle_area(r):\n    return r * r * Calculator.PI\n\n\nprint(Calculator.add(5, -8), Calculator.multiply(73, 0.8))\nprint(Calculator.PI, Calculator.compute_circle_area(8))\n</code></pre>"},{"location":"python/python-poo/#proprietes-classes-et-methodes-abstraites","title":"Propri\u00e9t\u00e9s, classes et m\u00e9thodes abstraites","text":"<ul> <li>M\u00e9thode abstraite: m\u00e9thode qui n'a pas d'impl\u00e9mentation</li> <li>Propri\u00e9t\u00e9 abstraite: propri\u00e9t\u00e9 dont les accesseurs ne sont pas d\u00e9finis</li> <li>Classe abstraite: une classe qui a au moins une propri\u00e9t\u00e9 ou m\u00e9thode abstraite</li> <li>Les membres abstraits sont destin\u00e9s \u00e0 \u00eatre d\u00e9finis par une sous-classe non abstraite.</li> </ul> <pre><code>from abc import ABC, abstractmethod\nimport random\n\n\nclass SchoolPerson(ABC):\n    def __init__(self, name, id, address):\n        self.name = name\n        self.id = id\n        self.address = address\n\n    def __str__(self):\n        return f\"[SchoolPerson: {self.name}, {self.id}, {self.address}]\"\n\n    @abstractmethod\n    def attend_class(self):\n        \"\"\"@abstractmethod rend l'instanciationd de cette classe impossible et oblige les sous-classes \u00e0 impl\u00e9menter la m\u00e9thode\"\"\"\n        pass\n\n\nclass Student(SchoolPerson):\n    \"\"\"Un Student 'est' un SchoolPerson donc Student peut h\u00e9riter de SchoolPerson\"\"\"\n\n    def __init__(self, name, id, address):\n        super().__init__(name, id, address)\n\n    def attend_class(self):\n        print(\"I learn\")\n\n\nclass Teacher(SchoolPerson):\n    \"\"\"Un Teacher 'est' un SchoolPerson donc Teacher peut h\u00e9riter de SchoolPerson\"\"\"\n\n    def __init__(self, name, id, address, contract_type):\n        super().__init__(name, id, address)\n        self.contract_type = contract_type\n\n    def __str__(self):\n        # return f\"[Teacher: {self.name}, {self.id}, {self.address}, {self.contract_type}]\"\n        return f\"[Teacher: {self.contract_type}, ({super().__str__()})]\"\n\n    def attend_class(self):\n        print(\"I teach\")\n\n\ns1 = Student(\"a\", \"12354S\", \"Home\")\nt1 = Teacher(\"b\", \"82546T\", \"Teacher Home\", \"Occasionnel\")\nprint(s1, t1)\n\ns1.attend_class()\nt1.attend_class()\n</code></pre>"},{"location":"python/python-tour.en/","title":"Language Tour","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"python/python-tour.en/#python-language-tour","title":"Python Language Tour","text":"<p>We will take a tour of the Python language without necessarily covering everything as it is very rich in features.</p> <p>Warning</p> <p>As the Python language frequently evolves and brings improvements and simplifications, the code examples seen here may be different from what you find in the literature.</p>"},{"location":"python/python-tour.en/#getting-started","title":"Getting Started","text":"<ul> <li>Open VSCode in an empty folder</li> <li>Create a file hello.py containing <code>print(\"Hello\")</code></li> <li>Run the command <code>python hello.py</code></li> <li>Some code to get an idea of the language</li> </ul> <pre><code># This is a comment\na = 10\nprint(a)\na = \"hello\"\nprint(a)\nprint(\"The value of a is\", a)\n\na = \"22\"\nb = 10\n# erreur car python est fortement typ\u00e9 et n'autorise pas l'addition sur deux types diff\u00e9rents\n# c = a + b\n# print(\"a + b\", c)\nprint(a + str(b), int(a) + b)\n\nif b == 10:\n    print(b)\n    print(b)\nelse:\n    print(\"b diff\u00e9rent de 10 / b is not 10\")\n\n\ndef add(x, y):\n    print(f\"addition of {x} and {y}\")\n    return x + y\n\n\n# A function can be documented with optional type hints and a docstring\ndef multiply(x: int, y: int) -&gt; int:\n    \"\"\"\n    Multiply x and y\n    Parameters:\n        x: first number\n        y: second number\n    Returns:\n        the result of the multiplication\n    \"\"\"\n    return x * y\n\n\nprint(add(-810, b))\nf = add\nprint(f(-810, b))\n\nprint(\"range demo: g\u00e9n\u00e9rateur / generator\")\nr = range(10)\nprint(r)\nprint(\"Start value\", r.start, \"pas / step\", r.step)\n\nprint(\"range loop\")\nfor item in r:\n    print(item)\n\n\nfor item in range(10):\n    print(item)\n\nfor i in range(10, 21, 3):\n    print(i)\n\nmessage = \"I \u2665\ufe0f Python\"\nfor letter in message:\n    print(letter)\n\nfor i in range(len(message)):\n    print(i, message[i])\n</code></pre>"},{"location":"python/python-tour.en/#some-features","title":"Some Features","text":"<ul> <li>Python is dynamically typed: a variable can change its type during its usage (opposite of statically typed)</li> <li>Python is strongly typed: each data has a type and does not change implicitly</li> <li>Python supports object-oriented and functional programming</li> <li>Indentation is used to define code blocks (instead of <code>{}</code> braces commonly found in other languages)<ul> <li>The indentation size should be consistent within the same block</li> <li>It is recommended to have an indentation of 4 spaces</li> </ul> </li> <li>There are several programming conventions, but they have many common points. The official convention is called pep 8. Here are some rules and recommendations:<ul> <li>Snake case for functions. Ex. <code>find_student()</code></li> <li>Use spaces for indentation and avoid using the tab key</li> </ul> </li> </ul>"},{"location":"python/python-tour.en/#basic-types-and-operations","title":"Basic Types and Operations","text":"<ul> <li>Integer (int), float, and complex numbers</li> <li>Strings</li> <li>Boolean values and boolean operators <code>and</code>, <code>or</code>, and <code>not</code></li> <li>Comparison operators <code>&gt;</code>, <code>&lt;</code>, ... that return a boolean<ul> <li><code>is</code> allows testing the identity between two objects. Its result can be customized.</li> <li><code>==</code> is sometimes equivalent to <code>is</code></li> </ul> </li> <li>As Python is strongly typed, converting a value to another type must be done explicitly using <code>int()</code>, <code>float()</code>, <code>complex()</code>, <code>str()</code>, ...</li> </ul> <pre><code># https://www.w3schools.com/python/python_operators.asp\n\nx = 15\nprint(\"puissance\", x**10, \"partie enti\u00e8re de la division\", x // 4)\n\n# * a plus de priorit\u00e9 par rapport \u00e0 +\nprint(1 + 2 * 3)\n\nprint(10 &lt; x and x &lt; 20, \"est equivalent \u00e0\", 10 &lt; x &lt; 20)\n\nc = ((i, j) for i in (True, False) for j in (True, False))\n\nfor i, j in c:\n    print(i, \"and\", j, i and j)\n    print(i, \"or\", j, i or j)\n    print(\"not\", i, not j)\n\nprint(10 in range(50))\nprint(10 in range(0, 50, 3))\nprint(10 not in [1, 2, 10, 33])\n\n# &amp;&amp; -&gt; and (attention &amp; a un comportement diff\u00e9rent)\n</code></pre>"},{"location":"python/python-tour.en/#exceptions","title":"Exceptions","text":"<pre><code>def f_that_throws(b):\n    if b:\n        return \"Success\"\n    else:\n        raise Exception()\n\n\nprint(f_that_throws(True))\n# Crash si on n'attrape pas l'exception\n# print(f_that_throws(False))\n\ntry:\n    print(f_that_throws(True))\n    print(\"Before\")\n    f_that_throws(False)\n    print(\"After\")\nexcept Exception:\n    print(\"Oups\")\n</code></pre>"},{"location":"python/python-tour.en/#standard-collections","title":"Standard Collections","text":"<ul> <li>Collection: a type (or structure) of data that allows managing a set of data</li> <li>Python offers several built-in collection types</li> <li>Here are the 4 most commonly used types: list, dict, set, and tuple</li> </ul> <pre><code># List: \u00e9l\u00e9ments ordonn\u00e9es. Chauqe \u00e9l\u00e9ment est d\u00e9fini par sont indice\nnumbers = [3, 4, -3, \"hello\", True, 390]\nnumbers.append(10)\nnumbers.append(100)\nnumbers.remove(3)\nprint(numbers)\nprint(numbers[0], numbers[-1], numbers[-2])\n\nprint(numbers[0:3], numbers[:3], numbers[1:5])\nprint(numbers[-3:-1], numbers[2:])\n\nfor number in numbers:\n    print(number)\n\nfor i in range(len(numbers)):\n    print(i, numbers[i])\n\n# Dictionnaires: \u00e9lements identidifi\u00e9s par une cl\u00e9 (on parle aussi de couples cl\u00e9/valeur)\npokemon1 = {\"name\": \"Pikachu\", \"hp\": 10, \"type\": \"Thunder\", 5: \"une valeur\"}\nprint(\n    pokemon1,\n    pokemon1[\"name\"],\n    pokemon1[\"type\"],\n    pokemon1[5],\n    \"name\" in pokemon1,\n    \"surname\" in pokemon1,\n)\n\nfor key, value in pokemon1.items():\n    print(key, value)\n\n# Set (ensemble) : \u00e9lements non ordonn\u00e9es et uniques\nmessages = {\"hello\", \"world\", 2023}\nprint(messages, \"hello\" in messages, 2024 in messages)\nmessages.add(2023)\nprint(messages)\n\nfor message in messages:\n    print(message)\n\n# Tuple : \u00e9l\u00e9ments ordonn\u00e9es immutable (on ne peut ajouter ou supprimer d'\u00e9l\u00e9ments). On peut le consid\u00e9rer comme une liste immutable\nn1 = (12, 34, 55, 33)\nprint(n1, n1[2:])\n\nfor item in n1:\n    print(item)\n\nfor i in range(len(n1)):\n    print(i, n1[i])\n</code></pre>"},{"location":"python/python-tour.en/#list-dictionary-and-set-comprehension","title":"List, Dictionary, and Set Comprehension","text":"<ul> <li>Allows creating a new list, dictionary, or set from an existing collection</li> <li>Allows replacing certain operations that would have been done with loops</li> <li>For a list <code>[f(index) for index in input_seq if condition]</code> (<code>input_seq</code> is a list, tuple, or any iterable sequence with an index)</li> <li>For a list <code>[f(item) for item in input_seq if condition]</code> (<code>input_seq</code> is a list, tuple, or any iterable sequence)</li> <li>For a dictionary <code>{f_key(item):f_value(item) for item in input_seq if condition}</code> (<code>input_seq</code> is an iterable sequence)</li> <li><code>f, f_key, f_value</code> are arbitrary functions</li> <li>The <code>if condition</code> part is optional</li> <li>It is also possible to replace nested loops with a single comprehension</li> </ul> <pre><code>items = [0, 1, 2, 3, 4]\n\n# Double de chaque \u00e9l\u00e9ment\ndouble_items_1 = []\nfor item in items:\n    double_items_1.append(item * 2)\nprint(\"double_items_1\", double_items_1)\n\n# Transformer (to map en Anglais) avec les compr\u00e9hensions\nresults = [item * 2 for item in items]\nprint(results)\nprint([item * 2 for item in items])\n# puissance 4 des entier entre -2 et 9 avec un pas de 2\nprint([item**4 for item in range(-2, 10, 2)])\n\n# Filtrage\n# Garder uniquement les \u00e9l\u00e9ments pairs\nitems = [9, 22, -2, 11, 1232, 2323]\nprint([item for item in items if item % 2 == 0])\n\n# Equivalent avec un boucle for\nresults = []\nfor item in items:\n    if item % 2 == 0:\n        results.append(item)\nprint(results)\n\n# Garder uniquement les \u00e9l\u00e9ments pairs et les multiplier par 3\nprint([item * 3 for item in items if item % 2 == 0])\n\nmessages = [\"Hello\", \"J'aime\", \"Python\"]\nprint([len(message) for message in messages])\nprint([f\"{message}.\" for message in messages])\n# Dict (dictionnaire)\nprint({message: len(message) for message in messages})\n# Set ensemble\nprint({len(message) for message in messages})\n\n# Card game from ranks and symbols\nranks = range(1, 11)\nsymbols = [\"\ud83d\udc97\", \"\u2660\ufe0f\", \"\ud83c\udf40\", \"\ud83d\udd36\"]\n# Produit cart\u00e9sien\nprint([f\"{r}{s}\" for r in ranks for s in symbols])\n\nm = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint([item for row in m for item in row])\nrow_count = range(len(m))\nprint([f\"m[{i}, {j}] =&gt; {m[i][j]}\" for i in row_count for j in range(len(m[i]))])\n\n# Equivalent en for\nresult = []\nfor i in row_count:\n    for j in range(len(m[i])):\n        result.append(f\"m[{i}, {j}] =&gt; {m[i][j]}\")\nprint(\"Tranformation matrice vers liste avec for\", result)\n\n# Pour faire une compr\u00e9hension de tuple, il faut utiliser tuple()\nprint(tuple(x + 6 for x in range(10)))\n</code></pre>"},{"location":"python/python-tour.en/#using-a-third-party-library","title":"Using a Third-Party Library","text":"<ul> <li>Even though Python's standard library is rich, we often need to use third-party libraries to speed up development</li> <li>The standard repository for Python libraries is PyPI (Python Package Index)</li> <li>We can use its search engine to find a library. For example, let's search for the matplotlib library</li> <li>Once on the library's page, we can find the command to install it locally. For matplotlib, the command will be <code>pip install matplotlib</code> (if pip is not found, try with <code>python -m pip install matplotlib</code>)</li> <li>Then, we can use the library by referring to its documentation. For example, matplotlib offers tutorials which is a good starting point.</li> </ul>"},{"location":"python/python-tour.en/#sources-and-references","title":"Sources and References","text":"<ul> <li>Python List Comprehension: single, multiple, nested, &amp; more</li> </ul>"},{"location":"python/python-tour/","title":"\ud83d\udc0d Tour du langage","text":"<ul> <li>English</li> </ul>"},{"location":"python/python-tour/#tour-du-langage-python","title":"Tour du langage Python","text":"<p>Nous allons faire un tour du langage Python sans forc\u00e9ment tout couvrir car il est tr\u00e8s riche en fonctionnalit\u00e9s.</p> <p>Warning</p> <p>Comme le langage Python \u00e9volue apporte fr\u00e9quemment des am\u00e9lioration et simplifications, il se peut que les exemples de code vues ici soient diff\u00e9rents de ce que vous trouvez dans la litt\u00e9rature.</p>"},{"location":"python/python-tour/#premiers-pas","title":"Premiers pas","text":"<ul> <li>Ouvrir VSCode dans un dossier vierge</li> <li>Cr\u00e9er un fichier hello.py contenant <code>print(\"Hello\")</code></li> <li>Lancer la commande <code>python hello.py</code></li> <li>Un peu de code pour avoir une id\u00e9e du langage</li> </ul> <pre><code># This is a comment\na = 10\nprint(a)\na = \"hello\"\nprint(a)\nprint(\"The value of a is\", a)\n\na = \"22\"\nb = 10\n# erreur car python est fortement typ\u00e9 et n'autorise pas l'addition sur deux types diff\u00e9rents\n# c = a + b\n# print(\"a + b\", c)\nprint(a + str(b), int(a) + b)\n\nif b == 10:\n    print(b)\n    print(b)\nelse:\n    print(\"b diff\u00e9rent de 10 / b is not 10\")\n\n\ndef add(x, y):\n    print(f\"addition of {x} and {y}\")\n    return x + y\n\n\n# A function can be documented with optional type hints and a docstring\ndef multiply(x: int, y: int) -&gt; int:\n    \"\"\"\n    Multiply x and y\n    Parameters:\n        x: first number\n        y: second number\n    Returns:\n        the result of the multiplication\n    \"\"\"\n    return x * y\n\n\nprint(add(-810, b))\nf = add\nprint(f(-810, b))\n\nprint(\"range demo: g\u00e9n\u00e9rateur / generator\")\nr = range(10)\nprint(r)\nprint(\"Start value\", r.start, \"pas / step\", r.step)\n\nprint(\"range loop\")\nfor item in r:\n    print(item)\n\n\nfor item in range(10):\n    print(item)\n\nfor i in range(10, 21, 3):\n    print(i)\n\nmessage = \"I \u2665\ufe0f Python\"\nfor letter in message:\n    print(letter)\n\nfor i in range(len(message)):\n    print(i, message[i])\n</code></pre>"},{"location":"python/python-tour/#quelques-caracteristiques","title":"Quelques caract\u00e9ristiques","text":"<ul> <li>Python est dynamiquement typ\u00e9: une variable peut changer de type durant son utilisation (contraire de statiquement typ\u00e9)</li> <li>Python est fortement typ\u00e9: chaque donn\u00e9e a un type et ne change pas de fa\u00e7on implicite</li> <li>Python supporte la programmation orient\u00e9 objet et fonctionnelle</li> <li>Les indentations sont utilis\u00e9es pour d\u00e9finir les blocs de code (au lieu des <code>{}</code> accolades qu'on trouve usuellement dans d'autres langages)<ul> <li>La taille de l'indentation doit \u00eatre consistance au sein du m\u00eame block</li> <li>Il est recommand\u00e9 d'avoir une indentation de 4 espaces</li> </ul> </li> <li>Il existe plusieurs conventions de programmation mais qui on beaucoup de points communs. La convention officielle est appel\u00e9e pep 8. Voici quelques r\u00e8gles et recommandations:<ul> <li>Snake case pour les fonctions. Ex. <code>find_student()</code></li> <li>Utiliser des espaces pour d\u00e9finir l'indentation et \u00e9viter d'utiliser la touche tab</li> </ul> </li> </ul>"},{"location":"python/python-tour/#types-et-operations-de-base","title":"Types et op\u00e9rations de base","text":"<ul> <li>Nombres entier (int), r\u00e9el (float) et complexes (complex)</li> <li>Chaines de caract\u00e8res (String)</li> <li>Valeurs bool\u00e9ennes et op\u00e9rateurs bool\u00e9ens <code>and</code>, <code>or</code> et <code>not</code></li> <li>Op\u00e9rateurs de comparaison <code>&gt;</code>, <code>&lt;</code>, ... qui retournent un bool\u00e9en<ul> <li><code>is</code> permet de tester l'identit\u00e9 entre deux objets. Son r\u00e9sultat peut \u00eatre personnalis\u00e9.</li> <li><code>==</code> est parfois \u00e9quivalent \u00e0 <code>is</code></li> </ul> </li> <li>Comme python est fortement type, convertir un valeur vers un autre type devra se faire explicitement <code>int()</code>, <code>float()</code>, <code>complex()</code>, <code>str()</code>, ...</li> </ul> <pre><code># https://www.w3schools.com/python/python_operators.asp\n\nx = 15\nprint(\"puissance\", x**10, \"partie enti\u00e8re de la division\", x // 4)\n\n# * a plus de priorit\u00e9 par rapport \u00e0 +\nprint(1 + 2 * 3)\n\nprint(10 &lt; x and x &lt; 20, \"est equivalent \u00e0\", 10 &lt; x &lt; 20)\n\nc = ((i, j) for i in (True, False) for j in (True, False))\n\nfor i, j in c:\n    print(i, \"and\", j, i and j)\n    print(i, \"or\", j, i or j)\n    print(\"not\", i, not j)\n\nprint(10 in range(50))\nprint(10 in range(0, 50, 3))\nprint(10 not in [1, 2, 10, 33])\n\n# &amp;&amp; -&gt; and (attention &amp; a un comportement diff\u00e9rent)\n</code></pre>"},{"location":"python/python-tour/#exceptions","title":"Exceptions","text":"<pre><code>def f_that_throws(b):\n    if b:\n        return \"Success\"\n    else:\n        raise Exception()\n\n\nprint(f_that_throws(True))\n# Crash si on n'attrape pas l'exception\n# print(f_that_throws(False))\n\ntry:\n    print(f_that_throws(True))\n    print(\"Before\")\n    f_that_throws(False)\n    print(\"After\")\nexcept Exception:\n    print(\"Oups\")\n</code></pre>"},{"location":"python/python-tour/#collections-standards","title":"Collections standards","text":"<ul> <li>Collection: type (ou structure) de donn\u00e9es qui permet de g\u00e9rer un ensemble de donn\u00e9es</li> <li>Python propose plusieurs types int\u00e9gr\u00e9s de collections</li> <li>Voici les 4 types les plus usuels: list, dict, set et tuple</li> </ul> <pre><code># List: \u00e9l\u00e9ments ordonn\u00e9es. Chauqe \u00e9l\u00e9ment est d\u00e9fini par sont indice\nnumbers = [3, 4, -3, \"hello\", True, 390]\nnumbers.append(10)\nnumbers.append(100)\nnumbers.remove(3)\nprint(numbers)\nprint(numbers[0], numbers[-1], numbers[-2])\n\nprint(numbers[0:3], numbers[:3], numbers[1:5])\nprint(numbers[-3:-1], numbers[2:])\n\nfor number in numbers:\n    print(number)\n\nfor i in range(len(numbers)):\n    print(i, numbers[i])\n\n# Dictionnaires: \u00e9lements identidifi\u00e9s par une cl\u00e9 (on parle aussi de couples cl\u00e9/valeur)\npokemon1 = {\"name\": \"Pikachu\", \"hp\": 10, \"type\": \"Thunder\", 5: \"une valeur\"}\nprint(\n    pokemon1,\n    pokemon1[\"name\"],\n    pokemon1[\"type\"],\n    pokemon1[5],\n    \"name\" in pokemon1,\n    \"surname\" in pokemon1,\n)\n\nfor key, value in pokemon1.items():\n    print(key, value)\n\n# Set (ensemble) : \u00e9lements non ordonn\u00e9es et uniques\nmessages = {\"hello\", \"world\", 2023}\nprint(messages, \"hello\" in messages, 2024 in messages)\nmessages.add(2023)\nprint(messages)\n\nfor message in messages:\n    print(message)\n\n# Tuple : \u00e9l\u00e9ments ordonn\u00e9es immutable (on ne peut ajouter ou supprimer d'\u00e9l\u00e9ments). On peut le consid\u00e9rer comme une liste immutable\nn1 = (12, 34, 55, 33)\nprint(n1, n1[2:])\n\nfor item in n1:\n    print(item)\n\nfor i in range(len(n1)):\n    print(i, n1[i])\n</code></pre>"},{"location":"python/python-tour/#la-comprehension-des-listes-dictionnaires-et-ensembles","title":"La compr\u00e9hension des listes, dictionnaires et ensembles","text":"<ul> <li>Permet de cr\u00e9er une nouvelle liste, dictionnaire ou ensemble \u00e0 partir d'une collection existante</li> <li>Permet de remplacer certains traitements qu'on aurait d\u00fb faire avec les boucles</li> <li>Pour une liste <code>[f(index) for index in input_seq if condition]</code> (<code>input_seq</code> est une liste, tuple ou toute s\u00e9quence it\u00e9rable avec indice)</li> <li>Pour une liste <code>[f(item) for item in input_seq if condition]</code> (<code>input_seq</code> est une liste, tuple ou toute s\u00e9quence it\u00e9rable)</li> <li>Pour un dictionnaire <code>{f_key(item):f_value(item) for item in input_seq if condition}</code> (<code>input_seq</code> est une s\u00e9quence it\u00e9rable)</li> <li><code>f, f_key, f_value</code> sont des fonctions quelconques</li> <li>La partie <code>if condition</code> est optionnelle</li> <li>Il est aussi possible de remplacer les boucles imbriqu\u00e9es par une seule compr\u00e9hension</li> </ul> <pre><code>items = [0, 1, 2, 3, 4]\n\n# Double de chaque \u00e9l\u00e9ment\ndouble_items_1 = []\nfor item in items:\n    double_items_1.append(item * 2)\nprint(\"double_items_1\", double_items_1)\n\n# Transformer (to map en Anglais) avec les compr\u00e9hensions\nresults = [item * 2 for item in items]\nprint(results)\nprint([item * 2 for item in items])\n# puissance 4 des entier entre -2 et 9 avec un pas de 2\nprint([item**4 for item in range(-2, 10, 2)])\n\n# Filtrage\n# Garder uniquement les \u00e9l\u00e9ments pairs\nitems = [9, 22, -2, 11, 1232, 2323]\nprint([item for item in items if item % 2 == 0])\n\n# Equivalent avec un boucle for\nresults = []\nfor item in items:\n    if item % 2 == 0:\n        results.append(item)\nprint(results)\n\n# Garder uniquement les \u00e9l\u00e9ments pairs et les multiplier par 3\nprint([item * 3 for item in items if item % 2 == 0])\n\nmessages = [\"Hello\", \"J'aime\", \"Python\"]\nprint([len(message) for message in messages])\nprint([f\"{message}.\" for message in messages])\n# Dict (dictionnaire)\nprint({message: len(message) for message in messages})\n# Set ensemble\nprint({len(message) for message in messages})\n\n# Card game from ranks and symbols\nranks = range(1, 11)\nsymbols = [\"\ud83d\udc97\", \"\u2660\ufe0f\", \"\ud83c\udf40\", \"\ud83d\udd36\"]\n# Produit cart\u00e9sien\nprint([f\"{r}{s}\" for r in ranks for s in symbols])\n\nm = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint([item for row in m for item in row])\nrow_count = range(len(m))\nprint([f\"m[{i}, {j}] =&gt; {m[i][j]}\" for i in row_count for j in range(len(m[i]))])\n\n# Equivalent en for\nresult = []\nfor i in row_count:\n    for j in range(len(m[i])):\n        result.append(f\"m[{i}, {j}] =&gt; {m[i][j]}\")\nprint(\"Tranformation matrice vers liste avec for\", result)\n\n# Pour faire une compr\u00e9hension de tuple, il faut utiliser tuple()\nprint(tuple(x + 6 for x in range(10)))\n</code></pre>"},{"location":"python/python-tour/#utiliser-une-librairie-tierce","title":"Utiliser une librairie tierce","text":"<ul> <li>M\u00eame si la libraire standard de Python est riche, on a souvent besoin d'utiliser des librairies tierces pour aller plus vite</li> <li>Le d\u00e9p\u00f4t standard des librairies Python est PyPI (Python Package Index)</li> <li>On peut utiliser son moteur de recherche pour trouver un librairie. Par exemple, cherchons la libraire matplotlib</li> <li>Une fois dans la page de la librairie, on peut trouver la commande qui permet de l'installer localement. Pour matplotlib, la commande sera <code>pip install matplotlib</code> (si pip n'est pas trouv\u00e9 alors essayer avec <code>python -m pip install matplotlib</code>)</li> <li>Ensuite, on pourra utiliser la librairie en se r\u00e9f\u00e9rant \u00e0 sa documentation. Par exemple, matplotlib propose des tutoriels qui est un bon point de d\u00e9part.</li> </ul>"},{"location":"python/python-tour/#sources-et-references","title":"Sources et r\u00e9f\u00e9rences","text":"<ul> <li>Python List Comprehension: single, multiple, nested, &amp; more</li> </ul>"},{"location":"python/tkinter-exercices.en/","title":"Tkinter Exercises","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"python/tkinter-exercices.en/#exercises","title":"Exercises","text":"<p>Instructions</p> <ul> <li>Do not use AI or genAI for help</li> <li>Use <code>ttk</code> components whenever possible</li> </ul>"},{"location":"python/tkinter-exercices.en/#series-1","title":"Series 1","text":"<ol> <li>Create a window that displays a button with a random number between 1 and 100 as text. Each time the button is clicked, the random number changes.</li> <li>Create a window that displays a \"Quit\" button and an editable text. Handle the following behavior when clicking the \"Quit\" button:<ul> <li>If the text hasn't been modified, the window closes,</li> <li>If the text has been modified, a dialog box asks if you really want to quit. If you answer \"Yes\", the window closes, otherwise it stays open (see tip below).</li> </ul> </li> <li>Create a window that displays an editable text and \"save\" and \"load\" buttons. Handle the following behavior:<ul> <li>When clicking \"save\", the text is saved to a text file,</li> <li>When clicking \"load\", the text is loaded from the text file and displayed in the editable area (see tip below).</li> </ul> </li> <li>Create a window that displays two editable texts and \"save\" and \"load\" buttons. Handle the following behavior:<ul> <li>When clicking \"save\", the text from the first editable area is saved to a text file. The filename is determined by the text in the second editable area,</li> <li>When clicking \"load\", the text is loaded from the text file and displayed in the editable area. The filename is determined by the text in the second editable area.</li> </ul> </li> </ol>"},{"location":"python/tkinter-exercices.en/#tips","title":"Tips","text":"Generate a random number<pre><code>import random\nnumber = random.randint(1, 100)\n</code></pre> Close a tk window<pre><code>window.destroy()\n</code></pre> message box<pre><code>import tkinter.messagebox as mb\nanswer = mb.askyesno(title=\"Confirm?\", message=\"Do you want to quit?\")\n</code></pre> Save and load a file<pre><code>def save(text):\n    with open(\"file.txt\", \"w\") as f:\n        f.write(text)\n\ndef load():\n    with open(\"file.txt\", \"r\") as f:\n        return f.read()\n</code></pre> Display an image from file with tkinter<pre><code>from tkinter import PhotoImage\n\nimg = PhotoImage(file=\"image.png\")\nlabel = Label(window, image=img)\nlabel.pack()\n</code></pre>"},{"location":"python/tkinter-exercices.en/#solutions","title":"Solutions","text":"Random number button <pre><code>import random\nfrom playsound import playsound\nimport tkinter as tk\nfrom tkinter import ttk\n\nwindow = tk.Tk()\nwindow.geometry(200, 200)\n\nbutton: ttk.Button = None\n\n\ndef get_rand_int_as_str() -&gt; str:\n    r = random.randint(1, 100)\n    return str(r)\n\n\ndef change_label():\n    if button == None:\n        return\n    button.configure(text=get_rand_int_as_str())\n\n\nbutton = ttk.Button(window, text=get_rand_int_as_str(), command=change_label)\n\nbutton.place(relx=0.5, rely=0.5, anchor=tk.CENTER)\nwindow.mainloop()\n</code></pre> Confirm quit <pre><code>import tkinter as tk\nfrom tkinter import ttk\nimport tkinter.messagebox as mb\n\nwindow = tk.Tk()\nwindow.geometry(\"200x200\")\n\nentered_text = tk.StringVar()\ntextbox = ttk.Entry(window, textvariable=entered_text)\ntextbox.pack(pady=50)\n\n\ndef quit_app():\n    if len(entered_text.get()) == 0:\n        window.destroy()\n        return\n    anwser = mb.askyesno(title=\"Confirmer\", message=\"Voulez-vous quitter ?\")\n    if anwser:\n        window.destroy()\n        return\n\n\nrun_button = ttk.Button(window, text=\"Quit \ud83d\udc4b\", command=quit_app)\nrun_button.pack()\n\nwindow.mainloop()\n</code></pre>"},{"location":"python/tkinter-exercices.en/#series-2","title":"Series 2","text":"<ol> <li>Create a window that displays an image from a file.</li> <li>Create a window that displays a text input area and a button. When the user clicks the button, the image whose name is defined by the input area is displayed below.</li> <li>Using the playsound library, create a window that plays a sound when clicking a button.<ul> <li>You can use this tutorial for help</li> <li>You can use this site to find sounds or download this example</li> <li>If <code>pip install playsound</code> doesn't work, you can try <code>pip install playsound@git+https://github.com/taconi/playsound</code></li> </ul> </li> <li>Use tkvideoplayer to create a window that plays a video.</li> </ol>"},{"location":"python/tkinter-exercices.en/#series-2-solutions","title":"Series 2 Solutions","text":"Play music <pre><code># importing required module\nfrom playsound import playsound\nimport tkinter as tk\nfrom tkinter import ttk\n\nwindow = tk.Tk()\nwindow.title(\"GeeksforGeeks sound player\")  # giving the title for our window\nwindow.geometry(\"500x400\")\n\n\n# making function\ndef play():\n    playsound(\"sample-3s.mp3\")\n\n\n# title on the screen you can modify it\ntitle = ttk.Label(\n    window,\n    text=\"Sample sound\",\n)\ntitle.pack()\n\n# making a button which trigger the function so sound can be playeed\nplay_button = ttk.Button(window, text=\"Play Song\", command=play)\nplay_button.pack()\n\ninfo = ttk.Label(window, text=\"Click on the button above to play song \").pack(pady=20)\nwindow.mainloop()\n</code></pre>"},{"location":"python/tkinter-exercices.en/#series-3","title":"Series 3","text":"<ol> <li>Using tkinter.scrolledtext, create an application that allows text input, saving to a file, and loading.</li> <li>Create an application that allows text input, saving to a file, and loading. It also remembers the last modification and allows restoring it using the \"Undo\" button. If the modification is restored, the \"Undo\" button becomes \"Redo\" and allows restoring the modification.</li> <li>Modify the application to remember the last 10 modifications, the \"Undo\" button allows going backwards, and the \"Redo\" button allows going forwards. The behavior should be similar to classic text editors.</li> <li>Associate keyboard shortcuts with each button. For example, <code>Ctrl+S</code> for save, <code>Ctrl+Z</code> for undo, <code>Ctrl+Y</code> for redo, etc.</li> </ol>"},{"location":"python/tkinter-exercices/","title":"Exercices de Tkinter","text":"<ul> <li>English</li> </ul>"},{"location":"python/tkinter-exercices/#exercices","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> <li>Utiliser les composants <code>ttk</code> autant que possible</li> </ul>"},{"location":"python/tkinter-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Cr\u00e9er une fen\u00eatre qui affiche un bouton dont le texte est un nombre al\u00e9toire entre 1 et 100. Chaque fois qu'on clique sur le bouton, le nombre al\u00e9atoire change.</li> <li>Cr\u00e9er une fen\u00eatre qui affiche un bouton \"Quitter\" et un texte editable. G\u00e9rer le comportement suivant quand on clique sur le bouton \"Quitter\":<ul> <li>Si on n'a pas modifi\u00e9 le texte, la fen\u00eatre se ferme,</li> <li>Si on a modifi\u00e9 le texte, une bo\u00eete de dialogue demande si on veut vraiment quitter. Si on r\u00e9pond \"Oui\", la fen\u00eatre se ferme, sinon elle reste ouverte (voir astuce plus bas).</li> </ul> </li> <li>Cr\u00e9er une fen\u00eatre qui affiche un texte editable et les boutons \"sauvegarder\" et \"charger\". G\u00e9rer le comportement suivant:<ul> <li>Quand on clique sur \"sauvegarder\", le texte est sauvegard\u00e9 dans un fichier texte,</li> <li>Quand on clique sur \"charger\", le texte est charg\u00e9 depuis le fichier texte et est affich\u00e9 dans la zone \u00e9ditable (voir astuce plus bas).</li> </ul> </li> <li>Cr\u00e9er une fen\u00eatre qui affiche deux textes editables et les boutons \"sauvegarder\" et \"charger\". G\u00e9rer le comportement suivant:<ul> <li>Quand on clique sur \"sauvegarder\", le texte de la premi\u00e8re zone \u00e9ditable est sauvegard\u00e9 dans un fichier texte. Le nom du fichier est d\u00e9termin\u00e9 par le texte de la deuxi\u00e8me zone \u00e9ditable,</li> <li>Quand on clique sur \"charger\", le texte est charg\u00e9 depuis le fichier texte et est affich\u00e9 dans la zone \u00e9ditable. Le nom du fichier est d\u00e9termin\u00e9 par le texte de la deuxi\u00e8me zone \u00e9ditable.</li> </ul> </li> </ol>"},{"location":"python/tkinter-exercices/#astuces","title":"Astuces","text":"G\u00e9n\u00e9rer un nombre al\u00e9atoire<pre><code>import random\nnombre = random.randint(1, 100)\n</code></pre> Fermer une fen\u00eatre tk<pre><code>window.destroy()\n</code></pre> message box<pre><code>import tkinter.messagebox as mb\nanwser = mb.askyesno(title=\"Confirmer?\", message=\"Voulez-vous quitter ?\")\n</code></pre> Sauvegarder et charger un fichier<pre><code>def sauvegarder(texte):\n    with open(\"fichier.txt\", \"w\") as f:\n        f.write(texte)\n\ndef charger():\n    with open(\"fichier.txt\", \"r\") as f:\n        return f.read()\n</code></pre> Afficher une image depuis un fichier avec tkinter<pre><code>from tkinter import PhotoImage\n\nimg = PhotoImage(file=\"image.png\")\nlabel = Label(fenetre, image=img)\nlabel.pack()\n</code></pre>"},{"location":"python/tkinter-exercices/#solutions","title":"Solutions","text":"Random number button <pre><code>import random\nfrom playsound import playsound\nimport tkinter as tk\nfrom tkinter import ttk\n\nwindow = tk.Tk()\nwindow.geometry(200, 200)\n\nbutton: ttk.Button = None\n\n\ndef get_rand_int_as_str() -&gt; str:\n    r = random.randint(1, 100)\n    return str(r)\n\n\ndef change_label():\n    if button == None:\n        return\n    button.configure(text=get_rand_int_as_str())\n\n\nbutton = ttk.Button(window, text=get_rand_int_as_str(), command=change_label)\n\nbutton.place(relx=0.5, rely=0.5, anchor=tk.CENTER)\nwindow.mainloop()\n</code></pre> Confirm quit <pre><code>import tkinter as tk\nfrom tkinter import ttk\nimport tkinter.messagebox as mb\n\nwindow = tk.Tk()\nwindow.geometry(\"200x200\")\n\nentered_text = tk.StringVar()\ntextbox = ttk.Entry(window, textvariable=entered_text)\ntextbox.pack(pady=50)\n\n\ndef quit_app():\n    if len(entered_text.get()) == 0:\n        window.destroy()\n        return\n    anwser = mb.askyesno(title=\"Confirmer\", message=\"Voulez-vous quitter ?\")\n    if anwser:\n        window.destroy()\n        return\n\n\nrun_button = ttk.Button(window, text=\"Quit \ud83d\udc4b\", command=quit_app)\nrun_button.pack()\n\nwindow.mainloop()\n</code></pre>"},{"location":"python/tkinter-exercices/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Cr\u00e9er une fen\u00eatre qui affiche une image depuis un fichier.</li> <li>Cr\u00e9er une fen\u00eatre qui affiche une zone de saisie de texte et un bouton. Quand l'utilisateur appuie sur le bouton, l'image dont le nom est d\u00e9finie par le zone de saisie est affich\u00e9e en dessous.</li> <li>Avec la librairie playsound, cr\u00e9er une fen\u00eatre qui joue un son quand on clique sur un bouton.<ul> <li>Vous pouvez utiliser ce tuto pour vous aider</li> <li>Vous pouvez utiliser ce site pour trouver des sons ou t\u00e9l\u00e9charger cet exemple</li> <li>Si <code>pip install playsound</code> ne fonctionne pas, vous pouvez essayer <code>pip install playsound@git+https://github.com/taconi/playsound</code></li> </ul> </li> <li>Utiliser tkvideoplayer pour cr\u00e9er une fen\u00eatre qui lit une vid\u00e9o.</li> </ol>"},{"location":"python/tkinter-exercices/#solutions_1","title":"Solutions","text":"Play music <pre><code># importing required module\nfrom playsound import playsound\nimport tkinter as tk\nfrom tkinter import ttk\n\nwindow = tk.Tk()\nwindow.title(\"GeeksforGeeks sound player\")  # giving the title for our window\nwindow.geometry(\"500x400\")\n\n\n# making function\ndef play():\n    playsound(\"sample-3s.mp3\")\n\n\n# title on the screen you can modify it\ntitle = ttk.Label(\n    window,\n    text=\"Sample sound\",\n)\ntitle.pack()\n\n# making a button which trigger the function so sound can be playeed\nplay_button = ttk.Button(window, text=\"Play Song\", command=play)\nplay_button.pack()\n\ninfo = ttk.Label(window, text=\"Click on the button above to play song \").pack(pady=20)\nwindow.mainloop()\n</code></pre>"},{"location":"python/tkinter-exercices/#serie-3","title":"S\u00e9rie 3","text":"<ol> <li>En utilisant tkinter.scrolledtext Cr\u00e9er une application qui permet de saisir du texte, de le sauvegarder dans un fichier et de le charger.</li> <li>Cr\u00e9er une application qui permet de saisir du texte, de le sauvegarder dans un fichier et de le charger. Elle permet aussi de m\u00e9moriser la derni\u00e8re modification et permet de la restaurer \u00e0 l'aider du bouton \"Annuler\". Si la modification est restaur\u00e9e, le bouton \"Annuler\" devient \"Refaire\" et permet de r\u00e9tablir la modification.</li> <li>Modifier l'application pour m\u00e9moriser les 10 derni\u00e8res modifications, le bouton \"Annuler\" permet de revenir en arri\u00e8re et le bouton \"Refaire\" permet de revenir en avant. Le comportement devrait \u00eatre similaire aux \u00e9diteurs de texte classiques.</li> <li>Associer les raccourcis clavier \u00e0 chaque bouton. Par exemple, <code>Ctrl+S</code> pour sauvegarder, <code>Ctrl+Z</code> pour annuler, <code>Ctrl+Y</code> pour refaire, etc.</li> </ol>"},{"location":"python/tkinter.en/","title":"Tkinter","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"python/tkinter.en/#tkinter","title":"Tkinter","text":"<p>Tkinter is a graphical library for Python. It allows you to create graphical user interfaces (GUIs) in a simple and quick manner.</p>"},{"location":"python/tkinter.en/#getting-started","title":"Getting Started","text":"<p>On macOS, you might need to install the library with <code>pip install tk</code>.</p> Basic Window<pre><code>import tkinter as tk\n\nwindow = tk.Tk()\n\nwindow.mainloop()\n</code></pre> <p></p> Two Buttons and a Text<pre><code>import tkinter as tk\n\n# widget ou controle: tout composant de l'interface graphique: bouton, label, image, etc. (windows + gadget)\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nlabel = tk.Label(window, text=\"Hello World\")\n\n\ndef print_message():\n    print(\"Button clicked\")\n\n\ndef change_size():\n    print(\"Nouvelle dimension de fen\u00eatre\")\n    window.geometry(\"500x200\")\n\n\n# command: on dit que c'est une callback\nbutton = tk.Button(window, text=\"Click Me\", command=print_message)\nbutton2 = tk.Button(window, text=\"Click Me Here\", command=change_size)\n# Lay or put the widgets into the window\nbutton.pack()\nlabel.pack()\nbutton2.pack()\n# pour placer une ligne de code\ntk.Label(window, text=\"Autre texte\").pack()\n\nwindow.mainloop()\n</code></pre> <p></p>"},{"location":"python/tkinter.en/#ttk","title":"TTk","text":"<p>The <code>ttk</code> components are improved components of Tkinter. They are more modern, more visually appealing, and better adapt to the OS (Operating System). For example, they use the colors of the OS theme (such as dark mode).</p> ttk Components<pre><code>import tkinter as tk\nfrom tkinter import ttk\n\n# widget: tout composant de l'interface graphique: bouton, label, image, etc. (windows + gadget)\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nlabel = ttk.Label(window, text=\"Hello World\")\n\n\ndef print_message():\n    print(\"Button clicked\")\n\n\ndef change_size():\n    print(\"Nouvelle dimension de fen\u00eatre\")\n    window.geometry(\"500x200\")\n\n\n# command: on dit que c'est une callback\nbutton = ttk.Button(window, text=\"Click Me\", command=print_message)\nbutton2 = ttk.Button(window, text=\"Click Me Here\", command=change_size)\nbutton.pack()\nlabel.pack()\nbutton2.pack()\n# pour placer une ligne de code\nttk.Label(window, text=\"Autre texte\").pack()\n\nwindow.mainloop()\n</code></pre> <p></p>"},{"location":"python/tkinter.en/#editable-text","title":"Editable Text","text":"Editable Text<pre><code>import tkinter as tk\nfrom tkinter import ttk\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nentered_text = tk.StringVar()\ntextbox = ttk.Entry(window, textvariable=entered_text)\ntextbox.pack()\n\n\ndef run_prompt():\n    print(\"prompt saisi\", entered_text.get())\n    print(\"prompt saisi\", textbox.get())\n    response = f\"R\u00e9ponse \u00e0 la main pour le prompt {entered_text.get()}. A remplacer par une vraie r\u00e9ponse\"\n    print(\"r\u00e9ponse\", response)\n\n\ndef reset_entry():\n    entered_text.set(\"\")\n\n\nrun_button = ttk.Button(window, text=\"Run\", command=run_prompt)\nrun_button.pack()\n\nclear_button = ttk.Button(window, text=\"Clear\", command=reset_entry)\nclear_button.pack()\n\nwindow.mainloop()\n</code></pre> Editable Text + Adding Content on the Fly<pre><code>import tkinter as tk\nfrom tkinter import ttk\nfrom datetime import datetime\n\n\nprompts = []\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nentered_text = tk.StringVar()\nhistory_content = tk.StringVar()\ntextbox = ttk.Entry(window, textvariable=entered_text)\ntextbox.pack()\n\n\ndef run_prompt():\n    print(\"prompt saisi\", entered_text.get())\n    print(\"prompt saisi\", textbox.get())\n    response = f\"R\u00e9ponse \u00e0 la main pour le prompt {entered_text.get()}. A remplacer par une vraie r\u00e9ponse\"\n    print(\"r\u00e9ponse\", response)\n    prompt = {\n        \"query\": entered_text.get(),\n        \"response\": response,\n        \"date\": datetime.now(),\n    }\n    prompts.append(prompt)\n    print(prompts)\n    temp_history_content = \"\"\n    for prompt in prompts:\n        temp_history_content += f\"query: {prompt['query']} \\n\"\n        temp_history_content += f\"responst: {prompt['response']} \\n\"\n        temp_history_content += f\"date: {prompt['date']} \\n\"\n        temp_history_content += f\"\\n--------------\\n\"\n    history_content.set(temp_history_content)\n\n\ndef reset_entry():\n    entered_text.set(\"\")\n\n\nrun_button = ttk.Button(window, text=\"Run\", command=run_prompt)\nrun_button.pack()\n\nclear_button = ttk.Button(window, text=\"Clear\", command=reset_entry)\nclear_button.pack()\n\nhistory = ttk.Label(window, textvariable=history_content)\nhistory.pack()\n\nwindow.mainloop()\n</code></pre>"},{"location":"python/tkinter/","title":"Tkinter","text":"<ul> <li>English</li> </ul>"},{"location":"python/tkinter/#tkinter","title":"Tkinter","text":"<p>Tkinter est une biblioth\u00e8que graphique pour Python. Elle permet de cr\u00e9er des interfaces graphiques (GUI) de mani\u00e8re simple et rapide.</p>"},{"location":"python/tkinter/#premiers-pas","title":"Premiers pas","text":"<p>Sur macOS, il faut probabelemnt installer la librairie <code>pip install tk</code></p> Fen\u00eatre basqiue<pre><code>import tkinter as tk\n\nwindow = tk.Tk()\n\nwindow.mainloop()\n</code></pre> <p></p> Deux boutons et un texte<pre><code>import tkinter as tk\n\n# widget ou controle: tout composant de l'interface graphique: bouton, label, image, etc. (windows + gadget)\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nlabel = tk.Label(window, text=\"Hello World\")\n\n\ndef print_message():\n    print(\"Button clicked\")\n\n\ndef change_size():\n    print(\"Nouvelle dimension de fen\u00eatre\")\n    window.geometry(\"500x200\")\n\n\n# command: on dit que c'est une callback\nbutton = tk.Button(window, text=\"Click Me\", command=print_message)\nbutton2 = tk.Button(window, text=\"Click Me Here\", command=change_size)\n# Lay or put the widgets into the window\nbutton.pack()\nlabel.pack()\nbutton2.pack()\n# pour placer une ligne de code\ntk.Label(window, text=\"Autre texte\").pack()\n\nwindow.mainloop()\n</code></pre> <p></p>"},{"location":"python/tkinter/#ttk","title":"TTk","text":"<p>Les composants <code>ttk</code> sont des composants am\u00e9lior\u00e9s de Tkinter. Ils sont plus modernes, plus jolis et s'adaptent mieux \u00e0 l'OS (Operating System). Par exemple, ils utilisent les couleurs du th\u00e8me de l'OS (mode sombre par exemple).</p> Composants ttk<pre><code>import tkinter as tk\nfrom tkinter import ttk\n\n# widget: tout composant de l'interface graphique: bouton, label, image, etc. (windows + gadget)\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nlabel = ttk.Label(window, text=\"Hello World\")\n\n\ndef print_message():\n    print(\"Button clicked\")\n\n\ndef change_size():\n    print(\"Nouvelle dimension de fen\u00eatre\")\n    window.geometry(\"500x200\")\n\n\n# command: on dit que c'est une callback\nbutton = ttk.Button(window, text=\"Click Me\", command=print_message)\nbutton2 = ttk.Button(window, text=\"Click Me Here\", command=change_size)\nbutton.pack()\nlabel.pack()\nbutton2.pack()\n# pour placer une ligne de code\nttk.Label(window, text=\"Autre texte\").pack()\n\nwindow.mainloop()\n</code></pre> <p></p>"},{"location":"python/tkinter/#texte-editable","title":"Texte editable","text":"Texte editable<pre><code>import tkinter as tk\nfrom tkinter import ttk\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nentered_text = tk.StringVar()\ntextbox = ttk.Entry(window, textvariable=entered_text)\ntextbox.pack()\n\n\ndef run_prompt():\n    print(\"prompt saisi\", entered_text.get())\n    print(\"prompt saisi\", textbox.get())\n    response = f\"R\u00e9ponse \u00e0 la main pour le prompt {entered_text.get()}. A remplacer par une vraie r\u00e9ponse\"\n    print(\"r\u00e9ponse\", response)\n\n\ndef reset_entry():\n    entered_text.set(\"\")\n\n\nrun_button = ttk.Button(window, text=\"Run\", command=run_prompt)\nrun_button.pack()\n\nclear_button = ttk.Button(window, text=\"Clear\", command=reset_entry)\nclear_button.pack()\n\nwindow.mainloop()\n</code></pre> Texte editable + ajout de contenu \u00e0 la vol\u00e9e<pre><code>import tkinter as tk\nfrom tkinter import ttk\nfrom datetime import datetime\n\n\nprompts = []\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nentered_text = tk.StringVar()\nhistory_content = tk.StringVar()\ntextbox = ttk.Entry(window, textvariable=entered_text)\ntextbox.pack()\n\n\ndef run_prompt():\n    print(\"prompt saisi\", entered_text.get())\n    print(\"prompt saisi\", textbox.get())\n    response = f\"R\u00e9ponse \u00e0 la main pour le prompt {entered_text.get()}. A remplacer par une vraie r\u00e9ponse\"\n    print(\"r\u00e9ponse\", response)\n    prompt = {\n        \"query\": entered_text.get(),\n        \"response\": response,\n        \"date\": datetime.now(),\n    }\n    prompts.append(prompt)\n    print(prompts)\n    temp_history_content = \"\"\n    for prompt in prompts:\n        temp_history_content += f\"query: {prompt['query']} \\n\"\n        temp_history_content += f\"responst: {prompt['response']} \\n\"\n        temp_history_content += f\"date: {prompt['date']} \\n\"\n        temp_history_content += f\"\\n--------------\\n\"\n    history_content.set(temp_history_content)\n\n\ndef reset_entry():\n    entered_text.set(\"\")\n\n\nrun_button = ttk.Button(window, text=\"Run\", command=run_prompt)\nrun_button.pack()\n\nclear_button = ttk.Button(window, text=\"Clear\", command=reset_entry)\nclear_button.pack()\n\nhistory = ttk.Label(window, textvariable=history_content)\nhistory.pack()\n\nwindow.mainloop()\n</code></pre>"},{"location":"python/datascience/","title":"Analyse de donn\u00e9es en Python","text":"In\u00a0[9]: Copied! <pre>import pandas as pd\n\ndata = {\n    'Ann\u00e9e': [2017, 2018, 2019, 2020, 2021],\n    'Ventes': [250, 300, 400, 450, 500]\n}\ndf = pd.DataFrame(data)\ndf.head()\n</pre> import pandas as pd  data = {     'Ann\u00e9e': [2017, 2018, 2019, 2020, 2021],     'Ventes': [250, 300, 400, 450, 500] } df = pd.DataFrame(data) df.head() Out[9]: Ann\u00e9e Ventes 0 2017 250 1 2018 300 2 2019 400 3 2020 450 4 2021 500 In\u00a0[10]: Copied! <pre>df[\"Ann\u00e9e\"].max()\n</pre> df[\"Ann\u00e9e\"].max() Out[10]: <pre>np.int64(2021)</pre> In\u00a0[11]: Copied! <pre>df.describe()\n</pre> df.describe() Out[11]: Ann\u00e9e Ventes count 5.000000 5.000000 mean 2019.000000 380.000000 std 1.581139 103.682207 min 2017.000000 250.000000 25% 2018.000000 300.000000 50% 2019.000000 400.000000 75% 2020.000000 450.000000 max 2021.000000 500.000000 <p>Suivons les tutos officiels</p> In\u00a0[12]: Copied! <pre>import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Cr\u00e9ation d'un DataFrame\ndata = {\n    'Ann\u00e9e': [2017, 2018, 2019, 2020, 2021],\n    'Ventes': [250, 300, 400, 450, 500]\n}\ndf = pd.DataFrame(data)\n\n# Visualisation des donn\u00e9es\nplt.plot(df['Ann\u00e9e'], df['Ventes'], marker='o')\nplt.title('Ventes annuelles')\nplt.xlabel('Ann\u00e9e')\nplt.ylabel('Ventes')\nplt.grid(True)\nplt.show()\n</pre> import pandas as pd import matplotlib.pyplot as plt  # Cr\u00e9ation d'un DataFrame data = {     'Ann\u00e9e': [2017, 2018, 2019, 2020, 2021],     'Ventes': [250, 300, 400, 450, 500] } df = pd.DataFrame(data)  # Visualisation des donn\u00e9es plt.plot(df['Ann\u00e9e'], df['Ventes'], marker='o') plt.title('Ventes annuelles') plt.xlabel('Ann\u00e9e') plt.ylabel('Ventes') plt.grid(True) plt.show()"},{"location":"python/datascience/#analyse-de-donnees-en-python","title":"Analyse de donn\u00e9es en Python\u00b6","text":""},{"location":"python/datascience/#quelques-concepts","title":"Quelques concepts\u00b6","text":"<ul> <li>Data scientist : un data scientist est un professionnel qui utilise des techniques statistiques et informatiques pour analyser et interpr\u00e9ter des donn\u00e9es.</li> <li>Data mining : le data mining est le processus d'exploration et d'analyse de grandes quantit\u00e9s de donn\u00e9es pour d\u00e9couvrir des mod\u00e8les et des tendances cach\u00e9s.</li> <li>Variance : la variance est une mesure de la dispersion des valeurs d'un ensemble de donn\u00e9es. Elle est calcul\u00e9e comme la moyenne des carr\u00e9s des \u00e9carts entre les donn\u00e9es et la moyenne.</li> <li>Ecart type : l'\u00e9cart type est une mesure de la dispersion des valeurs d'un ensemble de donn\u00e9es. Il est calcul\u00e9 en prenant la racine carr\u00e9e de la variance.</li> <li>Quartiles : les quartiles sont des valeurs qui divisent un ensemble de donn\u00e9es tri\u00e9 par ordre croissant en quatre parties \u00e9gales. Le premier quartile (Q1) est la valeur en dessous de laquelle se trouve le premier quart des donn\u00e9es, le deuxi\u00e8me quartile (Q2) est la m\u00e9diane, et le troisi\u00e8me quartile (Q3) est la valeur en dessous de laquelle se trouve les trois quarts des donn\u00e9es.</li> <li>Valeur aberrante : une valeur aberrante est une valeur qui s'\u00e9carte significativement du reste des donn\u00e9es. Les valeurs aberrantes peuvent fausser les r\u00e9sultats d'une analyse statistique et doivent \u00eatre trait\u00e9es avec prudence.</li> <li>Diagramme en bo\u00eete : un diagramme en bo\u00eete est un graphique qui repr\u00e9sente la distribution des valeurs d'un ensemble de donn\u00e9es. Il est compos\u00e9 de cinq \u00e9l\u00e9ments : la m\u00e9diane, les quartiles, les valeurs minimales et maximales, et les valeurs aberrantes.</li> <li>Mod\u00e8le d'IA ou de Machine Learning: une sorte de condens\u00e9 ou de r\u00e9sum\u00e9 de la base de donn\u00e9es d'entrainement.</li> <li>LLM: Large Language Model. Un mod\u00e8le d'IA entra\u00een\u00e9 sur une colossale base de donn\u00e9es et qui est sp\u00e9cialis\u00e9 dans la discussion en langage naturel.<ul> <li>Exemples de LLM: GPT-3 et GTP-4o (d\u00e9velopp\u00e9 par OpenAI), Gemini (d\u00e9velopp\u00e9 par Google AI), Claude (d\u00e9velopp\u00e9 par Anthropic), Mistral 7B (d\u00e9velopp\u00e9 par Mistral AI), etc.</li> </ul> </li> <li>langchain est une libraire qui permet d'interroger les API des fournisseurs d'IA/LLM (OpenAI, Google AI, Mistral, etc.).</li> </ul>"},{"location":"python/datascience/#preparation-a-la-pratique","title":"Pr\u00e9paration \u00e0 la pratique\u00b6","text":"<p>Ficiher requirements utilis\u00e9 dans ce notebook</p> <p>Cr\u00e9er un environnement virtuel <code>python -m venv .venv</code> et l'activer sous Linux/Mac <code>source .venv/bin/activate</code> et sous windows <code>.\\.venv\\Scripts\\activate</code></p>"},{"location":"python/datascience/#pandas","title":"Pandas\u00b6","text":"<p>Pandas est une librairie Python qui permet de manipuler des donn\u00e9es de mani\u00e8re simple et efficace. Elle est bas\u00e9e sur deux structures de donn\u00e9es principales : les <code>Series</code> et les <code>DataFrame</code>. Les <code>Series</code> sont des tableaux unidimensionnels, tandis que les <code>DataFrame</code> sont des tableaux bidimensionnels. Les <code>DataFrame</code> offrent \u00e9galement des fonctionnalit\u00e9s avanc\u00e9es telles que le filtrage et l'agr\u00e9gation des donn\u00e9es. Les <code>DataFrame</code> supportent \u00e9galement le traitement de donn\u00e9es manquantes et la fusion de plusieurs ensembles de donn\u00e9es. Les <code>DataFrame</code> permettent \u00e9galement d'effectuer des op\u00e9rations de jointures entre diff\u00e9rents ensembles de donn\u00e9es, ce qui facilite l'analyse de donn\u00e9es complexes.</p>"},{"location":"python/datascience/#graphiques-avec-pandas-et-matplotlib","title":"Graphiques avec Pandas et Matplotlib\u00b6","text":"<p>Matplotlib est souvent utilis\u00e9 en conjonction avec Pandas pour effectuer des visualisations. Voici un exemple de cr\u00e9ation d'un graphique \u00e0 partir d'un DataFrame Pandas.</p>"},{"location":"python/datascience/#exercices","title":"Exercices\u00b6","text":"<ul> <li>S\u00e9rie d'exercices corrig\u00e9s</li> </ul>"},{"location":"python/datascience/#sources-et-references","title":"Sources et r\u00e9f\u00e9rences\u00b6","text":"<ul> <li>guipsamora/pandas_exercises</li> <li>justmarkham/DAT8</li> </ul>"},{"location":"python/datascience/ex-01/","title":"Corrig\u00e9 exos s\u00e9rie 1","text":"In\u00a0[2]: Copied! <pre>import pandas as pd\n\ntitanic = pd.read_csv(\"titanic.csv\")\ntitanic.head()\n</pre> import pandas as pd  titanic = pd.read_csv(\"titanic.csv\") titanic.head() Out[2]: PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S In\u00a0[3]: Copied! <pre># Permet de rendre la colonne plus compr\u00e9hensible (moins confus que des 1 et des 0)\ntitanic[\"Did survive\"] = [\"yes\" if x == 0 else \"no\" for x in titanic[\"Survived\"]]\ntitanic[\"Did survive\"].value_counts()\n</pre> # Permet de rendre la colonne plus compr\u00e9hensible (moins confus que des 1 et des 0) titanic[\"Did survive\"] = [\"yes\" if x == 0 else \"no\" for x in titanic[\"Survived\"]] titanic[\"Did survive\"].value_counts() Out[3]: <pre>Did survive\nyes    549\nno     342\nName: count, dtype: int64</pre> In\u00a0[4]: Copied! <pre>survived = titanic.groupby(\"Did survive\")[\"PassengerId\"].count()\nsurvived\n</pre> survived = titanic.groupby(\"Did survive\")[\"PassengerId\"].count() survived Out[4]: <pre>Did survive\nno     342\nyes    549\nName: PassengerId, dtype: int64</pre> <ul> <li>Calculer le pourcentage de survivants</li> </ul> <p>Comme les valeurs sont 0 ou 1, la moyenne repr\u00e9sente le pourcentage de morts. Donc si on fait 1 - la moyenne, on obtient le pourcentage de survivants.</p> In\u00a0[\u00a0]: Copied! <pre>avg = 100 * (1 - titanic[\"Survived\"].mean())\navg\n</pre> avg = 100 * (1 - titanic[\"Survived\"].mean()) avg Out[\u00a0]: <pre>np.float64(61.61616161616161)</pre> In\u00a0[6]: Copied! <pre>print(f\"{avg:.2f}%\")\n</pre> print(f\"{avg:.2f}%\") <pre>61.62%\n</pre> In\u00a0[7]: Copied! <pre>df = 100 * (1 - titanic[[\"Pclass\", \"Survived\"]].groupby(\"Pclass\").mean())\ndf\n</pre> df = 100 * (1 - titanic[[\"Pclass\", \"Survived\"]].groupby(\"Pclass\").mean()) df Out[7]: Survived Pclass 1 37.037037 2 52.717391 3 75.763747 In\u00a0[8]: Copied! <pre>df.style.format({\"Survived\": \"{:.2f}%\"})\n</pre> df.style.format({\"Survived\": \"{:.2f}%\"}) Out[8]: Survived Pclass 1 37.04% 2 52.72% 3 75.76% In\u00a0[9]: Copied! <pre>def get_percentage_format(val):\n  if val &lt; 50:\n    return \"color: red\"\n  else:\n    return \"color: green\"\n  \ndf.style.applymap(get_percentage_format)\n</pre> def get_percentage_format(val):   if val &lt; 50:     return \"color: red\"   else:     return \"color: green\"    df.style.applymap(get_percentage_format) <pre>C:\\Users\\a527524\\AppData\\Local\\Temp\\ipykernel_24536\\3562722453.py:7: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.\n  df.style.applymap(get_percentage_format)\n</pre> Out[9]: Survived Pclass 1 37.037037 2 52.717391 3 75.763747 In\u00a0[10]: Copied! <pre>import seaborn as sns\ncm = sns.light_palette(\"green\", as_cmap=True)\ndf.style.format({\"Survived\": \"{:.2f} %\"}).background_gradient(cmap=cm)\n</pre> import seaborn as sns cm = sns.light_palette(\"green\", as_cmap=True) df.style.format({\"Survived\": \"{:.2f} %\"}).background_gradient(cmap=cm) Out[10]: Survived Pclass 1 37.04 % 2 52.72 % 3 75.76 % In\u00a0[11]: Copied! <pre>100 * (1 - titanic[[\"Sex\", \"Survived\"]].groupby(\"Sex\").mean())\n</pre> 100 * (1 - titanic[[\"Sex\", \"Survived\"]].groupby(\"Sex\").mean()) Out[11]: Survived Sex female 25.796178 male 81.109185 In\u00a0[12]: Copied! <pre>avg = titanic[\"Age\"].mean()\n(titanic[\"Age\"] &gt; avg).values.sum()\n</pre> avg = titanic[\"Age\"].mean() (titanic[\"Age\"] &gt; avg).values.sum() Out[12]: <pre>np.int64(330)</pre> In\u00a0[13]: Copied! <pre># En une ligne\n(titanic[\"Age\"] &gt; titanic[\"Age\"].mean()).values.sum()\n</pre> # En une ligne (titanic[\"Age\"] &gt; titanic[\"Age\"].mean()).values.sum() Out[13]: <pre>np.int64(330)</pre> In\u00a0[14]: Copied! <pre>max = titanic[\"Fare\"].max()\ntitanic[titanic[\"Fare\"] == max][[\"Name\", \"Fare\"]]\n</pre> max = titanic[\"Fare\"].max() titanic[titanic[\"Fare\"] == max][[\"Name\", \"Fare\"]] Out[14]: Name Fare 258 Ward, Miss Anna 512.3292 679 Cardeza, Mr. Thomas Drake Martinez 512.3292 737 Lesurer, Mr. Gustave J 512.3292 In\u00a0[15]: Copied! <pre>max_age = titanic[\"Age\"].max()\nprint(\"max age\", max_age)\ntitanic[titanic[\"Age\"] == max_age][\"Name\"]\n</pre> max_age = titanic[\"Age\"].max() print(\"max age\", max_age) titanic[titanic[\"Age\"] == max_age][\"Name\"] <pre>max age 80.0\n</pre> Out[15]: <pre>630    Barkworth, Mr. Algernon Henry Wilson\nName: Name, dtype: object</pre> <p>Les noms des passagers les plus jeunes.</p> In\u00a0[\u00a0]: Copied! <pre>min_age = titanic[\"Age\"].min()\nprint(\"min age\", min_age)\ntitanic[titanic[\"Age\"] == min_age][\"Name\"]\n</pre> min_age = titanic[\"Age\"].min() print(\"min age\", min_age) titanic[titanic[\"Age\"] == min_age][\"Name\"] <pre>max age 0.42\n</pre> Out[\u00a0]: <pre>803    Thomas, Master Assad Alexander\nName: Name, dtype: object</pre> In\u00a0[19]: Copied! <pre>titanic[\"Name length\"] = [len(x) for x in titanic[\"Name\"]]\ntitanic.head()\n</pre> titanic[\"Name length\"] = [len(x) for x in titanic[\"Name\"]] titanic.head() Out[19]: PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Did survive name_length Name length 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S yes 23 23 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C no 51 51 2 3 1 3 Heikkinen, Miss Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S no 21 21 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S no 44 44 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S yes 24 24 In\u00a0[21]: Copied! <pre>max_name_length = titanic[\"Name length\"].max()\ntitanic[titanic[\"Name length\"] == max_name_length]\n</pre> max_name_length = titanic[\"Name length\"].max() titanic[titanic[\"Name length\"] == max_name_length] Out[21]: PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Did survive name_length Name length 307 308 1 1 Penasco y Castellana, Mrs. Victor de Satode (M... female 17.0 1 0 PC 17758 108.9 C65 C no 82 82 In\u00a0[23]: Copied! <pre>df = titanic[titanic[\"Survived\"] == 0]\nmax_age = df[\"Age\"].max()\nprint(\"max survivor age\", max_age)\ndf[df[\"Age\"] == max_age][\"Name\"]\n</pre> df = titanic[titanic[\"Survived\"] == 0] max_age = df[\"Age\"].max() print(\"max survivor age\", max_age) df[df[\"Age\"] == max_age][\"Name\"] <pre>max survivor age 74.0\n</pre> Out[23]: <pre>851    Svensson, Mr. Johan\nName: Name, dtype: object</pre>"},{"location":"python/datascience/ex-01/#corrige-exos-serie-1","title":"Corrig\u00e9 exos s\u00e9rie 1\u00b6","text":""},{"location":"python/datascience/ex-01/#nombre-de-survivants-et-de-morts","title":"Nombre de survivants et de morts\u00b6","text":""},{"location":"python/datascience/ex-01/#calculer-le-pourcentage-de-survivants-par-classe","title":"Calculer le pourcentage de survivants par classe.\u00b6","text":""},{"location":"python/datascience/ex-01/#calculer-le-pourcentage-de-survivants-par-sexe","title":"Calculer le pourcentage de survivants par sexe.\u00b6","text":""},{"location":"python/datascience/ex-01/#calculer-le-nombre-de-passagers-dont-lage-est-superieur-a-la-moyenne","title":"Calculer le nombre de passagers dont l'\u00e2ge est sup\u00e9rieur \u00e0 la moyenne.\u00b6","text":""},{"location":"python/datascience/ex-01/#les-noms-des-passagers-qui-ont-paye-le-plus-cher-leur-billet","title":"Les noms des passagers qui ont pay\u00e9 le plus cher leur billet\u00b6","text":""},{"location":"python/datascience/ex-01/#les-noms-des-passagers-les-plus-ages","title":"Les noms des passagers les plus ag\u00e9s\u00b6","text":""},{"location":"python/datascience/ex-01/#les-noms-des-personnes-qui-ont-survecu-et-qui-ont-le-plus-grand-age","title":"Les noms des personnes qui ont surv\u00e9cu et qui ont le plus grand \u00e2ge\u00b6","text":""},{"location":"python/datascience/ex-02/","title":"Corrig\u00e9 exos s\u00e9rie 2","text":"In\u00a0[19]: Copied! <pre>import pandas as pd\nimport matplotlib.pyplot as plt\n\ntitanic = pd.read_csv(\"titanic.csv\")\ntitanic.head()\n</pre> import pandas as pd import matplotlib.pyplot as plt  titanic = pd.read_csv(\"titanic.csv\") titanic.head() Out[19]: PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S In\u00a0[20]: Copied! <pre>titanic.Sex.value_counts().plot(kind=\"bar\")\n</pre> titanic.Sex.value_counts().plot(kind=\"bar\") Out[20]: <pre>&lt;Axes: xlabel='Sex'&gt;</pre> In\u00a0[21]: Copied! <pre>titanic.Sex.hist()\n</pre> titanic.Sex.hist() Out[21]: <pre>&lt;Axes: &gt;</pre> In\u00a0[22]: Copied! <pre>fig, axs = plt.subplots(2)\ntitanic.Age.hist(ax=axs[0], bins=8)\ntitanic.Age.plot.box(ax=axs[1])\nplt.show()\n</pre> fig, axs = plt.subplots(2) titanic.Age.hist(ax=axs[0], bins=8) titanic.Age.plot.box(ax=axs[1]) plt.show() In\u00a0[\u00a0]: Copied! <pre>titanic[\"Did survive\"] = [\"yes\" if x == 0 else \"no\" for x in titanic[\"Survived\"]]\nsurvive_df = titanic[titanic[\"Survived\"] == 0][[\"Sex\", \"Age\"]]\nsurvive_df.head()\n</pre> titanic[\"Did survive\"] = [\"yes\" if x == 0 else \"no\" for x in titanic[\"Survived\"]] survive_df = titanic[titanic[\"Survived\"] == 0][[\"Sex\", \"Age\"]] survive_df.head() Out[\u00a0]: Sex Age 0 male 22.0 4 male 35.0 5 male NaN 6 male 54.0 7 male 2.0 In\u00a0[38]: Copied! <pre>fig, axs = plt.subplots(2)\nsurvive_df[\"Sex\"].hist(ax=axs[0], bins=8)\nsurvive_df.plot.box(by=\"Sex\", ax=axs[1])\nplt.show()\n</pre> fig, axs = plt.subplots(2) survive_df[\"Sex\"].hist(ax=axs[0], bins=8) survive_df.plot.box(by=\"Sex\", ax=axs[1]) plt.show() In\u00a0[49]: Copied! <pre>pct_male = 100 * (1 - titanic.loc[titanic[\"Sex\"] == \"male\", \"Survived\"].mean())\npct_female = 100 * (1 - titanic.loc[titanic[\"Sex\"] == \"female\", \"Survived\"].mean()) \npct_survived = {\n  \"Sex\": [\"male\", \"female\"],\n  \"Survived percentage\": [pct_male, pct_female],\n}\npct_survived\n</pre> pct_male = 100 * (1 - titanic.loc[titanic[\"Sex\"] == \"male\", \"Survived\"].mean()) pct_female = 100 * (1 - titanic.loc[titanic[\"Sex\"] == \"female\", \"Survived\"].mean())  pct_survived = {   \"Sex\": [\"male\", \"female\"],   \"Survived percentage\": [pct_male, pct_female], } pct_survived Out[49]: <pre>{'Sex': ['male', 'female'],\n 'Survived percentage': [np.float64(81.10918544194108),\n  np.float64(25.79617834394905)]}</pre> In\u00a0[57]: Copied! <pre>pct_survived_df = pd.DataFrame(pct_survived)\npct_survived_df.plot.bar(x=\"Sex\")\n</pre> pct_survived_df = pd.DataFrame(pct_survived) pct_survived_df.plot.bar(x=\"Sex\") Out[57]: <pre>&lt;Axes: xlabel='Sex'&gt;</pre>"},{"location":"python/datascience/ex-02/#corrige-exos-serie-2","title":"Corrig\u00e9 exos s\u00e9rie 2\u00b6","text":""},{"location":"python/datascience/ex-02/#afficher-lhistogramme-du-nombre-dhommes-et-de-femmes","title":"Afficher l'histogramme du nombre d'hommes et de femmes\u00b6","text":""},{"location":"python/datascience/ex-02/#analyser-la-repartition-des-ages-des-passagers","title":"Analyser la r\u00e9partition des ages des passagers\u00b6","text":""},{"location":"python/datascience/ex-02/#analyser-le-lien-entre-la-survie-et-le-sexe","title":"Analyser le lien entre la survie et le sexe\u00b6","text":""},{"location":"python/datascience/exercices/","title":"Exercices Pandas et Pyplot","text":""},{"location":"python/datascience/exercices/#exercices-pandas-et-pyplot","title":"Exercices Pandas et Pyplot","text":""},{"location":"python/datascience/exercices/#serie-1","title":"S\u00e9rie 1","text":"<p>R\u00e9aliser cet exercice sur le dataset titanic.csv.</p> <ol> <li>Calculer le nombre de survivants et de morts.</li> <li>Calculer le pourcentage de survivants.</li> <li>Calculer le pourcentage de survivants par classe.</li> <li>Calculer le pourcentage de survivants par sexe.</li> <li>Calculer le nombre de passagers dont l'\u00e2ge est sup\u00e9rieur \u00e0 la moyenne.</li> <li>Donner le nom du passager qui a pay\u00e9 le plus cher son billet.</li> <li>Donner le nom du passager le plus \u00e2g\u00e9.</li> <li>Donner le nom du passager le plus jeune.</li> <li>La personne qui le nom complet le plus long.</li> <li>Le nom de la personne la plus \u00e2g\u00e9e qui a surv\u00e9cu.</li> </ol>"},{"location":"python/datascience/exercices/#serie-2","title":"S\u00e9rie 2","text":"<p>R\u00e9aliser cet exercice sur le dataset titanic.csv.</p> <ol> <li>Afficher l'histogramme du nombre d'hommes et de femmes.</li> <li>Analyser la r\u00e9partition des ages des passagers en utilisant les graphiques suivants:<ul> <li>Histogramme des ages des passagers par tranche (utiliser les tranches par d\u00e9faut de pandas).</li> <li>Boxplot de la r\u00e9partition des ages des passagers.</li> </ul> </li> <li>Analyser le lien entre la survie et le sexe en utilisant les graphiques suivants:<ul> <li>Histogramme du pourcentage de survivants par sexe.</li> <li>Boxplot de la r\u00e9partition des ages des survivants par sexe.</li> <li>Interpr\u00e9ter les r\u00e9sultats.</li> </ul> </li> <li>Analyser le lien entre la survie et la classe du passager en utilisant les graphiques suivants:<ul> <li>Histogramme du pourcentage de survivants par classe.</li> <li>Boxplot de la r\u00e9partition des ages des survivants par classe.</li> <li>Interpr\u00e9ter les r\u00e9sultats.</li> </ul> </li> </ol>"},{"location":"python/datascience/exercices/#serie-3-streamlit","title":"S\u00e9rie 3 (Streamlit)","text":"<ol> <li>Proposer une application Streamlit qui permet de visualiser les donn\u00e9es du dataset titanic.csv en affichant les informations et contr\u00f4les suivants:<ul> <li>Un <code>multiselect</code> qui permet de choisir le sexe (un des deux ou les deux).</li> <li>Un <code>toggle</code> qui permet de changer l'unit\u00e9 de la monnaie (dollar ou euro).</li> <li>Somme totale des billets (total de la colonne Fare).</li> <li>Graphique en barre de la somme totale par classe.</li> </ul> </li> <li>Proposer une application Streamlit qui permet de visualiser les donn\u00e9es du dataset air_quality_no20.csv. Cette application doit afficher les informations et contr\u00f4les suivants:<ul> <li>Un <code>selectbox</code> qui permet de choisir la station de mesure.</li> <li>S\u00e9lection de la p\u00e9riode de mesure (par exemple avec deux <code>selectbox</code> pour choisir la date de d\u00e9but et de fin).</li> <li>Un graphique en courbe qui affiche la mesure de la station s\u00e9lectionn\u00e9e pour la p\u00e9riode donn\u00e9e.</li> </ul> </li> </ol>"},{"location":"python/datascience/streamlit/","title":"Streamlit","text":""},{"location":"python/datascience/streamlit/#streamlit","title":"Streamlit","text":"<p>Streamlit est un framework open-source pour cr\u00e9er des applications web interactives en Python qui sont orient\u00e9e data.</p>"},{"location":"python/datascience/streamlit/#quelques-exemples","title":"Quelques exemples","text":"Tour rapide<pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\n\nst.title(\"Hello streamlit\")\n\n\ntitanic = pd.read_csv(\"titanic.csv\")\n\nfare_to_filter = st.slider(\n    \"Max Fare\", titanic.Fare.min(), titanic[\"Fare\"].max())\ntitanic = titanic[titanic[\"Fare\"] &lt; fare_to_filter]\n\ntabs = st.tabs([\"Dataframe\", \"Histogram\"])\ntabs[0].subheader('Raw data')\ntabs[0].write(titanic)\n\ntabs[1].subheader('Number of passengers per class')\nhist_values = np.histogram(titanic[\"Pclass\"], bins=3, range=(1, 3))[0]\ntabs[1].bar_chart(hist_values)\n</code></pre> lanchain avec google AI<pre><code>import streamlit as st\nfrom langchain_google_genai import ChatGoogleGenerativeAI\n\nsystem_message = (\n    \"system\", \"\"\"You are a weather specialist. \n    The human provides humidity and temperature. \n    Can you explain the results and comment on the air condition in the house.\n    Please provide a short answer in two sentences.\n    \"\"\")\ngoogleai_api_key = st.sidebar.text_input(\"Google AI API Key\", type=\"password\")\n\n# Arr\u00eater l'application streamlit si pas de cl\u00e9 d'API\nif len(googleai_api_key) == 0:\n    st.error(\"No API key\")\n    st.stop()\n\nst.title(\"AI weather analyst\")\nllm = ChatGoogleGenerativeAI(\n    model=\"gemini-2.0-flash-lite\", api_key=googleai_api_key)\n\nwith st.form(\"my_form\"):\n    text = st.text_area(\"Prompt:\")\n    submitted = st.form_submit_button(\"Submit\")\n\nif submitted:\n    human_message = (\"human\", text)\n    response = llm.invoke([system_message, human_message])\n    st.info(response.content)\n</code></pre>"},{"location":"test/","title":"Bienvenue au cours: Test logiciel","text":""},{"location":"test/#bienvenue-au-cours-test-logiciel","title":"Bienvenue au cours: Test logiciel","text":""},{"location":"test/#ressources-et-liens-utiles","title":"Ressources et liens utiles","text":"<ul> <li>Software testing par IBM</li> <li>Test et Validation du Logiciel (LaBRI)</li> </ul>"},{"location":"test/#license","title":"License","text":"<ul> <li>Ce support de cours est disponible sous licence Creative Commons Attribution 4.0 International (CC BY 4.0): </li> <li>Logo g\u00e9n\u00e9r\u00e9 par https://hotpot.ai/</li> </ul>"},{"location":"test/bdd/","title":"Behavior Drivent Development","text":""},{"location":"test/bdd/#behavior-drivent-development","title":"Behavior Drivent Development","text":"<p>M\u00e9thode BDD: Comment utiliser la m\u00e9thode BDD ?</p> <ul> <li>Feature: D\u00e9finit le comportement attendu</li> <li>Scenario: D\u00e9finit un cas d'utilisation</li> <li>Given: D\u00e9finit les pr\u00e9conditions</li> <li>When: D\u00e9finit l'action</li> <li>Then: D\u00e9finit le r\u00e9sultat attendu</li> </ul>"},{"location":"test/bdd/#cucumber","title":"Cucumber","text":"<ul> <li> <p>Tutoriels</p> <ul> <li>Cucumber 10-minute tutorial</li> <li>Commande maven pour g\u00e9n\u00e9rer un projet Cucumber</li> </ul> <pre><code>mvn archetype:generate \"-DarchetypeGroupId=io.cucumber\" \"-DarchetypeArtifactId=cucumber-archetype\" \"-DarchetypeVersion=7.20.1\" \"-DgroupId=hellocucumber\" \"-DartifactId=hellocucumber\" \"-Dpackage=hellocucumber\" \"-Dversion=1.0.0-SNAPSHOT\" \"-DinteractiveMode=false\"\n</code></pre> <ul> <li>iblasquez/tuto_bdd_cucumber</li> <li>Exemple d'int\u00e9gration avec Selenium</li> <li>cucumber-bdd-tutorial</li> <li>Langages supportant Cucumber et alternatives pour d'autres langages</li> </ul> </li> </ul>"},{"location":"test/bdd/#katas-bdd","title":"Katas BDD","text":"<p>Les katas sont des exercices de programmation qui permettent de s'entra\u00eener \u00e0 la programmation. Ceux-ci peuvent aussi \u00eatre utilis\u00e9s pour apprendre la m\u00e9thode BDD.</p> <p>Exemples de sites de katas: Code wars, Coding Dojo.</p> <p>Nous allons r\u00e9aliser le kata bowling. Principe : le professeur code ce que les \u00e9l\u00e8ves lui disent. Chaque \u00e9l\u00e8ve prend la parole \u00e0 son tour pendant 10 minutes et doit dire ce que le professeur doit coder.</p>"},{"location":"test/bdd/#exercices","title":"Exercices","text":"<ol> <li>D\u00e9velopper le jeu du pendu avec la m\u00e9thode BDD (Doc si vous \u00eates bloqu\u00e9).</li> <li>Faire le TP d'int\u00e9gration avec Selenium</li> <li>D\u00e9velopper un jeu de morpion avec la m\u00e9thode BDD.</li> </ol>"},{"location":"test/bdd/#_1","title":"Behavior Drivent Development","text":""},{"location":"test/generalites/","title":"G\u00e9n\u00e9ralit\u00e9s","text":""},{"location":"test/generalites/#generalites","title":"G\u00e9n\u00e9ralit\u00e9s","text":""},{"location":"test/generalites/#definition","title":"D\u00e9finition","text":"<p>IBM</p> <p>Le test logiciel est le processus qui consiste \u00e0 \u00e9valuer et \u00e0 v\u00e9rifier qu'un produit ou une application logicielle fait ce qu'il ou elle est cens\u00e9(e) faire.</p> <p>Les avantages des tests, toujours selon IBM</p> <p>Les avantages du test comprennent la pr\u00e9vention des bogues, la r\u00e9duction des co\u00fbts de d\u00e9veloppement et l'am\u00e9lioration des performances.</p>"},{"location":"test/generalites/#classification-des-tests","title":"Classification des tests","text":"<p>Il est compliqu\u00e9 de trouver une classification universelle des tests logicielles. Dans la suite, je compile quelques classifications propos\u00e9es par diff\u00e9rentes sources.</p>"},{"location":"test/generalites/#differents-types-de-tests","title":"Diff\u00e9rents types de tests","text":"<p>Source atlassian</p> <p>Voici quelques types de tests sans classification particuli\u00e8re:</p> <ul> <li>Tests unitaires</li> <li>Tests d'int\u00e9gration</li> <li>Tests fonctionnels</li> <li>Tests de bout en bout</li> <li>Tests d'acceptation</li> <li>Tests de performance</li> <li>Smoke tests</li> </ul>"},{"location":"test/generalites/#pyramide-des-tests-par-niveau","title":"Pyramide des tests par niveau","text":"<p>Source all4test</p> <ul> <li>Les tests unitaires</li> <li>Les tests d\u2019int\u00e9gration</li> <li>Les tests syst\u00e8mes</li> <li>Les tests d\u2019acceptation</li> </ul>"},{"location":"test/generalites/#classification-selon-la-nature","title":"Classification selon la nature","text":"<p>Source all4test</p> <ul> <li>Tests fonctionnels</li> <li>Tests non fonctionnels, quelques exemples:<ul> <li>Les tests de robustesse</li> <li>Les tests de performance</li> <li>Les tests de mont\u00e9e en charge</li> <li>Les tests de compatibilit\u00e9 de plateforme</li> <li>Les tests d\u2019ergonomie</li> <li>Les tests d\u2019interface graphique</li> <li>Les tests de s\u00e9curit\u00e9</li> </ul> </li> </ul>"},{"location":"test/generalites/#tests-manuels-ou-automatises","title":"Tests manuels ou automatis\u00e9s ?","text":"<p>Source atlassian</p> <p>Les tests manuels sont effectu\u00e9s par des humains tandis que les tests automatis\u00e9es sont effectu\u00e9es par un logiciel.</p>"},{"location":"test/librairies/","title":"Quelques librairies de tests","text":""},{"location":"test/librairies/#quelques-librairies-de-tests","title":"Quelques librairies de tests","text":"<p>G\u00e9n\u00e9ralement, automatiser des tests requiert trois choses:</p> <ol> <li>L'outil ou le moteur d'ex\u00e9cution des tests et de restitution des r\u00e9sultats (sous forme visuelle ou dans un fichier / rapport)</li> <li>Du code de test (soit le m\u00eame langage que le projet, soit un langage diff\u00e9rent) qui contient des assertions</li> <li>Une librairie ou framework de test (qui fait le lien entre le code et le moteur)</li> </ol>"},{"location":"test/librairies/#junit","title":"JUnit","text":"<p>Framework de test Java permet de tester son code via des assertions. Explorons le projet de d\u00e9marrage fourni par le guide officiel</p>"},{"location":"test/librairies/#exercices","title":"Exercices","text":"<ol> <li>Ecrire un test unitaire <code>StringTest</code> qui test ces m\u00e9thodes de la classe <code>String</code>: <code>toUpperCase()</code>, <code>toLowerCase()</code> et <code>charAt()</code>.</li> <li>Exo 2 de cette s\u00e9rie<ul> <li>Ignorer les CE invalides b5 et b6</li> </ul> </li> <li>Exercice 2 de cette s\u00e9rie qui n\u00e9cessite d'abord de faire d'abord ces exercices: partie1, partie2</li> <li>Cet exo de librecours.net. Le code est \u00e0 traduire du JS vers du Java.</li> <li>Cet exercice de librecours.net. Le code est \u00e0 traduire du JS vers du Java.</li> <li>Ce TD qui provient de labri. Le <code>makefile</code> est l'\u00e9quivalent de <code>maven</code> pour nous. Faire la question 3 avec cette commande \u00e0 la place de l'outil propos\u00e9 <code>mvn surefire-report:report</code>.</li> </ol> Quelques astuces <ul> <li>Exo2 : Fonctions corriger / modifier: <code>checkDay</code>, <code>checkYear</code>, <code>checkDayLimits</code>, renommer ou enlever <code>maxDayOfMonth(month)</code>, <code>testFebruaryValidLimitDates</code>, <code>testValidLimitDates</code></li> <li>Quelques solutions</li> </ul>"},{"location":"test/librairies/#tests-dans-un-projet-spring-mvc","title":"Tests dans un projet Spring MVC","text":""},{"location":"test/librairies/#api-rest-sans-base-de-donnees","title":"API REST sans base de donn\u00e9es","text":"<ul> <li>G\u00e9n\u00e9rer un projet Spring avec initializr, en choisissant les d\u00e9pendances suivantes: Spring Web et Spring Boot DevTools.</li> <li>Ouvrir le projet sur VSCode</li> <li> <p>Cr\u00e9er un <code>@RestController</code> avec deux routes en @GET et en @POST, un mod\u00e8le et un service qui g\u00e8re une liste statique en m\u00e9moire.</p> <ul> <li>Je vous propose d'utiliser comme mod\u00e8le une classe <code>Manga</code> avec trois champs <code>ISBN</code>, <code>name</code> et <code>nbPages</code></li> </ul> <pre><code>package com.cours.testlog.model;\n\npublic class Manga {\n  private String isbn;\n  private String name;\n  private int nbPages;\n\n  public String getIsbn() {\n    return isbn;\n  }\n\n  public void setIsbn(String isbn) {\n    this.isbn = isbn;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public int getNbPages() {\n    return nbPages;\n  }\n\n  public void setNbPages(int nbPages) {\n    this.nbPages = nbPages;\n  }\n}\n</code></pre> <pre><code>package com.cours.testlog.controller;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.cours.testlog.model.Manga;\nimport com.cours.testlog.service.MangaService;\n\n@RestController\n@RequestMapping(\"/manga\")\npublic class MangaController {\n\n  @Autowired\n  MangaService mangaService;\n\n  @GetMapping\n  public List&lt;Manga&gt; getAll() {\n    return mangaService.getAll();\n  }\n\n  @PostMapping\n  public ResponseEntity&lt;Void&gt; addOne(@RequestBody Manga manga) {\n    if (mangaService.addOne(manga)) {\n      return ResponseEntity.ok().build();\n    }\n    return ResponseEntity.badRequest().build();\n  }\n}\n</code></pre> <pre><code>package com.cours.testlog.service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.stereotype.Service;\n\nimport com.cours.testlog.model.Manga;\n\n@Service\npublic class MangaService {\n  static List&lt;Manga&gt; mangas = new ArrayList&lt;&gt;();\n\n  public List&lt;Manga&gt; getAll() {\n    return mangas;\n  }\n\n  public boolean addOne(Manga manga) {\n    if (manga.getIsbn() == null || mangas.stream().anyMatch(m -&gt; m.getIsbn().equals(manga.getIsbn()))) {\n      return false;\n    }\n    mangas.add(manga);\n    return true;\n  }\n\n  public void removeAll() {\n    mangas.clear();\n  }\n}\n</code></pre> </li> <li> <p>Lancer votre serveur et v\u00e9rifier qu'il fonctionne avec la bonne commande (avec gradle <code>./gradlew bootRun</code>, avec maven <code>./mvnw springboot:run</code>) ou depuis votre IDE</p> </li> <li>\u00c9crire des tests unitaires pour le service</li> <li> <p>Spring propose deux fa\u00e7ons de tester le contr\u00f4leur (en d'autres termes l'API REST).</p> <ul> <li>En lan\u00e7ant un serveur web (avec la stack HTTP compl\u00e8te) via la classe <code>TestRestTemplate</code></li> </ul> <pre><code>@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\npublic class MangaControllerTests {\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    @Autowired\n    private MangaService mangaService;\n\n    @BeforeEach\n    void setup() {\n        mangaService.removeAll();\n    }\n\n    @Test\n    public void testGetAll() {\n        // https://www.baeldung.com/spring-rest-template-list\n        var response = restTemplate.getForEntity(\"/manga\", Manga[].class);\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertEquals(0, response.getBody().length);\n\n        Manga manga = new Manga();\n        manga.setIsbn(\"sdsfds\");\n        manga.setName(\"my hero academia\");\n        manga.setNbPages(40);\n        restTemplate.postForEntity(\"/manga\", manga, Void.class);\n\n        response = restTemplate.getForEntity(\"/manga\", Manga[].class);\n        assertNotNull(response.getBody());\n        assertEquals(1, response.getBody().length);\n        Manga responseManga = (Manga) response.getBody()[0];\n        org.assertj.core.api.Assertions.assertThat(responseManga.getIsbn()).isEqualTo(manga.getIsbn());\n        assertEquals(manga.getIsbn(), responseManga.getIsbn());\n    }\n\n    @Test\n    public void testCannotAddSameIsbnTwice() {\n        //TODO\n    }\n}\n</code></pre> <ul> <li>En lan\u00e7ant un serveur bouchonn\u00e9 (on n'a pas la stack HTTP compl\u00e8te) via la classe <code>MockMVC</code>.</li> </ul> <pre><code>package com.cours.testlog.controller;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\nimport static org.hamcrest.Matchers.containsString;\n\nimport com.cours.testlog.service.MangaService;\n\n// https://spring.io/guides/gs/testing-web/\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class MangaControllerMockTests {\n  @Autowired\n  private MockMvc mockMvc;\n\n  @Autowired\n  private MangaService mangaService;\n\n  @BeforeEach\n  void setup() {\n    mangaService.removeAll();\n  }\n\n  @Test\n  public void testGetAll() throws Exception {\n    this.mockMvc.perform(get(\"/manga\"))\n        .andDo(print())\n        .andExpect(status().isOk())\n        .andExpect(content().string(containsString(\"[]\")));\n  }\n\n  @Test\n  public void testAddOne() {\n\n  }\n}\n</code></pre> </li> <li> <p>\u00c9crire le test de <code>testCannotAddSameIsbnTwice</code> qui v\u00e9rifie que l'on ne peut pas ajouter deux mangas avec le m\u00eame ISBN. Impl\u00e9menter ce test avec <code>TestRestTemplate</code> et <code>MockMVC</code>.</p> </li> <li>Ajouter une m\u00e9thode PUT qui permet de modifier un manga existant (erreur 404 si le manga n'existe pas). Ajouter un test pour cette m\u00e9thode.</li> <li>Ajouter une m\u00e9thode DELETE qui permet de supprimer un manga existant (erreur 404 si le manga n'existe pas). Ajouter un test pour cette m\u00e9thode.</li> </ul>"},{"location":"test/librairies/#api-rest-avec-une-base-de-donnees","title":"API REST avec une base de donn\u00e9es","text":"<p>Nous allons utiliser la BDD H2 pour sa simplicit\u00e9 car c'est une BDD relationnelle (SQL) qui ne n\u00e9cessite pas de serveur et r\u00e9side en m\u00e9moire (RAM) par d\u00e9faut.</p> <ul> <li>G\u00e9n\u00e9rer un projet Spring avec le cr\u00e9ateur en ligne en choisissant les d\u00e9pendances suivantes: Spring Data JPA, H2 Database, Spring Boot DevTool et Spring Web.</li> <li>Ouvrir le projet sur VSCode</li> <li>Cr\u00e9er une classe \"Model\" avec l'annotation <code>@Entity</code> et les annotations <code>@Id</code> et <code>@GeneratedValue</code> sur sa cl\u00e9 primaire.</li> <li>Cr\u00e9er une interface <code>xxxxRepository: JpaRepository&lt;Product, Long&gt;</code> o\u00f9 xxx est le nom de votre mod\u00e8le</li> <li>Cr\u00e9er un contr\u00f4leur avec les routes en @GET, @POST, PUT et DELETE, un mod\u00e8le et un service qui g\u00e8re communique avec votre repository</li> <li>Relancer les tests et s'assurer qu'ils fonctionnent toujours.</li> </ul>"},{"location":"test/librairies/#codes-sources","title":"Codes sources","text":"<ul> <li>Ann\u00e9e 2425</li> </ul>"},{"location":"test/librairies/#liens-et-references","title":"Liens et r\u00e9f\u00e9rences","text":"<ul> <li>Anecdote: SQLite est r\u00e9put\u00e9 pour avoir une proportion importante de tests.</li> <li>http://deptinfo.cnam.fr/~graffion/UES/GLG101/tps/java/index.html</li> <li>https://gayerie.dev/docs/testing/test/junit.html</li> <li>https://github.com/mjeanroy/exercices-java/blob/master/exercices-junit.txt</li> </ul>"},{"location":"test/projet/","title":"Sujets d'expos\u00e9s","text":""},{"location":"test/projet/#sujets-dexposes","title":"Sujets d'expos\u00e9s","text":"<p>Choisir un sujet et r\u00e9aliser une pr\u00e9sentation abordant les points suivants:</p> <ul> <li>d\u00e9finition</li> <li>Solutions alternatives ou similaires</li> <li>avantages / inconv\u00e9nients</li> <li>D\u00e9mo en direct ou enregistr\u00e9e sinon (la d\u00e9mo en direct sera pr\u00e9f\u00e9r\u00e9e)</li> </ul> <p>Sujets:</p> <ul> <li>TDD. D\u00e9finition et d\u00e9mo sur un projet Java (Spring ou Quarkus) + un autre langage (JS, Python, Go, Rust, etc.)</li> <li>Quelques Actions GitHub d'int\u00e9gration li\u00e9es aux tests: test-reporter et testforest-dashboard.</li> <li>testquality et SonarQube. Pr\u00e9sentation, d\u00e9mo et mise en \u00e9vidence de leur utilit\u00e9 pour les tests.</li> <li>JIRA et YouTrack. Pr\u00e9sentation, d\u00e9mo et comparatif des deux outils dans le cadre du testing.</li> <li>Tests de performance avec gatling et jmeter. Pr\u00e9sentation des deux outils + d\u00e9mo + comparatif.</li> <li>TestContainers. D\u00e9finition, utilit\u00e9 et d\u00e9mo sur un projet Java (Spring ou Quarkus) + un autre langage (JS, Python, Go, Rust, etc.)</li> <li>appium + d\u00e9mo sur un projet mobile + web</li> <li>Cucumber avec une pr\u00e9sentation sur BDD (Behavior Driven Development) et d\u00e9mo de son impl\u00e9mentation</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2025/#2025","title":"2025","text":""},{"location":"blog/category/web/","title":"web","text":""},{"location":"blog/category/web/#web","title":"web","text":""},{"location":"blog/category/ai/","title":"AI","text":""},{"location":"blog/category/ai/#ai","title":"AI","text":""},{"location":"blog/category/kotlin/","title":"Kotlin","text":""},{"location":"blog/category/kotlin/#kotlin","title":"Kotlin","text":""},{"location":"blog/category/scripting/","title":"Scripting","text":""},{"location":"blog/category/scripting/#scripting","title":"Scripting","text":""}]}